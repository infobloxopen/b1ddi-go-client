// Code generated by go-swagger; DO NOT EDIT.

package content_categories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new content categories API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for content categories API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ContentCategoriesListContentCategories(params *ContentCategoriesListContentCategoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ContentCategoriesListContentCategoriesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	ContentCategoriesListContentCategories lists content categories

	Use this method to retrieve information on all Content Category objects for the account.

The Content Category object represents a specific internet content and used to configure category filters. Based on your configuration, specific actions such as Allow or Block, will be taken on the detected content. BloxOne Cloud provides the following content categories from which you can build your category filters: Drugs, Risk/Fraud/Crime, Entertainment/Culture, Purchasing, Information/Communication, Business/Services, Information Technology, Lifestyle, Society/Education/Religion, Mature/Violent, Games/Gambling, Pornography/Nudity and Uncategorized. Each of these categories contains sub-categories that further define the respective content.
*/
func (a *Client) ContentCategoriesListContentCategories(params *ContentCategoriesListContentCategoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ContentCategoriesListContentCategoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContentCategoriesListContentCategoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "content_categoriesListContentCategories",
		Method:             "GET",
		PathPattern:        "/content_categories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContentCategoriesListContentCategoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContentCategoriesListContentCategoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for content_categoriesListContentCategories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
