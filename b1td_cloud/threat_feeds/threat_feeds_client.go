// Code generated by go-swagger; DO NOT EDIT.

package threat_feeds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new threat feeds API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for threat feeds API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ThreatFeedsListThreatFeeds(params *ThreatFeedsListThreatFeedsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ThreatFeedsListThreatFeedsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	ThreatFeedsListThreatFeeds lists threat feeds

	Use this method to retrieve information on all Threat Feed objects for the account.

BloxOne Cloud provides predefined threat intelligence feeds based on your subscription. The Plus subscription offers a few more feeds than the Standard subscription. The Advanced subscription offers a few more feeds than the Plus subscription. A threat feed subscription for RPZ updates offers protection against malicious hostnames.
*/
func (a *Client) ThreatFeedsListThreatFeeds(params *ThreatFeedsListThreatFeedsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ThreatFeedsListThreatFeedsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThreatFeedsListThreatFeedsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "threat_feedsListThreatFeeds",
		Method:             "GET",
		PathPattern:        "/threat_feeds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ThreatFeedsListThreatFeedsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThreatFeedsListThreatFeedsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for threat_feedsListThreatFeeds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
