// Code generated by go-swagger; DO NOT EDIT.

package named_lists

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewNamedListsListNamedListsCSVParams creates a new NamedListsListNamedListsCSVParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNamedListsListNamedListsCSVParams() *NamedListsListNamedListsCSVParams {
	return &NamedListsListNamedListsCSVParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNamedListsListNamedListsCSVParamsWithTimeout creates a new NamedListsListNamedListsCSVParams object
// with the ability to set a timeout on a request.
func NewNamedListsListNamedListsCSVParamsWithTimeout(timeout time.Duration) *NamedListsListNamedListsCSVParams {
	return &NamedListsListNamedListsCSVParams{
		timeout: timeout,
	}
}

// NewNamedListsListNamedListsCSVParamsWithContext creates a new NamedListsListNamedListsCSVParams object
// with the ability to set a context for a request.
func NewNamedListsListNamedListsCSVParamsWithContext(ctx context.Context) *NamedListsListNamedListsCSVParams {
	return &NamedListsListNamedListsCSVParams{
		Context: ctx,
	}
}

// NewNamedListsListNamedListsCSVParamsWithHTTPClient creates a new NamedListsListNamedListsCSVParams object
// with the ability to set a custom HTTPClient for a request.
func NewNamedListsListNamedListsCSVParamsWithHTTPClient(client *http.Client) *NamedListsListNamedListsCSVParams {
	return &NamedListsListNamedListsCSVParams{
		HTTPClient: client,
	}
}

/*
NamedListsListNamedListsCSVParams contains all the parameters to send to the API endpoint

	for the named lists list named lists c s v operation.

	Typically these are written to a http.Request.
*/
type NamedListsListNamedListsCSVParams struct {

	/* Filter.

	     A collection of response resources can be filtered by a logical expression string that includes JSON tag references to values in each resource, literal values, and logical operators. If a resource does not have the specified tag, its value is assumed to be null.

	Literal values include numbers (integer and floating-point), and quoted (both single- or double-quoted) literal strings, and 'null'.

	You can filter by following fields:

	| Name               | type   | Supported Ops    |
	| ------------------ | ------ | ---------------- |
	| type               | string | ==, !=           |
	| items              | string | ~, !~            |
	| items_described    | string | ==               |

	Grouping operators (and, or, not, ()) are not supported between different fields.

	*/
	Filter *string

	/* OrderBy.



	A collection of response resources can be sorted by their JSON tags. For a 'flat' resource, the tag name is straightforward. If sorting is allowed on non-flat hierarchical resources, the service should implement a qualified naming scheme such as dot-qualification to reference data down the hierarchy. If a resource does not have the specified tag, its value is assumed to be null.)

	Specify this parameter as a comma-separated list of JSON tag names. The sort direction can be specified by a suffix separated by whitespace before the tag name. The suffix 'asc' sorts the data in ascending order. The suffix 'desc' sorts the data in descending order. If no suffix is specified the data is sorted in ascending order.


	*/
	OrderBy *string

	/* Tfilter.

	   Filtering by tags.
	*/
	Tfilter *string

	/* TorderBy.

	   Sorting by tags.
	*/
	TorderBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the named lists list named lists c s v params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NamedListsListNamedListsCSVParams) WithDefaults() *NamedListsListNamedListsCSVParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the named lists list named lists c s v params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NamedListsListNamedListsCSVParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the named lists list named lists c s v params
func (o *NamedListsListNamedListsCSVParams) WithTimeout(timeout time.Duration) *NamedListsListNamedListsCSVParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the named lists list named lists c s v params
func (o *NamedListsListNamedListsCSVParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the named lists list named lists c s v params
func (o *NamedListsListNamedListsCSVParams) WithContext(ctx context.Context) *NamedListsListNamedListsCSVParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the named lists list named lists c s v params
func (o *NamedListsListNamedListsCSVParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the named lists list named lists c s v params
func (o *NamedListsListNamedListsCSVParams) WithHTTPClient(client *http.Client) *NamedListsListNamedListsCSVParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the named lists list named lists c s v params
func (o *NamedListsListNamedListsCSVParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the named lists list named lists c s v params
func (o *NamedListsListNamedListsCSVParams) WithFilter(filter *string) *NamedListsListNamedListsCSVParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the named lists list named lists c s v params
func (o *NamedListsListNamedListsCSVParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithOrderBy adds the orderBy to the named lists list named lists c s v params
func (o *NamedListsListNamedListsCSVParams) WithOrderBy(orderBy *string) *NamedListsListNamedListsCSVParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the named lists list named lists c s v params
func (o *NamedListsListNamedListsCSVParams) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WithTfilter adds the tfilter to the named lists list named lists c s v params
func (o *NamedListsListNamedListsCSVParams) WithTfilter(tfilter *string) *NamedListsListNamedListsCSVParams {
	o.SetTfilter(tfilter)
	return o
}

// SetTfilter adds the tfilter to the named lists list named lists c s v params
func (o *NamedListsListNamedListsCSVParams) SetTfilter(tfilter *string) {
	o.Tfilter = tfilter
}

// WithTorderBy adds the torderBy to the named lists list named lists c s v params
func (o *NamedListsListNamedListsCSVParams) WithTorderBy(torderBy *string) *NamedListsListNamedListsCSVParams {
	o.SetTorderBy(torderBy)
	return o
}

// SetTorderBy adds the torderBy to the named lists list named lists c s v params
func (o *NamedListsListNamedListsCSVParams) SetTorderBy(torderBy *string) {
	o.TorderBy = torderBy
}

// WriteToRequest writes these params to a swagger request
func (o *NamedListsListNamedListsCSVParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param _filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("_filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// query param _order_by
		var qrOrderBy string

		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {

			if err := r.SetQueryParam("_order_by", qOrderBy); err != nil {
				return err
			}
		}
	}

	if o.Tfilter != nil {

		// query param _tfilter
		var qrTfilter string

		if o.Tfilter != nil {
			qrTfilter = *o.Tfilter
		}
		qTfilter := qrTfilter
		if qTfilter != "" {

			if err := r.SetQueryParam("_tfilter", qTfilter); err != nil {
				return err
			}
		}
	}

	if o.TorderBy != nil {

		// query param _torder_by
		var qrTorderBy string

		if o.TorderBy != nil {
			qrTorderBy = *o.TorderBy
		}
		qTorderBy := qrTorderBy
		if qTorderBy != "" {

			if err := r.SetQueryParam("_torder_by", qTorderBy); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
