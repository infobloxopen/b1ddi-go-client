// Code generated by go-swagger; DO NOT EDIT.

package named_lists

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/infobloxopen/b1ddi-go-client/models"
)

// NamedListsUpdateNamedListPartialReader is a Reader for the NamedListsUpdateNamedListPartial structure.
type NamedListsUpdateNamedListPartialReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NamedListsUpdateNamedListPartialReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewNamedListsUpdateNamedListPartialCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewNamedListsUpdateNamedListPartialBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewNamedListsUpdateNamedListPartialNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewNamedListsUpdateNamedListPartialMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewNamedListsUpdateNamedListPartialInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /named_lists/{id}] named_listsUpdateNamedListPartial", response, response.Code())
	}
}

// NewNamedListsUpdateNamedListPartialCreated creates a NamedListsUpdateNamedListPartialCreated with default headers values
func NewNamedListsUpdateNamedListPartialCreated() *NamedListsUpdateNamedListPartialCreated {
	return &NamedListsUpdateNamedListPartialCreated{}
}

/*
NamedListsUpdateNamedListPartialCreated describes a response with status code 201, with default header values.

PATCH operation response
*/
type NamedListsUpdateNamedListPartialCreated struct {
	Payload *models.AtcfwNamedListUpdateResponse
}

// IsSuccess returns true when this named lists update named list partial created response has a 2xx status code
func (o *NamedListsUpdateNamedListPartialCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this named lists update named list partial created response has a 3xx status code
func (o *NamedListsUpdateNamedListPartialCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this named lists update named list partial created response has a 4xx status code
func (o *NamedListsUpdateNamedListPartialCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this named lists update named list partial created response has a 5xx status code
func (o *NamedListsUpdateNamedListPartialCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this named lists update named list partial created response a status code equal to that given
func (o *NamedListsUpdateNamedListPartialCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the named lists update named list partial created response
func (o *NamedListsUpdateNamedListPartialCreated) Code() int {
	return 201
}

func (o *NamedListsUpdateNamedListPartialCreated) Error() string {
	return fmt.Sprintf("[PATCH /named_lists/{id}][%d] namedListsUpdateNamedListPartialCreated  %+v", 201, o.Payload)
}

func (o *NamedListsUpdateNamedListPartialCreated) String() string {
	return fmt.Sprintf("[PATCH /named_lists/{id}][%d] namedListsUpdateNamedListPartialCreated  %+v", 201, o.Payload)
}

func (o *NamedListsUpdateNamedListPartialCreated) GetPayload() *models.AtcfwNamedListUpdateResponse {
	return o.Payload
}

func (o *NamedListsUpdateNamedListPartialCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AtcfwNamedListUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNamedListsUpdateNamedListPartialBadRequest creates a NamedListsUpdateNamedListPartialBadRequest with default headers values
func NewNamedListsUpdateNamedListPartialBadRequest() *NamedListsUpdateNamedListPartialBadRequest {
	return &NamedListsUpdateNamedListPartialBadRequest{}
}

/*
	NamedListsUpdateNamedListPartialBadRequest describes a response with status code 400, with default header values.

- Either 'threat_level' or 'confidence_level' field is required
- Operation not supported for type 'custom_list'
*/
type NamedListsUpdateNamedListPartialBadRequest struct {
	Payload *NamedListsUpdateNamedListPartialBadRequestBody
}

// IsSuccess returns true when this named lists update named list partial bad request response has a 2xx status code
func (o *NamedListsUpdateNamedListPartialBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this named lists update named list partial bad request response has a 3xx status code
func (o *NamedListsUpdateNamedListPartialBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this named lists update named list partial bad request response has a 4xx status code
func (o *NamedListsUpdateNamedListPartialBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this named lists update named list partial bad request response has a 5xx status code
func (o *NamedListsUpdateNamedListPartialBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this named lists update named list partial bad request response a status code equal to that given
func (o *NamedListsUpdateNamedListPartialBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the named lists update named list partial bad request response
func (o *NamedListsUpdateNamedListPartialBadRequest) Code() int {
	return 400
}

func (o *NamedListsUpdateNamedListPartialBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /named_lists/{id}][%d] namedListsUpdateNamedListPartialBadRequest  %+v", 400, o.Payload)
}

func (o *NamedListsUpdateNamedListPartialBadRequest) String() string {
	return fmt.Sprintf("[PATCH /named_lists/{id}][%d] namedListsUpdateNamedListPartialBadRequest  %+v", 400, o.Payload)
}

func (o *NamedListsUpdateNamedListPartialBadRequest) GetPayload() *NamedListsUpdateNamedListPartialBadRequestBody {
	return o.Payload
}

func (o *NamedListsUpdateNamedListPartialBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NamedListsUpdateNamedListPartialBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNamedListsUpdateNamedListPartialNotFound creates a NamedListsUpdateNamedListPartialNotFound with default headers values
func NewNamedListsUpdateNamedListPartialNotFound() *NamedListsUpdateNamedListPartialNotFound {
	return &NamedListsUpdateNamedListPartialNotFound{}
}

/*
	NamedListsUpdateNamedListPartialNotFound describes a response with status code 404, with default header values.

- 'id' value must contain existing named list identifier
*/
type NamedListsUpdateNamedListPartialNotFound struct {
	Payload *NamedListsUpdateNamedListPartialNotFoundBody
}

// IsSuccess returns true when this named lists update named list partial not found response has a 2xx status code
func (o *NamedListsUpdateNamedListPartialNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this named lists update named list partial not found response has a 3xx status code
func (o *NamedListsUpdateNamedListPartialNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this named lists update named list partial not found response has a 4xx status code
func (o *NamedListsUpdateNamedListPartialNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this named lists update named list partial not found response has a 5xx status code
func (o *NamedListsUpdateNamedListPartialNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this named lists update named list partial not found response a status code equal to that given
func (o *NamedListsUpdateNamedListPartialNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the named lists update named list partial not found response
func (o *NamedListsUpdateNamedListPartialNotFound) Code() int {
	return 404
}

func (o *NamedListsUpdateNamedListPartialNotFound) Error() string {
	return fmt.Sprintf("[PATCH /named_lists/{id}][%d] namedListsUpdateNamedListPartialNotFound  %+v", 404, o.Payload)
}

func (o *NamedListsUpdateNamedListPartialNotFound) String() string {
	return fmt.Sprintf("[PATCH /named_lists/{id}][%d] namedListsUpdateNamedListPartialNotFound  %+v", 404, o.Payload)
}

func (o *NamedListsUpdateNamedListPartialNotFound) GetPayload() *NamedListsUpdateNamedListPartialNotFoundBody {
	return o.Payload
}

func (o *NamedListsUpdateNamedListPartialNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NamedListsUpdateNamedListPartialNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNamedListsUpdateNamedListPartialMethodNotAllowed creates a NamedListsUpdateNamedListPartialMethodNotAllowed with default headers values
func NewNamedListsUpdateNamedListPartialMethodNotAllowed() *NamedListsUpdateNamedListPartialMethodNotAllowed {
	return &NamedListsUpdateNamedListPartialMethodNotAllowed{}
}

/*
	NamedListsUpdateNamedListPartialMethodNotAllowed describes a response with status code 405, with default header values.

- Only PATCH operation supported for the existing TI Lists
*/
type NamedListsUpdateNamedListPartialMethodNotAllowed struct {
	Payload *NamedListsUpdateNamedListPartialMethodNotAllowedBody
}

// IsSuccess returns true when this named lists update named list partial method not allowed response has a 2xx status code
func (o *NamedListsUpdateNamedListPartialMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this named lists update named list partial method not allowed response has a 3xx status code
func (o *NamedListsUpdateNamedListPartialMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this named lists update named list partial method not allowed response has a 4xx status code
func (o *NamedListsUpdateNamedListPartialMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this named lists update named list partial method not allowed response has a 5xx status code
func (o *NamedListsUpdateNamedListPartialMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this named lists update named list partial method not allowed response a status code equal to that given
func (o *NamedListsUpdateNamedListPartialMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the named lists update named list partial method not allowed response
func (o *NamedListsUpdateNamedListPartialMethodNotAllowed) Code() int {
	return 405
}

func (o *NamedListsUpdateNamedListPartialMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PATCH /named_lists/{id}][%d] namedListsUpdateNamedListPartialMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *NamedListsUpdateNamedListPartialMethodNotAllowed) String() string {
	return fmt.Sprintf("[PATCH /named_lists/{id}][%d] namedListsUpdateNamedListPartialMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *NamedListsUpdateNamedListPartialMethodNotAllowed) GetPayload() *NamedListsUpdateNamedListPartialMethodNotAllowedBody {
	return o.Payload
}

func (o *NamedListsUpdateNamedListPartialMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NamedListsUpdateNamedListPartialMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNamedListsUpdateNamedListPartialInternalServerError creates a NamedListsUpdateNamedListPartialInternalServerError with default headers values
func NewNamedListsUpdateNamedListPartialInternalServerError() *NamedListsUpdateNamedListPartialInternalServerError {
	return &NamedListsUpdateNamedListPartialInternalServerError{}
}

/*
	NamedListsUpdateNamedListPartialInternalServerError describes a response with status code 500, with default header values.

- Internal server error occurred
*/
type NamedListsUpdateNamedListPartialInternalServerError struct {
	Payload *NamedListsUpdateNamedListPartialInternalServerErrorBody
}

// IsSuccess returns true when this named lists update named list partial internal server error response has a 2xx status code
func (o *NamedListsUpdateNamedListPartialInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this named lists update named list partial internal server error response has a 3xx status code
func (o *NamedListsUpdateNamedListPartialInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this named lists update named list partial internal server error response has a 4xx status code
func (o *NamedListsUpdateNamedListPartialInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this named lists update named list partial internal server error response has a 5xx status code
func (o *NamedListsUpdateNamedListPartialInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this named lists update named list partial internal server error response a status code equal to that given
func (o *NamedListsUpdateNamedListPartialInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the named lists update named list partial internal server error response
func (o *NamedListsUpdateNamedListPartialInternalServerError) Code() int {
	return 500
}

func (o *NamedListsUpdateNamedListPartialInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /named_lists/{id}][%d] namedListsUpdateNamedListPartialInternalServerError  %+v", 500, o.Payload)
}

func (o *NamedListsUpdateNamedListPartialInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /named_lists/{id}][%d] namedListsUpdateNamedListPartialInternalServerError  %+v", 500, o.Payload)
}

func (o *NamedListsUpdateNamedListPartialInternalServerError) GetPayload() *NamedListsUpdateNamedListPartialInternalServerErrorBody {
	return o.Payload
}

func (o *NamedListsUpdateNamedListPartialInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NamedListsUpdateNamedListPartialInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
NamedListsUpdateNamedListPartialBadRequestBody named lists update named list partial bad request body
swagger:model NamedListsUpdateNamedListPartialBadRequestBody
*/
type NamedListsUpdateNamedListPartialBadRequestBody struct {

	// error
	Error *NamedListsUpdateNamedListPartialBadRequestBodyError `json:"error,omitempty"`
}

// Validate validates this named lists update named list partial bad request body
func (o *NamedListsUpdateNamedListPartialBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsUpdateNamedListPartialBadRequestBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsUpdateNamedListPartialBadRequest" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsUpdateNamedListPartialBadRequest" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this named lists update named list partial bad request body based on the context it is used
func (o *NamedListsUpdateNamedListPartialBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsUpdateNamedListPartialBadRequestBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsUpdateNamedListPartialBadRequest" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsUpdateNamedListPartialBadRequest" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsUpdateNamedListPartialBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsUpdateNamedListPartialBadRequestBody) UnmarshalBinary(b []byte) error {
	var res NamedListsUpdateNamedListPartialBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsUpdateNamedListPartialBadRequestBodyError named lists update named list partial bad request body error
swagger:model NamedListsUpdateNamedListPartialBadRequestBodyError
*/
type NamedListsUpdateNamedListPartialBadRequestBodyError struct {

	// code
	// Example: INVALID_ARGUMENT
	Code string `json:"code,omitempty"`

	// message
	// Example: Neither 'threat_level' nor 'confidence_level' exists in the request body
	Message string `json:"message,omitempty"`

	// status
	// Example: 400
	Status string `json:"status,omitempty"`
}

// Validate validates this named lists update named list partial bad request body error
func (o *NamedListsUpdateNamedListPartialBadRequestBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this named lists update named list partial bad request body error based on context it is used
func (o *NamedListsUpdateNamedListPartialBadRequestBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsUpdateNamedListPartialBadRequestBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsUpdateNamedListPartialBadRequestBodyError) UnmarshalBinary(b []byte) error {
	var res NamedListsUpdateNamedListPartialBadRequestBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsUpdateNamedListPartialInternalServerErrorBody named lists update named list partial internal server error body
swagger:model NamedListsUpdateNamedListPartialInternalServerErrorBody
*/
type NamedListsUpdateNamedListPartialInternalServerErrorBody struct {

	// error
	Error *NamedListsUpdateNamedListPartialInternalServerErrorBodyError `json:"error,omitempty"`
}

// Validate validates this named lists update named list partial internal server error body
func (o *NamedListsUpdateNamedListPartialInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsUpdateNamedListPartialInternalServerErrorBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsUpdateNamedListPartialInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsUpdateNamedListPartialInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this named lists update named list partial internal server error body based on the context it is used
func (o *NamedListsUpdateNamedListPartialInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsUpdateNamedListPartialInternalServerErrorBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsUpdateNamedListPartialInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsUpdateNamedListPartialInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsUpdateNamedListPartialInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsUpdateNamedListPartialInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res NamedListsUpdateNamedListPartialInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsUpdateNamedListPartialInternalServerErrorBodyError named lists update named list partial internal server error body error
swagger:model NamedListsUpdateNamedListPartialInternalServerErrorBodyError
*/
type NamedListsUpdateNamedListPartialInternalServerErrorBodyError struct {

	// code
	// Example: INTERNAL
	Code string `json:"code,omitempty"`

	// message
	// Example: Internal Server Error
	Message string `json:"message,omitempty"`

	// status
	// Example: 500
	Status string `json:"status,omitempty"`
}

// Validate validates this named lists update named list partial internal server error body error
func (o *NamedListsUpdateNamedListPartialInternalServerErrorBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this named lists update named list partial internal server error body error based on context it is used
func (o *NamedListsUpdateNamedListPartialInternalServerErrorBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsUpdateNamedListPartialInternalServerErrorBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsUpdateNamedListPartialInternalServerErrorBodyError) UnmarshalBinary(b []byte) error {
	var res NamedListsUpdateNamedListPartialInternalServerErrorBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsUpdateNamedListPartialMethodNotAllowedBody named lists update named list partial method not allowed body
swagger:model NamedListsUpdateNamedListPartialMethodNotAllowedBody
*/
type NamedListsUpdateNamedListPartialMethodNotAllowedBody struct {

	// error
	Error *NamedListsUpdateNamedListPartialMethodNotAllowedBodyError `json:"error,omitempty"`
}

// Validate validates this named lists update named list partial method not allowed body
func (o *NamedListsUpdateNamedListPartialMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsUpdateNamedListPartialMethodNotAllowedBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsUpdateNamedListPartialMethodNotAllowed" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsUpdateNamedListPartialMethodNotAllowed" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this named lists update named list partial method not allowed body based on the context it is used
func (o *NamedListsUpdateNamedListPartialMethodNotAllowedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsUpdateNamedListPartialMethodNotAllowedBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsUpdateNamedListPartialMethodNotAllowed" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsUpdateNamedListPartialMethodNotAllowed" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsUpdateNamedListPartialMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsUpdateNamedListPartialMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res NamedListsUpdateNamedListPartialMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsUpdateNamedListPartialMethodNotAllowedBodyError named lists update named list partial method not allowed body error
swagger:model NamedListsUpdateNamedListPartialMethodNotAllowedBodyError
*/
type NamedListsUpdateNamedListPartialMethodNotAllowedBodyError struct {

	// code
	// Example: NOT_ALLOWED
	Code string `json:"code,omitempty"`

	// message
	// Example: Method not allowed
	Message string `json:"message,omitempty"`

	// status
	// Example: 405
	Status string `json:"status,omitempty"`
}

// Validate validates this named lists update named list partial method not allowed body error
func (o *NamedListsUpdateNamedListPartialMethodNotAllowedBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this named lists update named list partial method not allowed body error based on context it is used
func (o *NamedListsUpdateNamedListPartialMethodNotAllowedBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsUpdateNamedListPartialMethodNotAllowedBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsUpdateNamedListPartialMethodNotAllowedBodyError) UnmarshalBinary(b []byte) error {
	var res NamedListsUpdateNamedListPartialMethodNotAllowedBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsUpdateNamedListPartialNotFoundBody named lists update named list partial not found body
swagger:model NamedListsUpdateNamedListPartialNotFoundBody
*/
type NamedListsUpdateNamedListPartialNotFoundBody struct {

	// error
	Error *NamedListsUpdateNamedListPartialNotFoundBodyError `json:"error,omitempty"`
}

// Validate validates this named lists update named list partial not found body
func (o *NamedListsUpdateNamedListPartialNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsUpdateNamedListPartialNotFoundBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsUpdateNamedListPartialNotFound" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsUpdateNamedListPartialNotFound" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this named lists update named list partial not found body based on the context it is used
func (o *NamedListsUpdateNamedListPartialNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsUpdateNamedListPartialNotFoundBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsUpdateNamedListPartialNotFound" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsUpdateNamedListPartialNotFound" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsUpdateNamedListPartialNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsUpdateNamedListPartialNotFoundBody) UnmarshalBinary(b []byte) error {
	var res NamedListsUpdateNamedListPartialNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsUpdateNamedListPartialNotFoundBodyError named lists update named list partial not found body error
swagger:model NamedListsUpdateNamedListPartialNotFoundBodyError
*/
type NamedListsUpdateNamedListPartialNotFoundBodyError struct {

	// code
	// Example: NOT_FOUND
	Code string `json:"code,omitempty"`

	// message
	// Example: Given Named List does not exist
	Message string `json:"message,omitempty"`

	// status
	// Example: 404
	Status string `json:"status,omitempty"`
}

// Validate validates this named lists update named list partial not found body error
func (o *NamedListsUpdateNamedListPartialNotFoundBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this named lists update named list partial not found body error based on context it is used
func (o *NamedListsUpdateNamedListPartialNotFoundBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsUpdateNamedListPartialNotFoundBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsUpdateNamedListPartialNotFoundBodyError) UnmarshalBinary(b []byte) error {
	var res NamedListsUpdateNamedListPartialNotFoundBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
