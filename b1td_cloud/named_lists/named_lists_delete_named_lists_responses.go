// Code generated by go-swagger; DO NOT EDIT.

package named_lists

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NamedListsDeleteNamedListsReader is a Reader for the NamedListsDeleteNamedLists structure.
type NamedListsDeleteNamedListsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NamedListsDeleteNamedListsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewNamedListsDeleteNamedListsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewNamedListsDeleteNamedListsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewNamedListsDeleteNamedListsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewNamedListsDeleteNamedListsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /named_lists] named_listsDeleteNamedLists", response, response.Code())
	}
}

// NewNamedListsDeleteNamedListsNoContent creates a NamedListsDeleteNamedListsNoContent with default headers values
func NewNamedListsDeleteNamedListsNoContent() *NamedListsDeleteNamedListsNoContent {
	return &NamedListsDeleteNamedListsNoContent{}
}

/*
NamedListsDeleteNamedListsNoContent describes a response with status code 204, with default header values.

No Content
*/
type NamedListsDeleteNamedListsNoContent struct {
}

// IsSuccess returns true when this named lists delete named lists no content response has a 2xx status code
func (o *NamedListsDeleteNamedListsNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this named lists delete named lists no content response has a 3xx status code
func (o *NamedListsDeleteNamedListsNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this named lists delete named lists no content response has a 4xx status code
func (o *NamedListsDeleteNamedListsNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this named lists delete named lists no content response has a 5xx status code
func (o *NamedListsDeleteNamedListsNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this named lists delete named lists no content response a status code equal to that given
func (o *NamedListsDeleteNamedListsNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the named lists delete named lists no content response
func (o *NamedListsDeleteNamedListsNoContent) Code() int {
	return 204
}

func (o *NamedListsDeleteNamedListsNoContent) Error() string {
	return fmt.Sprintf("[DELETE /named_lists][%d] namedListsDeleteNamedListsNoContent ", 204)
}

func (o *NamedListsDeleteNamedListsNoContent) String() string {
	return fmt.Sprintf("[DELETE /named_lists][%d] namedListsDeleteNamedListsNoContent ", 204)
}

func (o *NamedListsDeleteNamedListsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewNamedListsDeleteNamedListsBadRequest creates a NamedListsDeleteNamedListsBadRequest with default headers values
func NewNamedListsDeleteNamedListsBadRequest() *NamedListsDeleteNamedListsBadRequest {
	return &NamedListsDeleteNamedListsBadRequest{}
}

/*
	NamedListsDeleteNamedListsBadRequest describes a response with status code 400, with default header values.

- 'ids' value must be non-empty
- 'ids' value must contain unique elements
- 'ids' value must contain values that are greater than or equal to zero
- named lists assigned to a security policy cannot be deleted
- named lists of type 'dnsm', 'threat_insight', 'fast_flux', and 'dga' cannot be removed
- named lists assigned to a bypass code cannot be deleted
*/
type NamedListsDeleteNamedListsBadRequest struct {
	Payload *NamedListsDeleteNamedListsBadRequestBody
}

// IsSuccess returns true when this named lists delete named lists bad request response has a 2xx status code
func (o *NamedListsDeleteNamedListsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this named lists delete named lists bad request response has a 3xx status code
func (o *NamedListsDeleteNamedListsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this named lists delete named lists bad request response has a 4xx status code
func (o *NamedListsDeleteNamedListsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this named lists delete named lists bad request response has a 5xx status code
func (o *NamedListsDeleteNamedListsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this named lists delete named lists bad request response a status code equal to that given
func (o *NamedListsDeleteNamedListsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the named lists delete named lists bad request response
func (o *NamedListsDeleteNamedListsBadRequest) Code() int {
	return 400
}

func (o *NamedListsDeleteNamedListsBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /named_lists][%d] namedListsDeleteNamedListsBadRequest  %+v", 400, o.Payload)
}

func (o *NamedListsDeleteNamedListsBadRequest) String() string {
	return fmt.Sprintf("[DELETE /named_lists][%d] namedListsDeleteNamedListsBadRequest  %+v", 400, o.Payload)
}

func (o *NamedListsDeleteNamedListsBadRequest) GetPayload() *NamedListsDeleteNamedListsBadRequestBody {
	return o.Payload
}

func (o *NamedListsDeleteNamedListsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NamedListsDeleteNamedListsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNamedListsDeleteNamedListsNotFound creates a NamedListsDeleteNamedListsNotFound with default headers values
func NewNamedListsDeleteNamedListsNotFound() *NamedListsDeleteNamedListsNotFound {
	return &NamedListsDeleteNamedListsNotFound{}
}

/*
	NamedListsDeleteNamedListsNotFound describes a response with status code 404, with default header values.

- 'ids' value must contain existing named list identifiers
*/
type NamedListsDeleteNamedListsNotFound struct {
	Payload *NamedListsDeleteNamedListsNotFoundBody
}

// IsSuccess returns true when this named lists delete named lists not found response has a 2xx status code
func (o *NamedListsDeleteNamedListsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this named lists delete named lists not found response has a 3xx status code
func (o *NamedListsDeleteNamedListsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this named lists delete named lists not found response has a 4xx status code
func (o *NamedListsDeleteNamedListsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this named lists delete named lists not found response has a 5xx status code
func (o *NamedListsDeleteNamedListsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this named lists delete named lists not found response a status code equal to that given
func (o *NamedListsDeleteNamedListsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the named lists delete named lists not found response
func (o *NamedListsDeleteNamedListsNotFound) Code() int {
	return 404
}

func (o *NamedListsDeleteNamedListsNotFound) Error() string {
	return fmt.Sprintf("[DELETE /named_lists][%d] namedListsDeleteNamedListsNotFound  %+v", 404, o.Payload)
}

func (o *NamedListsDeleteNamedListsNotFound) String() string {
	return fmt.Sprintf("[DELETE /named_lists][%d] namedListsDeleteNamedListsNotFound  %+v", 404, o.Payload)
}

func (o *NamedListsDeleteNamedListsNotFound) GetPayload() *NamedListsDeleteNamedListsNotFoundBody {
	return o.Payload
}

func (o *NamedListsDeleteNamedListsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NamedListsDeleteNamedListsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNamedListsDeleteNamedListsInternalServerError creates a NamedListsDeleteNamedListsInternalServerError with default headers values
func NewNamedListsDeleteNamedListsInternalServerError() *NamedListsDeleteNamedListsInternalServerError {
	return &NamedListsDeleteNamedListsInternalServerError{}
}

/*
	NamedListsDeleteNamedListsInternalServerError describes a response with status code 500, with default header values.

- Internal server error occurred
*/
type NamedListsDeleteNamedListsInternalServerError struct {
	Payload *NamedListsDeleteNamedListsInternalServerErrorBody
}

// IsSuccess returns true when this named lists delete named lists internal server error response has a 2xx status code
func (o *NamedListsDeleteNamedListsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this named lists delete named lists internal server error response has a 3xx status code
func (o *NamedListsDeleteNamedListsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this named lists delete named lists internal server error response has a 4xx status code
func (o *NamedListsDeleteNamedListsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this named lists delete named lists internal server error response has a 5xx status code
func (o *NamedListsDeleteNamedListsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this named lists delete named lists internal server error response a status code equal to that given
func (o *NamedListsDeleteNamedListsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the named lists delete named lists internal server error response
func (o *NamedListsDeleteNamedListsInternalServerError) Code() int {
	return 500
}

func (o *NamedListsDeleteNamedListsInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /named_lists][%d] namedListsDeleteNamedListsInternalServerError  %+v", 500, o.Payload)
}

func (o *NamedListsDeleteNamedListsInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /named_lists][%d] namedListsDeleteNamedListsInternalServerError  %+v", 500, o.Payload)
}

func (o *NamedListsDeleteNamedListsInternalServerError) GetPayload() *NamedListsDeleteNamedListsInternalServerErrorBody {
	return o.Payload
}

func (o *NamedListsDeleteNamedListsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NamedListsDeleteNamedListsInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
NamedListsDeleteNamedListsBadRequestBody named lists delete named lists bad request body
swagger:model NamedListsDeleteNamedListsBadRequestBody
*/
type NamedListsDeleteNamedListsBadRequestBody struct {

	// error
	Error *NamedListsDeleteNamedListsBadRequestBodyError `json:"error,omitempty"`
}

// Validate validates this named lists delete named lists bad request body
func (o *NamedListsDeleteNamedListsBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsDeleteNamedListsBadRequestBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsDeleteNamedListsBadRequest" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsDeleteNamedListsBadRequest" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this named lists delete named lists bad request body based on the context it is used
func (o *NamedListsDeleteNamedListsBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsDeleteNamedListsBadRequestBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsDeleteNamedListsBadRequest" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsDeleteNamedListsBadRequest" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsDeleteNamedListsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsDeleteNamedListsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res NamedListsDeleteNamedListsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsDeleteNamedListsBadRequestBodyError named lists delete named lists bad request body error
swagger:model NamedListsDeleteNamedListsBadRequestBodyError
*/
type NamedListsDeleteNamedListsBadRequestBodyError struct {

	// code
	// Example: INVALID_ARGUMENT
	Code string `json:"code,omitempty"`

	// message
	// Example: Named List ids can't be empty
	Message string `json:"message,omitempty"`

	// status
	// Example: 400
	Status string `json:"status,omitempty"`
}

// Validate validates this named lists delete named lists bad request body error
func (o *NamedListsDeleteNamedListsBadRequestBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this named lists delete named lists bad request body error based on context it is used
func (o *NamedListsDeleteNamedListsBadRequestBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsDeleteNamedListsBadRequestBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsDeleteNamedListsBadRequestBodyError) UnmarshalBinary(b []byte) error {
	var res NamedListsDeleteNamedListsBadRequestBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsDeleteNamedListsInternalServerErrorBody named lists delete named lists internal server error body
swagger:model NamedListsDeleteNamedListsInternalServerErrorBody
*/
type NamedListsDeleteNamedListsInternalServerErrorBody struct {

	// error
	Error *NamedListsDeleteNamedListsInternalServerErrorBodyError `json:"error,omitempty"`
}

// Validate validates this named lists delete named lists internal server error body
func (o *NamedListsDeleteNamedListsInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsDeleteNamedListsInternalServerErrorBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsDeleteNamedListsInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsDeleteNamedListsInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this named lists delete named lists internal server error body based on the context it is used
func (o *NamedListsDeleteNamedListsInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsDeleteNamedListsInternalServerErrorBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsDeleteNamedListsInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsDeleteNamedListsInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsDeleteNamedListsInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsDeleteNamedListsInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res NamedListsDeleteNamedListsInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsDeleteNamedListsInternalServerErrorBodyError named lists delete named lists internal server error body error
swagger:model NamedListsDeleteNamedListsInternalServerErrorBodyError
*/
type NamedListsDeleteNamedListsInternalServerErrorBodyError struct {

	// code
	// Example: INTERNAL
	Code string `json:"code,omitempty"`

	// message
	// Example: Internal Server Error
	Message string `json:"message,omitempty"`

	// status
	// Example: 500
	Status string `json:"status,omitempty"`
}

// Validate validates this named lists delete named lists internal server error body error
func (o *NamedListsDeleteNamedListsInternalServerErrorBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this named lists delete named lists internal server error body error based on context it is used
func (o *NamedListsDeleteNamedListsInternalServerErrorBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsDeleteNamedListsInternalServerErrorBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsDeleteNamedListsInternalServerErrorBodyError) UnmarshalBinary(b []byte) error {
	var res NamedListsDeleteNamedListsInternalServerErrorBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsDeleteNamedListsNotFoundBody named lists delete named lists not found body
swagger:model NamedListsDeleteNamedListsNotFoundBody
*/
type NamedListsDeleteNamedListsNotFoundBody struct {

	// error
	Error *NamedListsDeleteNamedListsNotFoundBodyError `json:"error,omitempty"`
}

// Validate validates this named lists delete named lists not found body
func (o *NamedListsDeleteNamedListsNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsDeleteNamedListsNotFoundBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsDeleteNamedListsNotFound" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsDeleteNamedListsNotFound" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this named lists delete named lists not found body based on the context it is used
func (o *NamedListsDeleteNamedListsNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsDeleteNamedListsNotFoundBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsDeleteNamedListsNotFound" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsDeleteNamedListsNotFound" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsDeleteNamedListsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsDeleteNamedListsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res NamedListsDeleteNamedListsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsDeleteNamedListsNotFoundBodyError named lists delete named lists not found body error
swagger:model NamedListsDeleteNamedListsNotFoundBodyError
*/
type NamedListsDeleteNamedListsNotFoundBodyError struct {

	// code
	// Example: NOT_FOUND
	Code string `json:"code,omitempty"`

	// message
	// Example: Non-existent named list(s): \u003cid\u003e
	Message string `json:"message,omitempty"`

	// status
	// Example: 404
	Status string `json:"status,omitempty"`
}

// Validate validates this named lists delete named lists not found body error
func (o *NamedListsDeleteNamedListsNotFoundBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this named lists delete named lists not found body error based on context it is used
func (o *NamedListsDeleteNamedListsNotFoundBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsDeleteNamedListsNotFoundBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsDeleteNamedListsNotFoundBodyError) UnmarshalBinary(b []byte) error {
	var res NamedListsDeleteNamedListsNotFoundBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
