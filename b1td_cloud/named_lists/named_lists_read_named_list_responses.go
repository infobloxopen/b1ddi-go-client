// Code generated by go-swagger; DO NOT EDIT.

package named_lists

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/infobloxopen/b1ddi-go-client/models"
)

// NamedListsReadNamedListReader is a Reader for the NamedListsReadNamedList structure.
type NamedListsReadNamedListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NamedListsReadNamedListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewNamedListsReadNamedListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewNamedListsReadNamedListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewNamedListsReadNamedListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /named_lists/{id}] named_listsReadNamedList", response, response.Code())
	}
}

// NewNamedListsReadNamedListOK creates a NamedListsReadNamedListOK with default headers values
func NewNamedListsReadNamedListOK() *NamedListsReadNamedListOK {
	return &NamedListsReadNamedListOK{}
}

/*
NamedListsReadNamedListOK describes a response with status code 200, with default header values.

GET operation response
*/
type NamedListsReadNamedListOK struct {
	Payload *models.AtcfwNamedListReadResponse
}

// IsSuccess returns true when this named lists read named list o k response has a 2xx status code
func (o *NamedListsReadNamedListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this named lists read named list o k response has a 3xx status code
func (o *NamedListsReadNamedListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this named lists read named list o k response has a 4xx status code
func (o *NamedListsReadNamedListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this named lists read named list o k response has a 5xx status code
func (o *NamedListsReadNamedListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this named lists read named list o k response a status code equal to that given
func (o *NamedListsReadNamedListOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the named lists read named list o k response
func (o *NamedListsReadNamedListOK) Code() int {
	return 200
}

func (o *NamedListsReadNamedListOK) Error() string {
	return fmt.Sprintf("[GET /named_lists/{id}][%d] namedListsReadNamedListOK  %+v", 200, o.Payload)
}

func (o *NamedListsReadNamedListOK) String() string {
	return fmt.Sprintf("[GET /named_lists/{id}][%d] namedListsReadNamedListOK  %+v", 200, o.Payload)
}

func (o *NamedListsReadNamedListOK) GetPayload() *models.AtcfwNamedListReadResponse {
	return o.Payload
}

func (o *NamedListsReadNamedListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AtcfwNamedListReadResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNamedListsReadNamedListNotFound creates a NamedListsReadNamedListNotFound with default headers values
func NewNamedListsReadNamedListNotFound() *NamedListsReadNamedListNotFound {
	return &NamedListsReadNamedListNotFound{}
}

/*
	NamedListsReadNamedListNotFound describes a response with status code 404, with default header values.

- 'id' value must contain existing named list identifier
*/
type NamedListsReadNamedListNotFound struct {
	Payload *NamedListsReadNamedListNotFoundBody
}

// IsSuccess returns true when this named lists read named list not found response has a 2xx status code
func (o *NamedListsReadNamedListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this named lists read named list not found response has a 3xx status code
func (o *NamedListsReadNamedListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this named lists read named list not found response has a 4xx status code
func (o *NamedListsReadNamedListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this named lists read named list not found response has a 5xx status code
func (o *NamedListsReadNamedListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this named lists read named list not found response a status code equal to that given
func (o *NamedListsReadNamedListNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the named lists read named list not found response
func (o *NamedListsReadNamedListNotFound) Code() int {
	return 404
}

func (o *NamedListsReadNamedListNotFound) Error() string {
	return fmt.Sprintf("[GET /named_lists/{id}][%d] namedListsReadNamedListNotFound  %+v", 404, o.Payload)
}

func (o *NamedListsReadNamedListNotFound) String() string {
	return fmt.Sprintf("[GET /named_lists/{id}][%d] namedListsReadNamedListNotFound  %+v", 404, o.Payload)
}

func (o *NamedListsReadNamedListNotFound) GetPayload() *NamedListsReadNamedListNotFoundBody {
	return o.Payload
}

func (o *NamedListsReadNamedListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NamedListsReadNamedListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNamedListsReadNamedListInternalServerError creates a NamedListsReadNamedListInternalServerError with default headers values
func NewNamedListsReadNamedListInternalServerError() *NamedListsReadNamedListInternalServerError {
	return &NamedListsReadNamedListInternalServerError{}
}

/*
	NamedListsReadNamedListInternalServerError describes a response with status code 500, with default header values.

- Internal server error occurred
*/
type NamedListsReadNamedListInternalServerError struct {
	Payload *NamedListsReadNamedListInternalServerErrorBody
}

// IsSuccess returns true when this named lists read named list internal server error response has a 2xx status code
func (o *NamedListsReadNamedListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this named lists read named list internal server error response has a 3xx status code
func (o *NamedListsReadNamedListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this named lists read named list internal server error response has a 4xx status code
func (o *NamedListsReadNamedListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this named lists read named list internal server error response has a 5xx status code
func (o *NamedListsReadNamedListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this named lists read named list internal server error response a status code equal to that given
func (o *NamedListsReadNamedListInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the named lists read named list internal server error response
func (o *NamedListsReadNamedListInternalServerError) Code() int {
	return 500
}

func (o *NamedListsReadNamedListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /named_lists/{id}][%d] namedListsReadNamedListInternalServerError  %+v", 500, o.Payload)
}

func (o *NamedListsReadNamedListInternalServerError) String() string {
	return fmt.Sprintf("[GET /named_lists/{id}][%d] namedListsReadNamedListInternalServerError  %+v", 500, o.Payload)
}

func (o *NamedListsReadNamedListInternalServerError) GetPayload() *NamedListsReadNamedListInternalServerErrorBody {
	return o.Payload
}

func (o *NamedListsReadNamedListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NamedListsReadNamedListInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
NamedListsReadNamedListInternalServerErrorBody named lists read named list internal server error body
swagger:model NamedListsReadNamedListInternalServerErrorBody
*/
type NamedListsReadNamedListInternalServerErrorBody struct {

	// error
	Error *NamedListsReadNamedListInternalServerErrorBodyError `json:"error,omitempty"`
}

// Validate validates this named lists read named list internal server error body
func (o *NamedListsReadNamedListInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsReadNamedListInternalServerErrorBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsReadNamedListInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsReadNamedListInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this named lists read named list internal server error body based on the context it is used
func (o *NamedListsReadNamedListInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsReadNamedListInternalServerErrorBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsReadNamedListInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsReadNamedListInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsReadNamedListInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsReadNamedListInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res NamedListsReadNamedListInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsReadNamedListInternalServerErrorBodyError named lists read named list internal server error body error
swagger:model NamedListsReadNamedListInternalServerErrorBodyError
*/
type NamedListsReadNamedListInternalServerErrorBodyError struct {

	// code
	// Example: INTERNAL
	Code string `json:"code,omitempty"`

	// message
	// Example: Internal Server Error
	Message string `json:"message,omitempty"`

	// status
	// Example: 500
	Status string `json:"status,omitempty"`
}

// Validate validates this named lists read named list internal server error body error
func (o *NamedListsReadNamedListInternalServerErrorBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this named lists read named list internal server error body error based on context it is used
func (o *NamedListsReadNamedListInternalServerErrorBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsReadNamedListInternalServerErrorBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsReadNamedListInternalServerErrorBodyError) UnmarshalBinary(b []byte) error {
	var res NamedListsReadNamedListInternalServerErrorBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsReadNamedListNotFoundBody named lists read named list not found body
swagger:model NamedListsReadNamedListNotFoundBody
*/
type NamedListsReadNamedListNotFoundBody struct {

	// error
	Error *NamedListsReadNamedListNotFoundBodyError `json:"error,omitempty"`
}

// Validate validates this named lists read named list not found body
func (o *NamedListsReadNamedListNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsReadNamedListNotFoundBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsReadNamedListNotFound" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsReadNamedListNotFound" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this named lists read named list not found body based on the context it is used
func (o *NamedListsReadNamedListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsReadNamedListNotFoundBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsReadNamedListNotFound" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsReadNamedListNotFound" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsReadNamedListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsReadNamedListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res NamedListsReadNamedListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsReadNamedListNotFoundBodyError named lists read named list not found body error
swagger:model NamedListsReadNamedListNotFoundBodyError
*/
type NamedListsReadNamedListNotFoundBodyError struct {

	// code
	// Example: NOT_FOUND
	Code string `json:"code,omitempty"`

	// message
	// Example: Named List does not exist
	Message string `json:"message,omitempty"`

	// status
	// Example: 404
	Status string `json:"status,omitempty"`
}

// Validate validates this named lists read named list not found body error
func (o *NamedListsReadNamedListNotFoundBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this named lists read named list not found body error based on context it is used
func (o *NamedListsReadNamedListNotFoundBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsReadNamedListNotFoundBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsReadNamedListNotFoundBodyError) UnmarshalBinary(b []byte) error {
	var res NamedListsReadNamedListNotFoundBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
