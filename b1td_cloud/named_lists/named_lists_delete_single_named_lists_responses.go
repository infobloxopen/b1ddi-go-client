// Code generated by go-swagger; DO NOT EDIT.

package named_lists

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NamedListsDeleteSingleNamedListsReader is a Reader for the NamedListsDeleteSingleNamedLists structure.
type NamedListsDeleteSingleNamedListsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NamedListsDeleteSingleNamedListsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewNamedListsDeleteSingleNamedListsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewNamedListsDeleteSingleNamedListsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewNamedListsDeleteSingleNamedListsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewNamedListsDeleteSingleNamedListsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /named_lists/{id}] named_listsDeleteSingleNamedLists", response, response.Code())
	}
}

// NewNamedListsDeleteSingleNamedListsNoContent creates a NamedListsDeleteSingleNamedListsNoContent with default headers values
func NewNamedListsDeleteSingleNamedListsNoContent() *NamedListsDeleteSingleNamedListsNoContent {
	return &NamedListsDeleteSingleNamedListsNoContent{}
}

/*
NamedListsDeleteSingleNamedListsNoContent describes a response with status code 204, with default header values.

No Content
*/
type NamedListsDeleteSingleNamedListsNoContent struct {
}

// IsSuccess returns true when this named lists delete single named lists no content response has a 2xx status code
func (o *NamedListsDeleteSingleNamedListsNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this named lists delete single named lists no content response has a 3xx status code
func (o *NamedListsDeleteSingleNamedListsNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this named lists delete single named lists no content response has a 4xx status code
func (o *NamedListsDeleteSingleNamedListsNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this named lists delete single named lists no content response has a 5xx status code
func (o *NamedListsDeleteSingleNamedListsNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this named lists delete single named lists no content response a status code equal to that given
func (o *NamedListsDeleteSingleNamedListsNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the named lists delete single named lists no content response
func (o *NamedListsDeleteSingleNamedListsNoContent) Code() int {
	return 204
}

func (o *NamedListsDeleteSingleNamedListsNoContent) Error() string {
	return fmt.Sprintf("[DELETE /named_lists/{id}][%d] namedListsDeleteSingleNamedListsNoContent ", 204)
}

func (o *NamedListsDeleteSingleNamedListsNoContent) String() string {
	return fmt.Sprintf("[DELETE /named_lists/{id}][%d] namedListsDeleteSingleNamedListsNoContent ", 204)
}

func (o *NamedListsDeleteSingleNamedListsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewNamedListsDeleteSingleNamedListsBadRequest creates a NamedListsDeleteSingleNamedListsBadRequest with default headers values
func NewNamedListsDeleteSingleNamedListsBadRequest() *NamedListsDeleteSingleNamedListsBadRequest {
	return &NamedListsDeleteSingleNamedListsBadRequest{}
}

/*
	NamedListsDeleteSingleNamedListsBadRequest describes a response with status code 400, with default header values.

- 'id' value must contain values that are greater than or equal to zero
- named lists assigned to a security policy cannot be deleted
- named lists assigned to a bypass code cannot be deleted
- named lists of type 'dnsm', 'threat_insight', 'fast_flux', and 'dga' cannot be removed
*/
type NamedListsDeleteSingleNamedListsBadRequest struct {
	Payload *NamedListsDeleteSingleNamedListsBadRequestBody
}

// IsSuccess returns true when this named lists delete single named lists bad request response has a 2xx status code
func (o *NamedListsDeleteSingleNamedListsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this named lists delete single named lists bad request response has a 3xx status code
func (o *NamedListsDeleteSingleNamedListsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this named lists delete single named lists bad request response has a 4xx status code
func (o *NamedListsDeleteSingleNamedListsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this named lists delete single named lists bad request response has a 5xx status code
func (o *NamedListsDeleteSingleNamedListsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this named lists delete single named lists bad request response a status code equal to that given
func (o *NamedListsDeleteSingleNamedListsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the named lists delete single named lists bad request response
func (o *NamedListsDeleteSingleNamedListsBadRequest) Code() int {
	return 400
}

func (o *NamedListsDeleteSingleNamedListsBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /named_lists/{id}][%d] namedListsDeleteSingleNamedListsBadRequest  %+v", 400, o.Payload)
}

func (o *NamedListsDeleteSingleNamedListsBadRequest) String() string {
	return fmt.Sprintf("[DELETE /named_lists/{id}][%d] namedListsDeleteSingleNamedListsBadRequest  %+v", 400, o.Payload)
}

func (o *NamedListsDeleteSingleNamedListsBadRequest) GetPayload() *NamedListsDeleteSingleNamedListsBadRequestBody {
	return o.Payload
}

func (o *NamedListsDeleteSingleNamedListsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NamedListsDeleteSingleNamedListsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNamedListsDeleteSingleNamedListsNotFound creates a NamedListsDeleteSingleNamedListsNotFound with default headers values
func NewNamedListsDeleteSingleNamedListsNotFound() *NamedListsDeleteSingleNamedListsNotFound {
	return &NamedListsDeleteSingleNamedListsNotFound{}
}

/*
	NamedListsDeleteSingleNamedListsNotFound describes a response with status code 404, with default header values.

- 'id' value must contain existing named list identifiers
*/
type NamedListsDeleteSingleNamedListsNotFound struct {
	Payload *NamedListsDeleteSingleNamedListsNotFoundBody
}

// IsSuccess returns true when this named lists delete single named lists not found response has a 2xx status code
func (o *NamedListsDeleteSingleNamedListsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this named lists delete single named lists not found response has a 3xx status code
func (o *NamedListsDeleteSingleNamedListsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this named lists delete single named lists not found response has a 4xx status code
func (o *NamedListsDeleteSingleNamedListsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this named lists delete single named lists not found response has a 5xx status code
func (o *NamedListsDeleteSingleNamedListsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this named lists delete single named lists not found response a status code equal to that given
func (o *NamedListsDeleteSingleNamedListsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the named lists delete single named lists not found response
func (o *NamedListsDeleteSingleNamedListsNotFound) Code() int {
	return 404
}

func (o *NamedListsDeleteSingleNamedListsNotFound) Error() string {
	return fmt.Sprintf("[DELETE /named_lists/{id}][%d] namedListsDeleteSingleNamedListsNotFound  %+v", 404, o.Payload)
}

func (o *NamedListsDeleteSingleNamedListsNotFound) String() string {
	return fmt.Sprintf("[DELETE /named_lists/{id}][%d] namedListsDeleteSingleNamedListsNotFound  %+v", 404, o.Payload)
}

func (o *NamedListsDeleteSingleNamedListsNotFound) GetPayload() *NamedListsDeleteSingleNamedListsNotFoundBody {
	return o.Payload
}

func (o *NamedListsDeleteSingleNamedListsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NamedListsDeleteSingleNamedListsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNamedListsDeleteSingleNamedListsInternalServerError creates a NamedListsDeleteSingleNamedListsInternalServerError with default headers values
func NewNamedListsDeleteSingleNamedListsInternalServerError() *NamedListsDeleteSingleNamedListsInternalServerError {
	return &NamedListsDeleteSingleNamedListsInternalServerError{}
}

/*
	NamedListsDeleteSingleNamedListsInternalServerError describes a response with status code 500, with default header values.

- Internal server error occurred
*/
type NamedListsDeleteSingleNamedListsInternalServerError struct {
	Payload *NamedListsDeleteSingleNamedListsInternalServerErrorBody
}

// IsSuccess returns true when this named lists delete single named lists internal server error response has a 2xx status code
func (o *NamedListsDeleteSingleNamedListsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this named lists delete single named lists internal server error response has a 3xx status code
func (o *NamedListsDeleteSingleNamedListsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this named lists delete single named lists internal server error response has a 4xx status code
func (o *NamedListsDeleteSingleNamedListsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this named lists delete single named lists internal server error response has a 5xx status code
func (o *NamedListsDeleteSingleNamedListsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this named lists delete single named lists internal server error response a status code equal to that given
func (o *NamedListsDeleteSingleNamedListsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the named lists delete single named lists internal server error response
func (o *NamedListsDeleteSingleNamedListsInternalServerError) Code() int {
	return 500
}

func (o *NamedListsDeleteSingleNamedListsInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /named_lists/{id}][%d] namedListsDeleteSingleNamedListsInternalServerError  %+v", 500, o.Payload)
}

func (o *NamedListsDeleteSingleNamedListsInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /named_lists/{id}][%d] namedListsDeleteSingleNamedListsInternalServerError  %+v", 500, o.Payload)
}

func (o *NamedListsDeleteSingleNamedListsInternalServerError) GetPayload() *NamedListsDeleteSingleNamedListsInternalServerErrorBody {
	return o.Payload
}

func (o *NamedListsDeleteSingleNamedListsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NamedListsDeleteSingleNamedListsInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
NamedListsDeleteSingleNamedListsBadRequestBody named lists delete single named lists bad request body
swagger:model NamedListsDeleteSingleNamedListsBadRequestBody
*/
type NamedListsDeleteSingleNamedListsBadRequestBody struct {

	// error
	Error *NamedListsDeleteSingleNamedListsBadRequestBodyError `json:"error,omitempty"`
}

// Validate validates this named lists delete single named lists bad request body
func (o *NamedListsDeleteSingleNamedListsBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsDeleteSingleNamedListsBadRequestBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsDeleteSingleNamedListsBadRequest" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsDeleteSingleNamedListsBadRequest" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this named lists delete single named lists bad request body based on the context it is used
func (o *NamedListsDeleteSingleNamedListsBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsDeleteSingleNamedListsBadRequestBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsDeleteSingleNamedListsBadRequest" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsDeleteSingleNamedListsBadRequest" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsDeleteSingleNamedListsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsDeleteSingleNamedListsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res NamedListsDeleteSingleNamedListsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsDeleteSingleNamedListsBadRequestBodyError named lists delete single named lists bad request body error
swagger:model NamedListsDeleteSingleNamedListsBadRequestBodyError
*/
type NamedListsDeleteSingleNamedListsBadRequestBodyError struct {

	// code
	// Example: INVALID_ARGUMENT
	Code string `json:"code,omitempty"`

	// message
	// Example: invalid 'id': value must be greater than or equal to 0
	Message string `json:"message,omitempty"`

	// status
	// Example: 400
	Status string `json:"status,omitempty"`
}

// Validate validates this named lists delete single named lists bad request body error
func (o *NamedListsDeleteSingleNamedListsBadRequestBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this named lists delete single named lists bad request body error based on context it is used
func (o *NamedListsDeleteSingleNamedListsBadRequestBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsDeleteSingleNamedListsBadRequestBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsDeleteSingleNamedListsBadRequestBodyError) UnmarshalBinary(b []byte) error {
	var res NamedListsDeleteSingleNamedListsBadRequestBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsDeleteSingleNamedListsInternalServerErrorBody named lists delete single named lists internal server error body
swagger:model NamedListsDeleteSingleNamedListsInternalServerErrorBody
*/
type NamedListsDeleteSingleNamedListsInternalServerErrorBody struct {

	// error
	Error *NamedListsDeleteSingleNamedListsInternalServerErrorBodyError `json:"error,omitempty"`
}

// Validate validates this named lists delete single named lists internal server error body
func (o *NamedListsDeleteSingleNamedListsInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsDeleteSingleNamedListsInternalServerErrorBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsDeleteSingleNamedListsInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsDeleteSingleNamedListsInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this named lists delete single named lists internal server error body based on the context it is used
func (o *NamedListsDeleteSingleNamedListsInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsDeleteSingleNamedListsInternalServerErrorBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsDeleteSingleNamedListsInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsDeleteSingleNamedListsInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsDeleteSingleNamedListsInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsDeleteSingleNamedListsInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res NamedListsDeleteSingleNamedListsInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsDeleteSingleNamedListsInternalServerErrorBodyError named lists delete single named lists internal server error body error
swagger:model NamedListsDeleteSingleNamedListsInternalServerErrorBodyError
*/
type NamedListsDeleteSingleNamedListsInternalServerErrorBodyError struct {

	// code
	// Example: INTERNAL
	Code string `json:"code,omitempty"`

	// message
	// Example: Internal Server Error
	Message string `json:"message,omitempty"`

	// status
	// Example: 500
	Status string `json:"status,omitempty"`
}

// Validate validates this named lists delete single named lists internal server error body error
func (o *NamedListsDeleteSingleNamedListsInternalServerErrorBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this named lists delete single named lists internal server error body error based on context it is used
func (o *NamedListsDeleteSingleNamedListsInternalServerErrorBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsDeleteSingleNamedListsInternalServerErrorBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsDeleteSingleNamedListsInternalServerErrorBodyError) UnmarshalBinary(b []byte) error {
	var res NamedListsDeleteSingleNamedListsInternalServerErrorBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsDeleteSingleNamedListsNotFoundBody named lists delete single named lists not found body
swagger:model NamedListsDeleteSingleNamedListsNotFoundBody
*/
type NamedListsDeleteSingleNamedListsNotFoundBody struct {

	// error
	Error *NamedListsDeleteSingleNamedListsNotFoundBodyError `json:"error,omitempty"`
}

// Validate validates this named lists delete single named lists not found body
func (o *NamedListsDeleteSingleNamedListsNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsDeleteSingleNamedListsNotFoundBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsDeleteSingleNamedListsNotFound" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsDeleteSingleNamedListsNotFound" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this named lists delete single named lists not found body based on the context it is used
func (o *NamedListsDeleteSingleNamedListsNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsDeleteSingleNamedListsNotFoundBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsDeleteSingleNamedListsNotFound" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsDeleteSingleNamedListsNotFound" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsDeleteSingleNamedListsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsDeleteSingleNamedListsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res NamedListsDeleteSingleNamedListsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsDeleteSingleNamedListsNotFoundBodyError named lists delete single named lists not found body error
swagger:model NamedListsDeleteSingleNamedListsNotFoundBodyError
*/
type NamedListsDeleteSingleNamedListsNotFoundBodyError struct {

	// code
	// Example: NOT_FOUND
	Code string `json:"code,omitempty"`

	// message
	// Example: Non-existent named list(s): 'id'
	Message string `json:"message,omitempty"`

	// status
	// Example: 404
	Status string `json:"status,omitempty"`
}

// Validate validates this named lists delete single named lists not found body error
func (o *NamedListsDeleteSingleNamedListsNotFoundBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this named lists delete single named lists not found body error based on context it is used
func (o *NamedListsDeleteSingleNamedListsNotFoundBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsDeleteSingleNamedListsNotFoundBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsDeleteSingleNamedListsNotFoundBodyError) UnmarshalBinary(b []byte) error {
	var res NamedListsDeleteSingleNamedListsNotFoundBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
