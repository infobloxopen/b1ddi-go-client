// Code generated by go-swagger; DO NOT EDIT.

package named_lists

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/infobloxopen/b1ddi-go-client/models"
)

// NamedListsCreateNamedListReader is a Reader for the NamedListsCreateNamedList structure.
type NamedListsCreateNamedListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NamedListsCreateNamedListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewNamedListsCreateNamedListCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewNamedListsCreateNamedListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewNamedListsCreateNamedListConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewNamedListsCreateNamedListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /named_lists] named_listsCreateNamedList", response, response.Code())
	}
}

// NewNamedListsCreateNamedListCreated creates a NamedListsCreateNamedListCreated with default headers values
func NewNamedListsCreateNamedListCreated() *NamedListsCreateNamedListCreated {
	return &NamedListsCreateNamedListCreated{}
}

/*
NamedListsCreateNamedListCreated describes a response with status code 201, with default header values.

POST operation response
*/
type NamedListsCreateNamedListCreated struct {
	Payload *models.AtcfwNamedListCreateResponse
}

// IsSuccess returns true when this named lists create named list created response has a 2xx status code
func (o *NamedListsCreateNamedListCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this named lists create named list created response has a 3xx status code
func (o *NamedListsCreateNamedListCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this named lists create named list created response has a 4xx status code
func (o *NamedListsCreateNamedListCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this named lists create named list created response has a 5xx status code
func (o *NamedListsCreateNamedListCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this named lists create named list created response a status code equal to that given
func (o *NamedListsCreateNamedListCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the named lists create named list created response
func (o *NamedListsCreateNamedListCreated) Code() int {
	return 201
}

func (o *NamedListsCreateNamedListCreated) Error() string {
	return fmt.Sprintf("[POST /named_lists][%d] namedListsCreateNamedListCreated  %+v", 201, o.Payload)
}

func (o *NamedListsCreateNamedListCreated) String() string {
	return fmt.Sprintf("[POST /named_lists][%d] namedListsCreateNamedListCreated  %+v", 201, o.Payload)
}

func (o *NamedListsCreateNamedListCreated) GetPayload() *models.AtcfwNamedListCreateResponse {
	return o.Payload
}

func (o *NamedListsCreateNamedListCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AtcfwNamedListCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNamedListsCreateNamedListBadRequest creates a NamedListsCreateNamedListBadRequest with default headers values
func NewNamedListsCreateNamedListBadRequest() *NamedListsCreateNamedListBadRequest {
	return &NamedListsCreateNamedListBadRequest{}
}

/*
	NamedListsCreateNamedListBadRequest describes a response with status code 400, with default header values.

- 'name' length cannot exceed 256 characters limit
- 'description' length cannot exceed 256 characters limit
- 'items' value must contain valid IPv4 or IPv6 addresses or domain names
- named list of type "dnsm", "threat_insight", "fast_flux", and "dga" cannot be created
- Either 'items' or 'items_described' field is required
- 'item' cannot be empty in field items_described
*/
type NamedListsCreateNamedListBadRequest struct {
	Payload *NamedListsCreateNamedListBadRequestBody
}

// IsSuccess returns true when this named lists create named list bad request response has a 2xx status code
func (o *NamedListsCreateNamedListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this named lists create named list bad request response has a 3xx status code
func (o *NamedListsCreateNamedListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this named lists create named list bad request response has a 4xx status code
func (o *NamedListsCreateNamedListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this named lists create named list bad request response has a 5xx status code
func (o *NamedListsCreateNamedListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this named lists create named list bad request response a status code equal to that given
func (o *NamedListsCreateNamedListBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the named lists create named list bad request response
func (o *NamedListsCreateNamedListBadRequest) Code() int {
	return 400
}

func (o *NamedListsCreateNamedListBadRequest) Error() string {
	return fmt.Sprintf("[POST /named_lists][%d] namedListsCreateNamedListBadRequest  %+v", 400, o.Payload)
}

func (o *NamedListsCreateNamedListBadRequest) String() string {
	return fmt.Sprintf("[POST /named_lists][%d] namedListsCreateNamedListBadRequest  %+v", 400, o.Payload)
}

func (o *NamedListsCreateNamedListBadRequest) GetPayload() *NamedListsCreateNamedListBadRequestBody {
	return o.Payload
}

func (o *NamedListsCreateNamedListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NamedListsCreateNamedListBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNamedListsCreateNamedListConflict creates a NamedListsCreateNamedListConflict with default headers values
func NewNamedListsCreateNamedListConflict() *NamedListsCreateNamedListConflict {
	return &NamedListsCreateNamedListConflict{}
}

/*
	NamedListsCreateNamedListConflict describes a response with status code 409, with default header values.

- 'name' value must be unique among named lists belonging to the same account
*/
type NamedListsCreateNamedListConflict struct {
	Payload *NamedListsCreateNamedListConflictBody
}

// IsSuccess returns true when this named lists create named list conflict response has a 2xx status code
func (o *NamedListsCreateNamedListConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this named lists create named list conflict response has a 3xx status code
func (o *NamedListsCreateNamedListConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this named lists create named list conflict response has a 4xx status code
func (o *NamedListsCreateNamedListConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this named lists create named list conflict response has a 5xx status code
func (o *NamedListsCreateNamedListConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this named lists create named list conflict response a status code equal to that given
func (o *NamedListsCreateNamedListConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the named lists create named list conflict response
func (o *NamedListsCreateNamedListConflict) Code() int {
	return 409
}

func (o *NamedListsCreateNamedListConflict) Error() string {
	return fmt.Sprintf("[POST /named_lists][%d] namedListsCreateNamedListConflict  %+v", 409, o.Payload)
}

func (o *NamedListsCreateNamedListConflict) String() string {
	return fmt.Sprintf("[POST /named_lists][%d] namedListsCreateNamedListConflict  %+v", 409, o.Payload)
}

func (o *NamedListsCreateNamedListConflict) GetPayload() *NamedListsCreateNamedListConflictBody {
	return o.Payload
}

func (o *NamedListsCreateNamedListConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NamedListsCreateNamedListConflictBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNamedListsCreateNamedListInternalServerError creates a NamedListsCreateNamedListInternalServerError with default headers values
func NewNamedListsCreateNamedListInternalServerError() *NamedListsCreateNamedListInternalServerError {
	return &NamedListsCreateNamedListInternalServerError{}
}

/*
	NamedListsCreateNamedListInternalServerError describes a response with status code 500, with default header values.

- Internal server error occurred
*/
type NamedListsCreateNamedListInternalServerError struct {
	Payload *NamedListsCreateNamedListInternalServerErrorBody
}

// IsSuccess returns true when this named lists create named list internal server error response has a 2xx status code
func (o *NamedListsCreateNamedListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this named lists create named list internal server error response has a 3xx status code
func (o *NamedListsCreateNamedListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this named lists create named list internal server error response has a 4xx status code
func (o *NamedListsCreateNamedListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this named lists create named list internal server error response has a 5xx status code
func (o *NamedListsCreateNamedListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this named lists create named list internal server error response a status code equal to that given
func (o *NamedListsCreateNamedListInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the named lists create named list internal server error response
func (o *NamedListsCreateNamedListInternalServerError) Code() int {
	return 500
}

func (o *NamedListsCreateNamedListInternalServerError) Error() string {
	return fmt.Sprintf("[POST /named_lists][%d] namedListsCreateNamedListInternalServerError  %+v", 500, o.Payload)
}

func (o *NamedListsCreateNamedListInternalServerError) String() string {
	return fmt.Sprintf("[POST /named_lists][%d] namedListsCreateNamedListInternalServerError  %+v", 500, o.Payload)
}

func (o *NamedListsCreateNamedListInternalServerError) GetPayload() *NamedListsCreateNamedListInternalServerErrorBody {
	return o.Payload
}

func (o *NamedListsCreateNamedListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NamedListsCreateNamedListInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
NamedListsCreateNamedListBadRequestBody named lists create named list bad request body
swagger:model NamedListsCreateNamedListBadRequestBody
*/
type NamedListsCreateNamedListBadRequestBody struct {

	// error
	Error *NamedListsCreateNamedListBadRequestBodyError `json:"error,omitempty"`
}

// Validate validates this named lists create named list bad request body
func (o *NamedListsCreateNamedListBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsCreateNamedListBadRequestBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsCreateNamedListBadRequest" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsCreateNamedListBadRequest" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this named lists create named list bad request body based on the context it is used
func (o *NamedListsCreateNamedListBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsCreateNamedListBadRequestBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsCreateNamedListBadRequest" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsCreateNamedListBadRequest" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsCreateNamedListBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsCreateNamedListBadRequestBody) UnmarshalBinary(b []byte) error {
	var res NamedListsCreateNamedListBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsCreateNamedListBadRequestBodyError named lists create named list bad request body error
swagger:model NamedListsCreateNamedListBadRequestBodyError
*/
type NamedListsCreateNamedListBadRequestBodyError struct {

	// code
	// Example: INVALID_ARGUMENT
	Code string `json:"code,omitempty"`

	// message
	// Example: 'name' must not be empty
	Message string `json:"message,omitempty"`

	// status
	// Example: 400
	Status string `json:"status,omitempty"`
}

// Validate validates this named lists create named list bad request body error
func (o *NamedListsCreateNamedListBadRequestBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this named lists create named list bad request body error based on context it is used
func (o *NamedListsCreateNamedListBadRequestBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsCreateNamedListBadRequestBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsCreateNamedListBadRequestBodyError) UnmarshalBinary(b []byte) error {
	var res NamedListsCreateNamedListBadRequestBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsCreateNamedListConflictBody named lists create named list conflict body
swagger:model NamedListsCreateNamedListConflictBody
*/
type NamedListsCreateNamedListConflictBody struct {

	// error
	Error *NamedListsCreateNamedListConflictBodyError `json:"error,omitempty"`
}

// Validate validates this named lists create named list conflict body
func (o *NamedListsCreateNamedListConflictBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsCreateNamedListConflictBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsCreateNamedListConflict" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsCreateNamedListConflict" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this named lists create named list conflict body based on the context it is used
func (o *NamedListsCreateNamedListConflictBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsCreateNamedListConflictBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsCreateNamedListConflict" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsCreateNamedListConflict" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsCreateNamedListConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsCreateNamedListConflictBody) UnmarshalBinary(b []byte) error {
	var res NamedListsCreateNamedListConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsCreateNamedListConflictBodyError named lists create named list conflict body error
swagger:model NamedListsCreateNamedListConflictBodyError
*/
type NamedListsCreateNamedListConflictBodyError struct {

	// code
	// Example: ALREADY_EXISTS
	Code string `json:"code,omitempty"`

	// message
	// Example: Cannot use duplicate name \"named_list_a\
	Message string `json:"message,omitempty"`

	// status
	// Example: 409
	Status string `json:"status,omitempty"`
}

// Validate validates this named lists create named list conflict body error
func (o *NamedListsCreateNamedListConflictBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this named lists create named list conflict body error based on context it is used
func (o *NamedListsCreateNamedListConflictBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsCreateNamedListConflictBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsCreateNamedListConflictBodyError) UnmarshalBinary(b []byte) error {
	var res NamedListsCreateNamedListConflictBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsCreateNamedListInternalServerErrorBody named lists create named list internal server error body
swagger:model NamedListsCreateNamedListInternalServerErrorBody
*/
type NamedListsCreateNamedListInternalServerErrorBody struct {

	// error
	Error *NamedListsCreateNamedListInternalServerErrorBodyError `json:"error,omitempty"`
}

// Validate validates this named lists create named list internal server error body
func (o *NamedListsCreateNamedListInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsCreateNamedListInternalServerErrorBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsCreateNamedListInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsCreateNamedListInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this named lists create named list internal server error body based on the context it is used
func (o *NamedListsCreateNamedListInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsCreateNamedListInternalServerErrorBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsCreateNamedListInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsCreateNamedListInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsCreateNamedListInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsCreateNamedListInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res NamedListsCreateNamedListInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsCreateNamedListInternalServerErrorBodyError named lists create named list internal server error body error
swagger:model NamedListsCreateNamedListInternalServerErrorBodyError
*/
type NamedListsCreateNamedListInternalServerErrorBodyError struct {

	// code
	// Example: INTERNAL
	Code string `json:"code,omitempty"`

	// message
	// Example: Internal Server Error
	Message string `json:"message,omitempty"`

	// status
	// Example: 500
	Status string `json:"status,omitempty"`
}

// Validate validates this named lists create named list internal server error body error
func (o *NamedListsCreateNamedListInternalServerErrorBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this named lists create named list internal server error body error based on context it is used
func (o *NamedListsCreateNamedListInternalServerErrorBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsCreateNamedListInternalServerErrorBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsCreateNamedListInternalServerErrorBodyError) UnmarshalBinary(b []byte) error {
	var res NamedListsCreateNamedListInternalServerErrorBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
