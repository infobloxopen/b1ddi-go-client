// Code generated by go-swagger; DO NOT EDIT.

package named_lists

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/infobloxopen/b1ddi-go-client/models"
)

// NamedListsUpdateNamedListReader is a Reader for the NamedListsUpdateNamedList structure.
type NamedListsUpdateNamedListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NamedListsUpdateNamedListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewNamedListsUpdateNamedListCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewNamedListsUpdateNamedListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewNamedListsUpdateNamedListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewNamedListsUpdateNamedListConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewNamedListsUpdateNamedListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /named_lists/{id}] named_listsUpdateNamedList", response, response.Code())
	}
}

// NewNamedListsUpdateNamedListCreated creates a NamedListsUpdateNamedListCreated with default headers values
func NewNamedListsUpdateNamedListCreated() *NamedListsUpdateNamedListCreated {
	return &NamedListsUpdateNamedListCreated{}
}

/*
NamedListsUpdateNamedListCreated describes a response with status code 201, with default header values.

PUT operation response
*/
type NamedListsUpdateNamedListCreated struct {
	Payload *models.AtcfwNamedListUpdateResponse
}

// IsSuccess returns true when this named lists update named list created response has a 2xx status code
func (o *NamedListsUpdateNamedListCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this named lists update named list created response has a 3xx status code
func (o *NamedListsUpdateNamedListCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this named lists update named list created response has a 4xx status code
func (o *NamedListsUpdateNamedListCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this named lists update named list created response has a 5xx status code
func (o *NamedListsUpdateNamedListCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this named lists update named list created response a status code equal to that given
func (o *NamedListsUpdateNamedListCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the named lists update named list created response
func (o *NamedListsUpdateNamedListCreated) Code() int {
	return 201
}

func (o *NamedListsUpdateNamedListCreated) Error() string {
	return fmt.Sprintf("[PUT /named_lists/{id}][%d] namedListsUpdateNamedListCreated  %+v", 201, o.Payload)
}

func (o *NamedListsUpdateNamedListCreated) String() string {
	return fmt.Sprintf("[PUT /named_lists/{id}][%d] namedListsUpdateNamedListCreated  %+v", 201, o.Payload)
}

func (o *NamedListsUpdateNamedListCreated) GetPayload() *models.AtcfwNamedListUpdateResponse {
	return o.Payload
}

func (o *NamedListsUpdateNamedListCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AtcfwNamedListUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNamedListsUpdateNamedListBadRequest creates a NamedListsUpdateNamedListBadRequest with default headers values
func NewNamedListsUpdateNamedListBadRequest() *NamedListsUpdateNamedListBadRequest {
	return &NamedListsUpdateNamedListBadRequest{}
}

/*
	NamedListsUpdateNamedListBadRequest describes a response with status code 400, with default header values.

- 'name' length cannot exceed 256 characters limit
- 'description' length cannot exceed 256 characters limit
- 'items' value must contain valid IPv4 addresses or domain names
- named list of type "dnsm", "threat_insight", "fast_flux", and "dga" cannot be created
- list type cannot be updated
- Either 'items' or 'items_described' field is required
- 'item' cannot be empty in field items_described
*/
type NamedListsUpdateNamedListBadRequest struct {
	Payload *NamedListsUpdateNamedListBadRequestBody
}

// IsSuccess returns true when this named lists update named list bad request response has a 2xx status code
func (o *NamedListsUpdateNamedListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this named lists update named list bad request response has a 3xx status code
func (o *NamedListsUpdateNamedListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this named lists update named list bad request response has a 4xx status code
func (o *NamedListsUpdateNamedListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this named lists update named list bad request response has a 5xx status code
func (o *NamedListsUpdateNamedListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this named lists update named list bad request response a status code equal to that given
func (o *NamedListsUpdateNamedListBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the named lists update named list bad request response
func (o *NamedListsUpdateNamedListBadRequest) Code() int {
	return 400
}

func (o *NamedListsUpdateNamedListBadRequest) Error() string {
	return fmt.Sprintf("[PUT /named_lists/{id}][%d] namedListsUpdateNamedListBadRequest  %+v", 400, o.Payload)
}

func (o *NamedListsUpdateNamedListBadRequest) String() string {
	return fmt.Sprintf("[PUT /named_lists/{id}][%d] namedListsUpdateNamedListBadRequest  %+v", 400, o.Payload)
}

func (o *NamedListsUpdateNamedListBadRequest) GetPayload() *NamedListsUpdateNamedListBadRequestBody {
	return o.Payload
}

func (o *NamedListsUpdateNamedListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NamedListsUpdateNamedListBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNamedListsUpdateNamedListNotFound creates a NamedListsUpdateNamedListNotFound with default headers values
func NewNamedListsUpdateNamedListNotFound() *NamedListsUpdateNamedListNotFound {
	return &NamedListsUpdateNamedListNotFound{}
}

/*
	NamedListsUpdateNamedListNotFound describes a response with status code 404, with default header values.

- 'id' value must contain existing named list identifier
*/
type NamedListsUpdateNamedListNotFound struct {
	Payload *NamedListsUpdateNamedListNotFoundBody
}

// IsSuccess returns true when this named lists update named list not found response has a 2xx status code
func (o *NamedListsUpdateNamedListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this named lists update named list not found response has a 3xx status code
func (o *NamedListsUpdateNamedListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this named lists update named list not found response has a 4xx status code
func (o *NamedListsUpdateNamedListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this named lists update named list not found response has a 5xx status code
func (o *NamedListsUpdateNamedListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this named lists update named list not found response a status code equal to that given
func (o *NamedListsUpdateNamedListNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the named lists update named list not found response
func (o *NamedListsUpdateNamedListNotFound) Code() int {
	return 404
}

func (o *NamedListsUpdateNamedListNotFound) Error() string {
	return fmt.Sprintf("[PUT /named_lists/{id}][%d] namedListsUpdateNamedListNotFound  %+v", 404, o.Payload)
}

func (o *NamedListsUpdateNamedListNotFound) String() string {
	return fmt.Sprintf("[PUT /named_lists/{id}][%d] namedListsUpdateNamedListNotFound  %+v", 404, o.Payload)
}

func (o *NamedListsUpdateNamedListNotFound) GetPayload() *NamedListsUpdateNamedListNotFoundBody {
	return o.Payload
}

func (o *NamedListsUpdateNamedListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NamedListsUpdateNamedListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNamedListsUpdateNamedListConflict creates a NamedListsUpdateNamedListConflict with default headers values
func NewNamedListsUpdateNamedListConflict() *NamedListsUpdateNamedListConflict {
	return &NamedListsUpdateNamedListConflict{}
}

/*
	NamedListsUpdateNamedListConflict describes a response with status code 409, with default header values.

- 'name' value must be unique among named lists belonging to the same account
*/
type NamedListsUpdateNamedListConflict struct {
	Payload *NamedListsUpdateNamedListConflictBody
}

// IsSuccess returns true when this named lists update named list conflict response has a 2xx status code
func (o *NamedListsUpdateNamedListConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this named lists update named list conflict response has a 3xx status code
func (o *NamedListsUpdateNamedListConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this named lists update named list conflict response has a 4xx status code
func (o *NamedListsUpdateNamedListConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this named lists update named list conflict response has a 5xx status code
func (o *NamedListsUpdateNamedListConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this named lists update named list conflict response a status code equal to that given
func (o *NamedListsUpdateNamedListConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the named lists update named list conflict response
func (o *NamedListsUpdateNamedListConflict) Code() int {
	return 409
}

func (o *NamedListsUpdateNamedListConflict) Error() string {
	return fmt.Sprintf("[PUT /named_lists/{id}][%d] namedListsUpdateNamedListConflict  %+v", 409, o.Payload)
}

func (o *NamedListsUpdateNamedListConflict) String() string {
	return fmt.Sprintf("[PUT /named_lists/{id}][%d] namedListsUpdateNamedListConflict  %+v", 409, o.Payload)
}

func (o *NamedListsUpdateNamedListConflict) GetPayload() *NamedListsUpdateNamedListConflictBody {
	return o.Payload
}

func (o *NamedListsUpdateNamedListConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NamedListsUpdateNamedListConflictBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNamedListsUpdateNamedListInternalServerError creates a NamedListsUpdateNamedListInternalServerError with default headers values
func NewNamedListsUpdateNamedListInternalServerError() *NamedListsUpdateNamedListInternalServerError {
	return &NamedListsUpdateNamedListInternalServerError{}
}

/*
	NamedListsUpdateNamedListInternalServerError describes a response with status code 500, with default header values.

- Internal server error occurred
*/
type NamedListsUpdateNamedListInternalServerError struct {
	Payload *NamedListsUpdateNamedListInternalServerErrorBody
}

// IsSuccess returns true when this named lists update named list internal server error response has a 2xx status code
func (o *NamedListsUpdateNamedListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this named lists update named list internal server error response has a 3xx status code
func (o *NamedListsUpdateNamedListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this named lists update named list internal server error response has a 4xx status code
func (o *NamedListsUpdateNamedListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this named lists update named list internal server error response has a 5xx status code
func (o *NamedListsUpdateNamedListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this named lists update named list internal server error response a status code equal to that given
func (o *NamedListsUpdateNamedListInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the named lists update named list internal server error response
func (o *NamedListsUpdateNamedListInternalServerError) Code() int {
	return 500
}

func (o *NamedListsUpdateNamedListInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /named_lists/{id}][%d] namedListsUpdateNamedListInternalServerError  %+v", 500, o.Payload)
}

func (o *NamedListsUpdateNamedListInternalServerError) String() string {
	return fmt.Sprintf("[PUT /named_lists/{id}][%d] namedListsUpdateNamedListInternalServerError  %+v", 500, o.Payload)
}

func (o *NamedListsUpdateNamedListInternalServerError) GetPayload() *NamedListsUpdateNamedListInternalServerErrorBody {
	return o.Payload
}

func (o *NamedListsUpdateNamedListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NamedListsUpdateNamedListInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
NamedListsUpdateNamedListBadRequestBody named lists update named list bad request body
swagger:model NamedListsUpdateNamedListBadRequestBody
*/
type NamedListsUpdateNamedListBadRequestBody struct {

	// error
	Error *NamedListsUpdateNamedListBadRequestBodyError `json:"error,omitempty"`
}

// Validate validates this named lists update named list bad request body
func (o *NamedListsUpdateNamedListBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsUpdateNamedListBadRequestBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsUpdateNamedListBadRequest" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsUpdateNamedListBadRequest" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this named lists update named list bad request body based on the context it is used
func (o *NamedListsUpdateNamedListBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsUpdateNamedListBadRequestBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsUpdateNamedListBadRequest" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsUpdateNamedListBadRequest" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsUpdateNamedListBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsUpdateNamedListBadRequestBody) UnmarshalBinary(b []byte) error {
	var res NamedListsUpdateNamedListBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsUpdateNamedListBadRequestBodyError named lists update named list bad request body error
swagger:model NamedListsUpdateNamedListBadRequestBodyError
*/
type NamedListsUpdateNamedListBadRequestBodyError struct {

	// code
	// Example: INVALID_ARGUMENT
	Code string `json:"code,omitempty"`

	// message
	// Example: 'name' must not be empty
	Message string `json:"message,omitempty"`

	// status
	// Example: 400
	Status string `json:"status,omitempty"`
}

// Validate validates this named lists update named list bad request body error
func (o *NamedListsUpdateNamedListBadRequestBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this named lists update named list bad request body error based on context it is used
func (o *NamedListsUpdateNamedListBadRequestBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsUpdateNamedListBadRequestBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsUpdateNamedListBadRequestBodyError) UnmarshalBinary(b []byte) error {
	var res NamedListsUpdateNamedListBadRequestBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsUpdateNamedListConflictBody named lists update named list conflict body
swagger:model NamedListsUpdateNamedListConflictBody
*/
type NamedListsUpdateNamedListConflictBody struct {

	// error
	Error *NamedListsUpdateNamedListConflictBodyError `json:"error,omitempty"`
}

// Validate validates this named lists update named list conflict body
func (o *NamedListsUpdateNamedListConflictBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsUpdateNamedListConflictBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsUpdateNamedListConflict" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsUpdateNamedListConflict" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this named lists update named list conflict body based on the context it is used
func (o *NamedListsUpdateNamedListConflictBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsUpdateNamedListConflictBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsUpdateNamedListConflict" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsUpdateNamedListConflict" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsUpdateNamedListConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsUpdateNamedListConflictBody) UnmarshalBinary(b []byte) error {
	var res NamedListsUpdateNamedListConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsUpdateNamedListConflictBodyError named lists update named list conflict body error
swagger:model NamedListsUpdateNamedListConflictBodyError
*/
type NamedListsUpdateNamedListConflictBodyError struct {

	// code
	// Example: ALREADY_EXISTS
	Code string `json:"code,omitempty"`

	// message
	// Example: Cannot use duplicate name \"named_list_a\
	Message string `json:"message,omitempty"`

	// status
	// Example: 409
	Status string `json:"status,omitempty"`
}

// Validate validates this named lists update named list conflict body error
func (o *NamedListsUpdateNamedListConflictBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this named lists update named list conflict body error based on context it is used
func (o *NamedListsUpdateNamedListConflictBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsUpdateNamedListConflictBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsUpdateNamedListConflictBodyError) UnmarshalBinary(b []byte) error {
	var res NamedListsUpdateNamedListConflictBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsUpdateNamedListInternalServerErrorBody named lists update named list internal server error body
swagger:model NamedListsUpdateNamedListInternalServerErrorBody
*/
type NamedListsUpdateNamedListInternalServerErrorBody struct {

	// error
	Error *NamedListsUpdateNamedListInternalServerErrorBodyError `json:"error,omitempty"`
}

// Validate validates this named lists update named list internal server error body
func (o *NamedListsUpdateNamedListInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsUpdateNamedListInternalServerErrorBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsUpdateNamedListInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsUpdateNamedListInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this named lists update named list internal server error body based on the context it is used
func (o *NamedListsUpdateNamedListInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsUpdateNamedListInternalServerErrorBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsUpdateNamedListInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsUpdateNamedListInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsUpdateNamedListInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsUpdateNamedListInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res NamedListsUpdateNamedListInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsUpdateNamedListInternalServerErrorBodyError named lists update named list internal server error body error
swagger:model NamedListsUpdateNamedListInternalServerErrorBodyError
*/
type NamedListsUpdateNamedListInternalServerErrorBodyError struct {

	// code
	// Example: INTERNAL
	Code string `json:"code,omitempty"`

	// message
	// Example: Internal Server Error
	Message string `json:"message,omitempty"`

	// status
	// Example: 500
	Status string `json:"status,omitempty"`
}

// Validate validates this named lists update named list internal server error body error
func (o *NamedListsUpdateNamedListInternalServerErrorBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this named lists update named list internal server error body error based on context it is used
func (o *NamedListsUpdateNamedListInternalServerErrorBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsUpdateNamedListInternalServerErrorBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsUpdateNamedListInternalServerErrorBodyError) UnmarshalBinary(b []byte) error {
	var res NamedListsUpdateNamedListInternalServerErrorBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsUpdateNamedListNotFoundBody named lists update named list not found body
swagger:model NamedListsUpdateNamedListNotFoundBody
*/
type NamedListsUpdateNamedListNotFoundBody struct {

	// error
	Error *NamedListsUpdateNamedListNotFoundBodyError `json:"error,omitempty"`
}

// Validate validates this named lists update named list not found body
func (o *NamedListsUpdateNamedListNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsUpdateNamedListNotFoundBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsUpdateNamedListNotFound" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsUpdateNamedListNotFound" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this named lists update named list not found body based on the context it is used
func (o *NamedListsUpdateNamedListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NamedListsUpdateNamedListNotFoundBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namedListsUpdateNamedListNotFound" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namedListsUpdateNamedListNotFound" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsUpdateNamedListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsUpdateNamedListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res NamedListsUpdateNamedListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NamedListsUpdateNamedListNotFoundBodyError named lists update named list not found body error
swagger:model NamedListsUpdateNamedListNotFoundBodyError
*/
type NamedListsUpdateNamedListNotFoundBodyError struct {

	// code
	// Example: NOT_FOUND
	Code string `json:"code,omitempty"`

	// message
	// Example: Named List does not exist
	Message string `json:"message,omitempty"`

	// status
	// Example: 404
	Status string `json:"status,omitempty"`
}

// Validate validates this named lists update named list not found body error
func (o *NamedListsUpdateNamedListNotFoundBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this named lists update named list not found body error based on context it is used
func (o *NamedListsUpdateNamedListNotFoundBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NamedListsUpdateNamedListNotFoundBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NamedListsUpdateNamedListNotFoundBodyError) UnmarshalBinary(b []byte) error {
	var res NamedListsUpdateNamedListNotFoundBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
