// Code generated by go-swagger; DO NOT EDIT.

package pop_regions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/infobloxopen/b1ddi-go-client/models"
)

// PopRegionsReadPoPRegionReader is a Reader for the PopRegionsReadPoPRegion structure.
type PopRegionsReadPoPRegionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PopRegionsReadPoPRegionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPopRegionsReadPoPRegionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewPopRegionsReadPoPRegionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPopRegionsReadPoPRegionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /pop_regions/{id}] pop_regionsReadPoPRegion", response, response.Code())
	}
}

// NewPopRegionsReadPoPRegionOK creates a PopRegionsReadPoPRegionOK with default headers values
func NewPopRegionsReadPoPRegionOK() *PopRegionsReadPoPRegionOK {
	return &PopRegionsReadPoPRegionOK{}
}

/*
PopRegionsReadPoPRegionOK describes a response with status code 200, with default header values.

GET operation response
*/
type PopRegionsReadPoPRegionOK struct {
	Payload *models.AtcfwReadPoPRegionResponse
}

// IsSuccess returns true when this pop regions read po p region o k response has a 2xx status code
func (o *PopRegionsReadPoPRegionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this pop regions read po p region o k response has a 3xx status code
func (o *PopRegionsReadPoPRegionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pop regions read po p region o k response has a 4xx status code
func (o *PopRegionsReadPoPRegionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this pop regions read po p region o k response has a 5xx status code
func (o *PopRegionsReadPoPRegionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this pop regions read po p region o k response a status code equal to that given
func (o *PopRegionsReadPoPRegionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the pop regions read po p region o k response
func (o *PopRegionsReadPoPRegionOK) Code() int {
	return 200
}

func (o *PopRegionsReadPoPRegionOK) Error() string {
	return fmt.Sprintf("[GET /pop_regions/{id}][%d] popRegionsReadPoPRegionOK  %+v", 200, o.Payload)
}

func (o *PopRegionsReadPoPRegionOK) String() string {
	return fmt.Sprintf("[GET /pop_regions/{id}][%d] popRegionsReadPoPRegionOK  %+v", 200, o.Payload)
}

func (o *PopRegionsReadPoPRegionOK) GetPayload() *models.AtcfwReadPoPRegionResponse {
	return o.Payload
}

func (o *PopRegionsReadPoPRegionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AtcfwReadPoPRegionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPopRegionsReadPoPRegionNotFound creates a PopRegionsReadPoPRegionNotFound with default headers values
func NewPopRegionsReadPoPRegionNotFound() *PopRegionsReadPoPRegionNotFound {
	return &PopRegionsReadPoPRegionNotFound{}
}

/*
	PopRegionsReadPoPRegionNotFound describes a response with status code 404, with default header values.

- 'id' value must contain existing PoP region's id
*/
type PopRegionsReadPoPRegionNotFound struct {
	Payload *PopRegionsReadPoPRegionNotFoundBody
}

// IsSuccess returns true when this pop regions read po p region not found response has a 2xx status code
func (o *PopRegionsReadPoPRegionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pop regions read po p region not found response has a 3xx status code
func (o *PopRegionsReadPoPRegionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pop regions read po p region not found response has a 4xx status code
func (o *PopRegionsReadPoPRegionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this pop regions read po p region not found response has a 5xx status code
func (o *PopRegionsReadPoPRegionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this pop regions read po p region not found response a status code equal to that given
func (o *PopRegionsReadPoPRegionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the pop regions read po p region not found response
func (o *PopRegionsReadPoPRegionNotFound) Code() int {
	return 404
}

func (o *PopRegionsReadPoPRegionNotFound) Error() string {
	return fmt.Sprintf("[GET /pop_regions/{id}][%d] popRegionsReadPoPRegionNotFound  %+v", 404, o.Payload)
}

func (o *PopRegionsReadPoPRegionNotFound) String() string {
	return fmt.Sprintf("[GET /pop_regions/{id}][%d] popRegionsReadPoPRegionNotFound  %+v", 404, o.Payload)
}

func (o *PopRegionsReadPoPRegionNotFound) GetPayload() *PopRegionsReadPoPRegionNotFoundBody {
	return o.Payload
}

func (o *PopRegionsReadPoPRegionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PopRegionsReadPoPRegionNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPopRegionsReadPoPRegionInternalServerError creates a PopRegionsReadPoPRegionInternalServerError with default headers values
func NewPopRegionsReadPoPRegionInternalServerError() *PopRegionsReadPoPRegionInternalServerError {
	return &PopRegionsReadPoPRegionInternalServerError{}
}

/*
	PopRegionsReadPoPRegionInternalServerError describes a response with status code 500, with default header values.

- Internal server error occurred
*/
type PopRegionsReadPoPRegionInternalServerError struct {
	Payload *PopRegionsReadPoPRegionInternalServerErrorBody
}

// IsSuccess returns true when this pop regions read po p region internal server error response has a 2xx status code
func (o *PopRegionsReadPoPRegionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pop regions read po p region internal server error response has a 3xx status code
func (o *PopRegionsReadPoPRegionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pop regions read po p region internal server error response has a 4xx status code
func (o *PopRegionsReadPoPRegionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this pop regions read po p region internal server error response has a 5xx status code
func (o *PopRegionsReadPoPRegionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this pop regions read po p region internal server error response a status code equal to that given
func (o *PopRegionsReadPoPRegionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the pop regions read po p region internal server error response
func (o *PopRegionsReadPoPRegionInternalServerError) Code() int {
	return 500
}

func (o *PopRegionsReadPoPRegionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /pop_regions/{id}][%d] popRegionsReadPoPRegionInternalServerError  %+v", 500, o.Payload)
}

func (o *PopRegionsReadPoPRegionInternalServerError) String() string {
	return fmt.Sprintf("[GET /pop_regions/{id}][%d] popRegionsReadPoPRegionInternalServerError  %+v", 500, o.Payload)
}

func (o *PopRegionsReadPoPRegionInternalServerError) GetPayload() *PopRegionsReadPoPRegionInternalServerErrorBody {
	return o.Payload
}

func (o *PopRegionsReadPoPRegionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PopRegionsReadPoPRegionInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PopRegionsReadPoPRegionInternalServerErrorBody pop regions read po p region internal server error body
swagger:model PopRegionsReadPoPRegionInternalServerErrorBody
*/
type PopRegionsReadPoPRegionInternalServerErrorBody struct {

	// error
	Error *PopRegionsReadPoPRegionInternalServerErrorBodyError `json:"error,omitempty"`
}

// Validate validates this pop regions read po p region internal server error body
func (o *PopRegionsReadPoPRegionInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PopRegionsReadPoPRegionInternalServerErrorBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("popRegionsReadPoPRegionInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("popRegionsReadPoPRegionInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this pop regions read po p region internal server error body based on the context it is used
func (o *PopRegionsReadPoPRegionInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PopRegionsReadPoPRegionInternalServerErrorBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("popRegionsReadPoPRegionInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("popRegionsReadPoPRegionInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PopRegionsReadPoPRegionInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PopRegionsReadPoPRegionInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PopRegionsReadPoPRegionInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PopRegionsReadPoPRegionInternalServerErrorBodyError pop regions read po p region internal server error body error
swagger:model PopRegionsReadPoPRegionInternalServerErrorBodyError
*/
type PopRegionsReadPoPRegionInternalServerErrorBodyError struct {

	// code
	// Example: INTERNAL
	Code string `json:"code,omitempty"`

	// message
	// Example: Internal Server Error
	Message string `json:"message,omitempty"`

	// status
	// Example: 500
	Status string `json:"status,omitempty"`
}

// Validate validates this pop regions read po p region internal server error body error
func (o *PopRegionsReadPoPRegionInternalServerErrorBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this pop regions read po p region internal server error body error based on context it is used
func (o *PopRegionsReadPoPRegionInternalServerErrorBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PopRegionsReadPoPRegionInternalServerErrorBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PopRegionsReadPoPRegionInternalServerErrorBodyError) UnmarshalBinary(b []byte) error {
	var res PopRegionsReadPoPRegionInternalServerErrorBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PopRegionsReadPoPRegionNotFoundBody pop regions read po p region not found body
swagger:model PopRegionsReadPoPRegionNotFoundBody
*/
type PopRegionsReadPoPRegionNotFoundBody struct {

	// error
	Error *PopRegionsReadPoPRegionNotFoundBodyError `json:"error,omitempty"`
}

// Validate validates this pop regions read po p region not found body
func (o *PopRegionsReadPoPRegionNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PopRegionsReadPoPRegionNotFoundBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("popRegionsReadPoPRegionNotFound" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("popRegionsReadPoPRegionNotFound" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this pop regions read po p region not found body based on the context it is used
func (o *PopRegionsReadPoPRegionNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PopRegionsReadPoPRegionNotFoundBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("popRegionsReadPoPRegionNotFound" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("popRegionsReadPoPRegionNotFound" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PopRegionsReadPoPRegionNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PopRegionsReadPoPRegionNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PopRegionsReadPoPRegionNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PopRegionsReadPoPRegionNotFoundBodyError pop regions read po p region not found body error
swagger:model PopRegionsReadPoPRegionNotFoundBodyError
*/
type PopRegionsReadPoPRegionNotFoundBodyError struct {

	// code
	// Example: NOT_FOUND
	Code string `json:"code,omitempty"`

	// message
	// Example: PoP region doesn't exist
	Message string `json:"message,omitempty"`

	// status
	// Example: 404
	Status string `json:"status,omitempty"`
}

// Validate validates this pop regions read po p region not found body error
func (o *PopRegionsReadPoPRegionNotFoundBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this pop regions read po p region not found body error based on context it is used
func (o *PopRegionsReadPoPRegionNotFoundBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PopRegionsReadPoPRegionNotFoundBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PopRegionsReadPoPRegionNotFoundBodyError) UnmarshalBinary(b []byte) error {
	var res PopRegionsReadPoPRegionNotFoundBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
