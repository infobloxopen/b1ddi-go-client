// Code generated by go-swagger; DO NOT EDIT.

package application_filters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new application filters API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for application filters API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ApplicationFiltersCreateApplicationFilter(params *ApplicationFiltersCreateApplicationFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApplicationFiltersCreateApplicationFilterCreated, error)

	ApplicationFiltersDeleteApplicationFilters(params *ApplicationFiltersDeleteApplicationFiltersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApplicationFiltersDeleteApplicationFiltersNoContent, error)

	ApplicationFiltersDeleteSingleApplicationFilters(params *ApplicationFiltersDeleteSingleApplicationFiltersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApplicationFiltersDeleteSingleApplicationFiltersNoContent, error)

	ApplicationFiltersListApplicationFilters(params *ApplicationFiltersListApplicationFiltersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApplicationFiltersListApplicationFiltersOK, error)

	ApplicationFiltersReadApplicationFilter(params *ApplicationFiltersReadApplicationFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApplicationFiltersReadApplicationFilterOK, error)

	ApplicationFiltersUpdateApplicationFilter(params *ApplicationFiltersUpdateApplicationFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApplicationFiltersUpdateApplicationFilterCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	ApplicationFiltersCreateApplicationFilter creates application filter

	Use this method to create a Application Filter object.

Required:
- name
- criteria
*/
func (a *Client) ApplicationFiltersCreateApplicationFilter(params *ApplicationFiltersCreateApplicationFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApplicationFiltersCreateApplicationFilterCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationFiltersCreateApplicationFilterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "application_filtersCreateApplicationFilter",
		Method:             "POST",
		PathPattern:        "/application_filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ApplicationFiltersCreateApplicationFilterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplicationFiltersCreateApplicationFilterCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for application_filtersCreateApplicationFilter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ApplicationFiltersDeleteApplicationFilters deletes application filters

	Use this method to delete Application Filter objects. Deletion of multiple lists is an all-or-nothing operation (if any of the specified lists can not be deleted then none of the specified lists will be deleted).

Required:
- ids
*/
func (a *Client) ApplicationFiltersDeleteApplicationFilters(params *ApplicationFiltersDeleteApplicationFiltersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApplicationFiltersDeleteApplicationFiltersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationFiltersDeleteApplicationFiltersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "application_filtersDeleteApplicationFilters",
		Method:             "DELETE",
		PathPattern:        "/application_filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ApplicationFiltersDeleteApplicationFiltersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplicationFiltersDeleteApplicationFiltersNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for application_filtersDeleteApplicationFilters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ApplicationFiltersDeleteSingleApplicationFilters deletes application filter object by ID

Use this method to delete single Application filter object by id.
*/
func (a *Client) ApplicationFiltersDeleteSingleApplicationFilters(params *ApplicationFiltersDeleteSingleApplicationFiltersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApplicationFiltersDeleteSingleApplicationFiltersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationFiltersDeleteSingleApplicationFiltersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "application_filtersDeleteSingleApplicationFilters",
		Method:             "DELETE",
		PathPattern:        "/application_filters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ApplicationFiltersDeleteSingleApplicationFiltersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplicationFiltersDeleteSingleApplicationFiltersNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for application_filtersDeleteSingleApplicationFilters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ApplicationFiltersListApplicationFilters lists application filters

Use this method to retrieve information on all Application Filter objects for the account.
*/
func (a *Client) ApplicationFiltersListApplicationFilters(params *ApplicationFiltersListApplicationFiltersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApplicationFiltersListApplicationFiltersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationFiltersListApplicationFiltersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "application_filtersListApplicationFilters",
		Method:             "GET",
		PathPattern:        "/application_filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ApplicationFiltersListApplicationFiltersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplicationFiltersListApplicationFiltersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for application_filtersListApplicationFilters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ApplicationFiltersReadApplicationFilter reads application filter

	Use this method to retrieve information on the specified Application Filter object.

Required:
- id
*/
func (a *Client) ApplicationFiltersReadApplicationFilter(params *ApplicationFiltersReadApplicationFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApplicationFiltersReadApplicationFilterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationFiltersReadApplicationFilterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "application_filtersReadApplicationFilter",
		Method:             "GET",
		PathPattern:        "/application_filters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ApplicationFiltersReadApplicationFilterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplicationFiltersReadApplicationFilterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for application_filtersReadApplicationFilter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ApplicationFiltersUpdateApplicationFilter updates application filter

	Use this method to update the specified Application Filter object.

Category filters are content categorization rules that BloxOne Cloud uses to detect and filter specific internet content. Based on your configuration, specific actions such as Allow or Block, will be taken on the detected content. BloxOne Cloud provides the following content categories from which you can build your category filters: Drugs, Risk/Fraud/Crime, Entertainment/Culture, Purchasing, Information/Communication, Business/Services, Information Technology, Lifestyle, Society/Education/Religion, Mature/Violent, Games/Gambling, Pornography/Nudity and Uncategorized. Each of these categories contains sub-categories that further define the respective content. When you configure your category filter, you can add as many sub-categories as you need. You then add the category filter to your security policy and assign the Block action for the filter.

Required:
- id
- name
- criteria
*/
func (a *Client) ApplicationFiltersUpdateApplicationFilter(params *ApplicationFiltersUpdateApplicationFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApplicationFiltersUpdateApplicationFilterCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplicationFiltersUpdateApplicationFilterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "application_filtersUpdateApplicationFilter",
		Method:             "PUT",
		PathPattern:        "/application_filters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ApplicationFiltersUpdateApplicationFilterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplicationFiltersUpdateApplicationFilterCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for application_filtersUpdateApplicationFilter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
