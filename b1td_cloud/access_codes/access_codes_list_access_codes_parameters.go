// Code generated by go-swagger; DO NOT EDIT.

package access_codes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAccessCodesListAccessCodesParams creates a new AccessCodesListAccessCodesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAccessCodesListAccessCodesParams() *AccessCodesListAccessCodesParams {
	return &AccessCodesListAccessCodesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAccessCodesListAccessCodesParamsWithTimeout creates a new AccessCodesListAccessCodesParams object
// with the ability to set a timeout on a request.
func NewAccessCodesListAccessCodesParamsWithTimeout(timeout time.Duration) *AccessCodesListAccessCodesParams {
	return &AccessCodesListAccessCodesParams{
		timeout: timeout,
	}
}

// NewAccessCodesListAccessCodesParamsWithContext creates a new AccessCodesListAccessCodesParams object
// with the ability to set a context for a request.
func NewAccessCodesListAccessCodesParamsWithContext(ctx context.Context) *AccessCodesListAccessCodesParams {
	return &AccessCodesListAccessCodesParams{
		Context: ctx,
	}
}

// NewAccessCodesListAccessCodesParamsWithHTTPClient creates a new AccessCodesListAccessCodesParams object
// with the ability to set a custom HTTPClient for a request.
func NewAccessCodesListAccessCodesParamsWithHTTPClient(client *http.Client) *AccessCodesListAccessCodesParams {
	return &AccessCodesListAccessCodesParams{
		HTTPClient: client,
	}
}

/*
AccessCodesListAccessCodesParams contains all the parameters to send to the API endpoint

	for the access codes list access codes operation.

	Typically these are written to a http.Request.
*/
type AccessCodesListAccessCodesParams struct {

	/* Filter.

	     A collection of response resources can be filtered by a logical expression string that includes JSON tag references to values in each resource, literal values, and logical operators. If a resource does not have the specified tag, its value is assumed to be null.

	Literal values include numbers (integer and floating-point), and quoted (both single- or double-quoted) literal strings, and 'null'.

	You can filter by following fields:

	| Name               | type   | Supported Op                |
	| ------------------ | ------ | --------------------------- |
	| access_key         | string | !=, ==, ~, !~, >, <, <=, >= |
	| name               | string | !=, ==, ~, !~, >, <, <=, >= |
	| description        | string | !=, ==, ~, !~, >, <, <=, >= |
	| security_policy_id | int32  | !=, ==, >, <, <=, >=        |

	In addition, grouping operators are supported:

	| Op  | Description          |
	| --- | -------------------- |
	| and | Logical AND          |
	| or  | Logical OR           |
	| not | Logical NOT          |
	| ()  | Groupping Operators  |

	Example:
	```
	?_filter="((name=='acc_code')or(name~'key'))and(security_policy_id!=32)"
	```

	*/
	Filter *string

	/* Limit.



	The integer number of resources to be returned in the response. The service may impose maximum value. If omitted the service may impose a default value.


	*/
	Limit *int64

	/* Offset.



	The integer index (zero-origin) of the offset into a collection of resources. If omitted or null the value is assumed to be '0'.


	*/
	Offset *int64

	/* PageToken.



	The service-defined string used to identify a page of resources. A null value indicates the first page.


	*/
	PageToken *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the access codes list access codes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AccessCodesListAccessCodesParams) WithDefaults() *AccessCodesListAccessCodesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the access codes list access codes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AccessCodesListAccessCodesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the access codes list access codes params
func (o *AccessCodesListAccessCodesParams) WithTimeout(timeout time.Duration) *AccessCodesListAccessCodesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the access codes list access codes params
func (o *AccessCodesListAccessCodesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the access codes list access codes params
func (o *AccessCodesListAccessCodesParams) WithContext(ctx context.Context) *AccessCodesListAccessCodesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the access codes list access codes params
func (o *AccessCodesListAccessCodesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the access codes list access codes params
func (o *AccessCodesListAccessCodesParams) WithHTTPClient(client *http.Client) *AccessCodesListAccessCodesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the access codes list access codes params
func (o *AccessCodesListAccessCodesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the access codes list access codes params
func (o *AccessCodesListAccessCodesParams) WithFilter(filter *string) *AccessCodesListAccessCodesParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the access codes list access codes params
func (o *AccessCodesListAccessCodesParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithLimit adds the limit to the access codes list access codes params
func (o *AccessCodesListAccessCodesParams) WithLimit(limit *int64) *AccessCodesListAccessCodesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the access codes list access codes params
func (o *AccessCodesListAccessCodesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the access codes list access codes params
func (o *AccessCodesListAccessCodesParams) WithOffset(offset *int64) *AccessCodesListAccessCodesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the access codes list access codes params
func (o *AccessCodesListAccessCodesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithPageToken adds the pageToken to the access codes list access codes params
func (o *AccessCodesListAccessCodesParams) WithPageToken(pageToken *string) *AccessCodesListAccessCodesParams {
	o.SetPageToken(pageToken)
	return o
}

// SetPageToken adds the pageToken to the access codes list access codes params
func (o *AccessCodesListAccessCodesParams) SetPageToken(pageToken *string) {
	o.PageToken = pageToken
}

// WriteToRequest writes these params to a swagger request
func (o *AccessCodesListAccessCodesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param _filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("_filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param _limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("_limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param _offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("_offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.PageToken != nil {

		// query param _page_token
		var qrPageToken string

		if o.PageToken != nil {
			qrPageToken = *o.PageToken
		}
		qPageToken := qrPageToken
		if qPageToken != "" {

			if err := r.SetQueryParam("_page_token", qPageToken); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
