// Code generated by go-swagger; DO NOT EDIT.

package access_codes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/infobloxopen/b1ddi-go-client/models"
)

// AccessCodesCreateAccessCodeReader is a Reader for the AccessCodesCreateAccessCode structure.
type AccessCodesCreateAccessCodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AccessCodesCreateAccessCodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewAccessCodesCreateAccessCodeCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAccessCodesCreateAccessCodeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAccessCodesCreateAccessCodeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewAccessCodesCreateAccessCodeConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAccessCodesCreateAccessCodeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /access_codes] access_codesCreateAccessCode", response, response.Code())
	}
}

// NewAccessCodesCreateAccessCodeCreated creates a AccessCodesCreateAccessCodeCreated with default headers values
func NewAccessCodesCreateAccessCodeCreated() *AccessCodesCreateAccessCodeCreated {
	return &AccessCodesCreateAccessCodeCreated{}
}

/*
AccessCodesCreateAccessCodeCreated describes a response with status code 201, with default header values.

POST operation response
*/
type AccessCodesCreateAccessCodeCreated struct {
	Payload *models.AtcfwAccessCodeCreateResponse
}

// IsSuccess returns true when this access codes create access code created response has a 2xx status code
func (o *AccessCodesCreateAccessCodeCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this access codes create access code created response has a 3xx status code
func (o *AccessCodesCreateAccessCodeCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this access codes create access code created response has a 4xx status code
func (o *AccessCodesCreateAccessCodeCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this access codes create access code created response has a 5xx status code
func (o *AccessCodesCreateAccessCodeCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this access codes create access code created response a status code equal to that given
func (o *AccessCodesCreateAccessCodeCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the access codes create access code created response
func (o *AccessCodesCreateAccessCodeCreated) Code() int {
	return 201
}

func (o *AccessCodesCreateAccessCodeCreated) Error() string {
	return fmt.Sprintf("[POST /access_codes][%d] accessCodesCreateAccessCodeCreated  %+v", 201, o.Payload)
}

func (o *AccessCodesCreateAccessCodeCreated) String() string {
	return fmt.Sprintf("[POST /access_codes][%d] accessCodesCreateAccessCodeCreated  %+v", 201, o.Payload)
}

func (o *AccessCodesCreateAccessCodeCreated) GetPayload() *models.AtcfwAccessCodeCreateResponse {
	return o.Payload
}

func (o *AccessCodesCreateAccessCodeCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AtcfwAccessCodeCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAccessCodesCreateAccessCodeBadRequest creates a AccessCodesCreateAccessCodeBadRequest with default headers values
func NewAccessCodesCreateAccessCodeBadRequest() *AccessCodesCreateAccessCodeBadRequest {
	return &AccessCodesCreateAccessCodeBadRequest{}
}

/*
	AccessCodesCreateAccessCodeBadRequest describes a response with status code 400, with default header values.

- 'name' length cannot exceed 256 characters limit
- 'description' length cannot exceed 256 characters limit
- Expiration date must be after activation date
- Cannot enter expired Bypass Code
*/
type AccessCodesCreateAccessCodeBadRequest struct {
	Payload *AccessCodesCreateAccessCodeBadRequestBody
}

// IsSuccess returns true when this access codes create access code bad request response has a 2xx status code
func (o *AccessCodesCreateAccessCodeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this access codes create access code bad request response has a 3xx status code
func (o *AccessCodesCreateAccessCodeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this access codes create access code bad request response has a 4xx status code
func (o *AccessCodesCreateAccessCodeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this access codes create access code bad request response has a 5xx status code
func (o *AccessCodesCreateAccessCodeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this access codes create access code bad request response a status code equal to that given
func (o *AccessCodesCreateAccessCodeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the access codes create access code bad request response
func (o *AccessCodesCreateAccessCodeBadRequest) Code() int {
	return 400
}

func (o *AccessCodesCreateAccessCodeBadRequest) Error() string {
	return fmt.Sprintf("[POST /access_codes][%d] accessCodesCreateAccessCodeBadRequest  %+v", 400, o.Payload)
}

func (o *AccessCodesCreateAccessCodeBadRequest) String() string {
	return fmt.Sprintf("[POST /access_codes][%d] accessCodesCreateAccessCodeBadRequest  %+v", 400, o.Payload)
}

func (o *AccessCodesCreateAccessCodeBadRequest) GetPayload() *AccessCodesCreateAccessCodeBadRequestBody {
	return o.Payload
}

func (o *AccessCodesCreateAccessCodeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AccessCodesCreateAccessCodeBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAccessCodesCreateAccessCodeNotFound creates a AccessCodesCreateAccessCodeNotFound with default headers values
func NewAccessCodesCreateAccessCodeNotFound() *AccessCodesCreateAccessCodeNotFound {
	return &AccessCodesCreateAccessCodeNotFound{}
}

/*
	AccessCodesCreateAccessCodeNotFound describes a response with status code 404, with default header values.

- Threat Feed and TI rules must contain existing threat feeds and TI lists
- Custom Redirect rules must contain existing Custom Redirect
- Custom List rules must contain existing Custom List
*/
type AccessCodesCreateAccessCodeNotFound struct {
	Payload *AccessCodesCreateAccessCodeNotFoundBody
}

// IsSuccess returns true when this access codes create access code not found response has a 2xx status code
func (o *AccessCodesCreateAccessCodeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this access codes create access code not found response has a 3xx status code
func (o *AccessCodesCreateAccessCodeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this access codes create access code not found response has a 4xx status code
func (o *AccessCodesCreateAccessCodeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this access codes create access code not found response has a 5xx status code
func (o *AccessCodesCreateAccessCodeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this access codes create access code not found response a status code equal to that given
func (o *AccessCodesCreateAccessCodeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the access codes create access code not found response
func (o *AccessCodesCreateAccessCodeNotFound) Code() int {
	return 404
}

func (o *AccessCodesCreateAccessCodeNotFound) Error() string {
	return fmt.Sprintf("[POST /access_codes][%d] accessCodesCreateAccessCodeNotFound  %+v", 404, o.Payload)
}

func (o *AccessCodesCreateAccessCodeNotFound) String() string {
	return fmt.Sprintf("[POST /access_codes][%d] accessCodesCreateAccessCodeNotFound  %+v", 404, o.Payload)
}

func (o *AccessCodesCreateAccessCodeNotFound) GetPayload() *AccessCodesCreateAccessCodeNotFoundBody {
	return o.Payload
}

func (o *AccessCodesCreateAccessCodeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AccessCodesCreateAccessCodeNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAccessCodesCreateAccessCodeConflict creates a AccessCodesCreateAccessCodeConflict with default headers values
func NewAccessCodesCreateAccessCodeConflict() *AccessCodesCreateAccessCodeConflict {
	return &AccessCodesCreateAccessCodeConflict{}
}

/*
	AccessCodesCreateAccessCodeConflict describes a response with status code 409, with default header values.

- 'name' value must be unique among bypass codes belonging to the same account
*/
type AccessCodesCreateAccessCodeConflict struct {
	Payload *AccessCodesCreateAccessCodeConflictBody
}

// IsSuccess returns true when this access codes create access code conflict response has a 2xx status code
func (o *AccessCodesCreateAccessCodeConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this access codes create access code conflict response has a 3xx status code
func (o *AccessCodesCreateAccessCodeConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this access codes create access code conflict response has a 4xx status code
func (o *AccessCodesCreateAccessCodeConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this access codes create access code conflict response has a 5xx status code
func (o *AccessCodesCreateAccessCodeConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this access codes create access code conflict response a status code equal to that given
func (o *AccessCodesCreateAccessCodeConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the access codes create access code conflict response
func (o *AccessCodesCreateAccessCodeConflict) Code() int {
	return 409
}

func (o *AccessCodesCreateAccessCodeConflict) Error() string {
	return fmt.Sprintf("[POST /access_codes][%d] accessCodesCreateAccessCodeConflict  %+v", 409, o.Payload)
}

func (o *AccessCodesCreateAccessCodeConflict) String() string {
	return fmt.Sprintf("[POST /access_codes][%d] accessCodesCreateAccessCodeConflict  %+v", 409, o.Payload)
}

func (o *AccessCodesCreateAccessCodeConflict) GetPayload() *AccessCodesCreateAccessCodeConflictBody {
	return o.Payload
}

func (o *AccessCodesCreateAccessCodeConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AccessCodesCreateAccessCodeConflictBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAccessCodesCreateAccessCodeInternalServerError creates a AccessCodesCreateAccessCodeInternalServerError with default headers values
func NewAccessCodesCreateAccessCodeInternalServerError() *AccessCodesCreateAccessCodeInternalServerError {
	return &AccessCodesCreateAccessCodeInternalServerError{}
}

/*
	AccessCodesCreateAccessCodeInternalServerError describes a response with status code 500, with default header values.

- Internal server error occurred
*/
type AccessCodesCreateAccessCodeInternalServerError struct {
	Payload *AccessCodesCreateAccessCodeInternalServerErrorBody
}

// IsSuccess returns true when this access codes create access code internal server error response has a 2xx status code
func (o *AccessCodesCreateAccessCodeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this access codes create access code internal server error response has a 3xx status code
func (o *AccessCodesCreateAccessCodeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this access codes create access code internal server error response has a 4xx status code
func (o *AccessCodesCreateAccessCodeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this access codes create access code internal server error response has a 5xx status code
func (o *AccessCodesCreateAccessCodeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this access codes create access code internal server error response a status code equal to that given
func (o *AccessCodesCreateAccessCodeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the access codes create access code internal server error response
func (o *AccessCodesCreateAccessCodeInternalServerError) Code() int {
	return 500
}

func (o *AccessCodesCreateAccessCodeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /access_codes][%d] accessCodesCreateAccessCodeInternalServerError  %+v", 500, o.Payload)
}

func (o *AccessCodesCreateAccessCodeInternalServerError) String() string {
	return fmt.Sprintf("[POST /access_codes][%d] accessCodesCreateAccessCodeInternalServerError  %+v", 500, o.Payload)
}

func (o *AccessCodesCreateAccessCodeInternalServerError) GetPayload() *AccessCodesCreateAccessCodeInternalServerErrorBody {
	return o.Payload
}

func (o *AccessCodesCreateAccessCodeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AccessCodesCreateAccessCodeInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
AccessCodesCreateAccessCodeBadRequestBody access codes create access code bad request body
swagger:model AccessCodesCreateAccessCodeBadRequestBody
*/
type AccessCodesCreateAccessCodeBadRequestBody struct {

	// error
	Error *AccessCodesCreateAccessCodeBadRequestBodyError `json:"error,omitempty"`
}

// Validate validates this access codes create access code bad request body
func (o *AccessCodesCreateAccessCodeBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AccessCodesCreateAccessCodeBadRequestBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessCodesCreateAccessCodeBadRequest" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessCodesCreateAccessCodeBadRequest" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this access codes create access code bad request body based on the context it is used
func (o *AccessCodesCreateAccessCodeBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AccessCodesCreateAccessCodeBadRequestBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessCodesCreateAccessCodeBadRequest" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessCodesCreateAccessCodeBadRequest" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AccessCodesCreateAccessCodeBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AccessCodesCreateAccessCodeBadRequestBody) UnmarshalBinary(b []byte) error {
	var res AccessCodesCreateAccessCodeBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AccessCodesCreateAccessCodeBadRequestBodyError access codes create access code bad request body error
swagger:model AccessCodesCreateAccessCodeBadRequestBodyError
*/
type AccessCodesCreateAccessCodeBadRequestBodyError struct {

	// code
	// Example: INVALID_ARGUMENT
	Code string `json:"code,omitempty"`

	// message
	// Example: rules' must not be empty
	Message string `json:"message,omitempty"`

	// status
	// Example: 400
	Status string `json:"status,omitempty"`
}

// Validate validates this access codes create access code bad request body error
func (o *AccessCodesCreateAccessCodeBadRequestBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this access codes create access code bad request body error based on context it is used
func (o *AccessCodesCreateAccessCodeBadRequestBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AccessCodesCreateAccessCodeBadRequestBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AccessCodesCreateAccessCodeBadRequestBodyError) UnmarshalBinary(b []byte) error {
	var res AccessCodesCreateAccessCodeBadRequestBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AccessCodesCreateAccessCodeConflictBody access codes create access code conflict body
swagger:model AccessCodesCreateAccessCodeConflictBody
*/
type AccessCodesCreateAccessCodeConflictBody struct {

	// error
	Error *AccessCodesCreateAccessCodeConflictBodyError `json:"error,omitempty"`
}

// Validate validates this access codes create access code conflict body
func (o *AccessCodesCreateAccessCodeConflictBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AccessCodesCreateAccessCodeConflictBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessCodesCreateAccessCodeConflict" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessCodesCreateAccessCodeConflict" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this access codes create access code conflict body based on the context it is used
func (o *AccessCodesCreateAccessCodeConflictBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AccessCodesCreateAccessCodeConflictBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessCodesCreateAccessCodeConflict" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessCodesCreateAccessCodeConflict" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AccessCodesCreateAccessCodeConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AccessCodesCreateAccessCodeConflictBody) UnmarshalBinary(b []byte) error {
	var res AccessCodesCreateAccessCodeConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AccessCodesCreateAccessCodeConflictBodyError access codes create access code conflict body error
swagger:model AccessCodesCreateAccessCodeConflictBodyError
*/
type AccessCodesCreateAccessCodeConflictBodyError struct {

	// code
	// Example: ALREADY_EXISTS
	Code string `json:"code,omitempty"`

	// message
	// Example: Bypass Code with name 'acc_code' already exists
	Message string `json:"message,omitempty"`

	// status
	// Example: 409
	Status string `json:"status,omitempty"`
}

// Validate validates this access codes create access code conflict body error
func (o *AccessCodesCreateAccessCodeConflictBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this access codes create access code conflict body error based on context it is used
func (o *AccessCodesCreateAccessCodeConflictBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AccessCodesCreateAccessCodeConflictBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AccessCodesCreateAccessCodeConflictBodyError) UnmarshalBinary(b []byte) error {
	var res AccessCodesCreateAccessCodeConflictBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AccessCodesCreateAccessCodeInternalServerErrorBody access codes create access code internal server error body
swagger:model AccessCodesCreateAccessCodeInternalServerErrorBody
*/
type AccessCodesCreateAccessCodeInternalServerErrorBody struct {

	// error
	Error *AccessCodesCreateAccessCodeInternalServerErrorBodyError `json:"error,omitempty"`
}

// Validate validates this access codes create access code internal server error body
func (o *AccessCodesCreateAccessCodeInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AccessCodesCreateAccessCodeInternalServerErrorBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessCodesCreateAccessCodeInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessCodesCreateAccessCodeInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this access codes create access code internal server error body based on the context it is used
func (o *AccessCodesCreateAccessCodeInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AccessCodesCreateAccessCodeInternalServerErrorBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessCodesCreateAccessCodeInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessCodesCreateAccessCodeInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AccessCodesCreateAccessCodeInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AccessCodesCreateAccessCodeInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res AccessCodesCreateAccessCodeInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AccessCodesCreateAccessCodeInternalServerErrorBodyError access codes create access code internal server error body error
swagger:model AccessCodesCreateAccessCodeInternalServerErrorBodyError
*/
type AccessCodesCreateAccessCodeInternalServerErrorBodyError struct {

	// code
	// Example: INTERNAL
	Code string `json:"code,omitempty"`

	// message
	// Example: Internal Server Error
	Message string `json:"message,omitempty"`

	// status
	// Example: 500
	Status string `json:"status,omitempty"`
}

// Validate validates this access codes create access code internal server error body error
func (o *AccessCodesCreateAccessCodeInternalServerErrorBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this access codes create access code internal server error body error based on context it is used
func (o *AccessCodesCreateAccessCodeInternalServerErrorBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AccessCodesCreateAccessCodeInternalServerErrorBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AccessCodesCreateAccessCodeInternalServerErrorBodyError) UnmarshalBinary(b []byte) error {
	var res AccessCodesCreateAccessCodeInternalServerErrorBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AccessCodesCreateAccessCodeNotFoundBody access codes create access code not found body
swagger:model AccessCodesCreateAccessCodeNotFoundBody
*/
type AccessCodesCreateAccessCodeNotFoundBody struct {

	// error
	Error *AccessCodesCreateAccessCodeNotFoundBodyError `json:"error,omitempty"`
}

// Validate validates this access codes create access code not found body
func (o *AccessCodesCreateAccessCodeNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AccessCodesCreateAccessCodeNotFoundBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessCodesCreateAccessCodeNotFound" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessCodesCreateAccessCodeNotFound" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this access codes create access code not found body based on the context it is used
func (o *AccessCodesCreateAccessCodeNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AccessCodesCreateAccessCodeNotFoundBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessCodesCreateAccessCodeNotFound" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessCodesCreateAccessCodeNotFound" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AccessCodesCreateAccessCodeNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AccessCodesCreateAccessCodeNotFoundBody) UnmarshalBinary(b []byte) error {
	var res AccessCodesCreateAccessCodeNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AccessCodesCreateAccessCodeNotFoundBodyError access codes create access code not found body error
swagger:model AccessCodesCreateAccessCodeNotFoundBodyError
*/
type AccessCodesCreateAccessCodeNotFoundBodyError struct {

	// code
	// Example: NOT_FOUND
	Code string `json:"code,omitempty"`

	// message
	// Example: Invalid Rule: List 'custom-list-a.com' not found
	Message string `json:"message,omitempty"`

	// status
	// Example: 404
	Status string `json:"status,omitempty"`
}

// Validate validates this access codes create access code not found body error
func (o *AccessCodesCreateAccessCodeNotFoundBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this access codes create access code not found body error based on context it is used
func (o *AccessCodesCreateAccessCodeNotFoundBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AccessCodesCreateAccessCodeNotFoundBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AccessCodesCreateAccessCodeNotFoundBodyError) UnmarshalBinary(b []byte) error {
	var res AccessCodesCreateAccessCodeNotFoundBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
