// Code generated by go-swagger; DO NOT EDIT.

package access_codes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AccessCodesDeleteSingleAccessCodesReader is a Reader for the AccessCodesDeleteSingleAccessCodes structure.
type AccessCodesDeleteSingleAccessCodesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AccessCodesDeleteSingleAccessCodesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewAccessCodesDeleteSingleAccessCodesNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAccessCodesDeleteSingleAccessCodesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAccessCodesDeleteSingleAccessCodesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /access_codes/{access_key}] access_codesDeleteSingleAccessCodes", response, response.Code())
	}
}

// NewAccessCodesDeleteSingleAccessCodesNoContent creates a AccessCodesDeleteSingleAccessCodesNoContent with default headers values
func NewAccessCodesDeleteSingleAccessCodesNoContent() *AccessCodesDeleteSingleAccessCodesNoContent {
	return &AccessCodesDeleteSingleAccessCodesNoContent{}
}

/*
AccessCodesDeleteSingleAccessCodesNoContent describes a response with status code 204, with default header values.

No Content
*/
type AccessCodesDeleteSingleAccessCodesNoContent struct {
}

// IsSuccess returns true when this access codes delete single access codes no content response has a 2xx status code
func (o *AccessCodesDeleteSingleAccessCodesNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this access codes delete single access codes no content response has a 3xx status code
func (o *AccessCodesDeleteSingleAccessCodesNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this access codes delete single access codes no content response has a 4xx status code
func (o *AccessCodesDeleteSingleAccessCodesNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this access codes delete single access codes no content response has a 5xx status code
func (o *AccessCodesDeleteSingleAccessCodesNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this access codes delete single access codes no content response a status code equal to that given
func (o *AccessCodesDeleteSingleAccessCodesNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the access codes delete single access codes no content response
func (o *AccessCodesDeleteSingleAccessCodesNoContent) Code() int {
	return 204
}

func (o *AccessCodesDeleteSingleAccessCodesNoContent) Error() string {
	return fmt.Sprintf("[DELETE /access_codes/{access_key}][%d] accessCodesDeleteSingleAccessCodesNoContent ", 204)
}

func (o *AccessCodesDeleteSingleAccessCodesNoContent) String() string {
	return fmt.Sprintf("[DELETE /access_codes/{access_key}][%d] accessCodesDeleteSingleAccessCodesNoContent ", 204)
}

func (o *AccessCodesDeleteSingleAccessCodesNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAccessCodesDeleteSingleAccessCodesBadRequest creates a AccessCodesDeleteSingleAccessCodesBadRequest with default headers values
func NewAccessCodesDeleteSingleAccessCodesBadRequest() *AccessCodesDeleteSingleAccessCodesBadRequest {
	return &AccessCodesDeleteSingleAccessCodesBadRequest{}
}

/*
	AccessCodesDeleteSingleAccessCodesBadRequest describes a response with status code 400, with default header values.

- 'id' value must contain existing bypass code key
- Cannot delete bypass code assigned to policy
*/
type AccessCodesDeleteSingleAccessCodesBadRequest struct {
	Payload *AccessCodesDeleteSingleAccessCodesBadRequestBody
}

// IsSuccess returns true when this access codes delete single access codes bad request response has a 2xx status code
func (o *AccessCodesDeleteSingleAccessCodesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this access codes delete single access codes bad request response has a 3xx status code
func (o *AccessCodesDeleteSingleAccessCodesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this access codes delete single access codes bad request response has a 4xx status code
func (o *AccessCodesDeleteSingleAccessCodesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this access codes delete single access codes bad request response has a 5xx status code
func (o *AccessCodesDeleteSingleAccessCodesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this access codes delete single access codes bad request response a status code equal to that given
func (o *AccessCodesDeleteSingleAccessCodesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the access codes delete single access codes bad request response
func (o *AccessCodesDeleteSingleAccessCodesBadRequest) Code() int {
	return 400
}

func (o *AccessCodesDeleteSingleAccessCodesBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /access_codes/{access_key}][%d] accessCodesDeleteSingleAccessCodesBadRequest  %+v", 400, o.Payload)
}

func (o *AccessCodesDeleteSingleAccessCodesBadRequest) String() string {
	return fmt.Sprintf("[DELETE /access_codes/{access_key}][%d] accessCodesDeleteSingleAccessCodesBadRequest  %+v", 400, o.Payload)
}

func (o *AccessCodesDeleteSingleAccessCodesBadRequest) GetPayload() *AccessCodesDeleteSingleAccessCodesBadRequestBody {
	return o.Payload
}

func (o *AccessCodesDeleteSingleAccessCodesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AccessCodesDeleteSingleAccessCodesBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAccessCodesDeleteSingleAccessCodesInternalServerError creates a AccessCodesDeleteSingleAccessCodesInternalServerError with default headers values
func NewAccessCodesDeleteSingleAccessCodesInternalServerError() *AccessCodesDeleteSingleAccessCodesInternalServerError {
	return &AccessCodesDeleteSingleAccessCodesInternalServerError{}
}

/*
	AccessCodesDeleteSingleAccessCodesInternalServerError describes a response with status code 500, with default header values.

- Internal server error occurred
*/
type AccessCodesDeleteSingleAccessCodesInternalServerError struct {
	Payload *AccessCodesDeleteSingleAccessCodesInternalServerErrorBody
}

// IsSuccess returns true when this access codes delete single access codes internal server error response has a 2xx status code
func (o *AccessCodesDeleteSingleAccessCodesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this access codes delete single access codes internal server error response has a 3xx status code
func (o *AccessCodesDeleteSingleAccessCodesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this access codes delete single access codes internal server error response has a 4xx status code
func (o *AccessCodesDeleteSingleAccessCodesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this access codes delete single access codes internal server error response has a 5xx status code
func (o *AccessCodesDeleteSingleAccessCodesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this access codes delete single access codes internal server error response a status code equal to that given
func (o *AccessCodesDeleteSingleAccessCodesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the access codes delete single access codes internal server error response
func (o *AccessCodesDeleteSingleAccessCodesInternalServerError) Code() int {
	return 500
}

func (o *AccessCodesDeleteSingleAccessCodesInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /access_codes/{access_key}][%d] accessCodesDeleteSingleAccessCodesInternalServerError  %+v", 500, o.Payload)
}

func (o *AccessCodesDeleteSingleAccessCodesInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /access_codes/{access_key}][%d] accessCodesDeleteSingleAccessCodesInternalServerError  %+v", 500, o.Payload)
}

func (o *AccessCodesDeleteSingleAccessCodesInternalServerError) GetPayload() *AccessCodesDeleteSingleAccessCodesInternalServerErrorBody {
	return o.Payload
}

func (o *AccessCodesDeleteSingleAccessCodesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AccessCodesDeleteSingleAccessCodesInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
AccessCodesDeleteSingleAccessCodesBadRequestBody access codes delete single access codes bad request body
swagger:model AccessCodesDeleteSingleAccessCodesBadRequestBody
*/
type AccessCodesDeleteSingleAccessCodesBadRequestBody struct {

	// error
	Error *AccessCodesDeleteSingleAccessCodesBadRequestBodyError `json:"error,omitempty"`
}

// Validate validates this access codes delete single access codes bad request body
func (o *AccessCodesDeleteSingleAccessCodesBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AccessCodesDeleteSingleAccessCodesBadRequestBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessCodesDeleteSingleAccessCodesBadRequest" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessCodesDeleteSingleAccessCodesBadRequest" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this access codes delete single access codes bad request body based on the context it is used
func (o *AccessCodesDeleteSingleAccessCodesBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AccessCodesDeleteSingleAccessCodesBadRequestBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessCodesDeleteSingleAccessCodesBadRequest" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessCodesDeleteSingleAccessCodesBadRequest" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AccessCodesDeleteSingleAccessCodesBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AccessCodesDeleteSingleAccessCodesBadRequestBody) UnmarshalBinary(b []byte) error {
	var res AccessCodesDeleteSingleAccessCodesBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AccessCodesDeleteSingleAccessCodesBadRequestBodyError access codes delete single access codes bad request body error
swagger:model AccessCodesDeleteSingleAccessCodesBadRequestBodyError
*/
type AccessCodesDeleteSingleAccessCodesBadRequestBodyError struct {

	// code
	// Example: INVALID_ARGUMENT
	Code string `json:"code,omitempty"`

	// message
	// Example: Cannot delete bypass code assigned to policy
	Message string `json:"message,omitempty"`

	// status
	// Example: 400
	Status string `json:"status,omitempty"`
}

// Validate validates this access codes delete single access codes bad request body error
func (o *AccessCodesDeleteSingleAccessCodesBadRequestBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this access codes delete single access codes bad request body error based on context it is used
func (o *AccessCodesDeleteSingleAccessCodesBadRequestBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AccessCodesDeleteSingleAccessCodesBadRequestBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AccessCodesDeleteSingleAccessCodesBadRequestBodyError) UnmarshalBinary(b []byte) error {
	var res AccessCodesDeleteSingleAccessCodesBadRequestBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AccessCodesDeleteSingleAccessCodesInternalServerErrorBody access codes delete single access codes internal server error body
swagger:model AccessCodesDeleteSingleAccessCodesInternalServerErrorBody
*/
type AccessCodesDeleteSingleAccessCodesInternalServerErrorBody struct {

	// error
	Error *AccessCodesDeleteSingleAccessCodesInternalServerErrorBodyError `json:"error,omitempty"`
}

// Validate validates this access codes delete single access codes internal server error body
func (o *AccessCodesDeleteSingleAccessCodesInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AccessCodesDeleteSingleAccessCodesInternalServerErrorBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessCodesDeleteSingleAccessCodesInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessCodesDeleteSingleAccessCodesInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this access codes delete single access codes internal server error body based on the context it is used
func (o *AccessCodesDeleteSingleAccessCodesInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AccessCodesDeleteSingleAccessCodesInternalServerErrorBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessCodesDeleteSingleAccessCodesInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessCodesDeleteSingleAccessCodesInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AccessCodesDeleteSingleAccessCodesInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AccessCodesDeleteSingleAccessCodesInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res AccessCodesDeleteSingleAccessCodesInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AccessCodesDeleteSingleAccessCodesInternalServerErrorBodyError access codes delete single access codes internal server error body error
swagger:model AccessCodesDeleteSingleAccessCodesInternalServerErrorBodyError
*/
type AccessCodesDeleteSingleAccessCodesInternalServerErrorBodyError struct {

	// code
	// Example: INTERNAL
	Code string `json:"code,omitempty"`

	// message
	// Example: Internal Server Error
	Message string `json:"message,omitempty"`

	// status
	// Example: 500
	Status string `json:"status,omitempty"`
}

// Validate validates this access codes delete single access codes internal server error body error
func (o *AccessCodesDeleteSingleAccessCodesInternalServerErrorBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this access codes delete single access codes internal server error body error based on context it is used
func (o *AccessCodesDeleteSingleAccessCodesInternalServerErrorBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AccessCodesDeleteSingleAccessCodesInternalServerErrorBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AccessCodesDeleteSingleAccessCodesInternalServerErrorBodyError) UnmarshalBinary(b []byte) error {
	var res AccessCodesDeleteSingleAccessCodesInternalServerErrorBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
