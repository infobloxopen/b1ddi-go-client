// Code generated by go-swagger; DO NOT EDIT.

package category_filters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/infobloxopen/b1ddi-go-client/models"
)

// CategoryFiltersReadCategoryFilterReader is a Reader for the CategoryFiltersReadCategoryFilter structure.
type CategoryFiltersReadCategoryFilterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CategoryFiltersReadCategoryFilterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCategoryFiltersReadCategoryFilterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewCategoryFiltersReadCategoryFilterNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCategoryFiltersReadCategoryFilterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /category_filters/{id}] category_filtersReadCategoryFilter", response, response.Code())
	}
}

// NewCategoryFiltersReadCategoryFilterOK creates a CategoryFiltersReadCategoryFilterOK with default headers values
func NewCategoryFiltersReadCategoryFilterOK() *CategoryFiltersReadCategoryFilterOK {
	return &CategoryFiltersReadCategoryFilterOK{}
}

/*
CategoryFiltersReadCategoryFilterOK describes a response with status code 200, with default header values.

GET operation response
*/
type CategoryFiltersReadCategoryFilterOK struct {
	Payload *models.AtcfwCategoryFilterReadResponse
}

// IsSuccess returns true when this category filters read category filter o k response has a 2xx status code
func (o *CategoryFiltersReadCategoryFilterOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this category filters read category filter o k response has a 3xx status code
func (o *CategoryFiltersReadCategoryFilterOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this category filters read category filter o k response has a 4xx status code
func (o *CategoryFiltersReadCategoryFilterOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this category filters read category filter o k response has a 5xx status code
func (o *CategoryFiltersReadCategoryFilterOK) IsServerError() bool {
	return false
}

// IsCode returns true when this category filters read category filter o k response a status code equal to that given
func (o *CategoryFiltersReadCategoryFilterOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the category filters read category filter o k response
func (o *CategoryFiltersReadCategoryFilterOK) Code() int {
	return 200
}

func (o *CategoryFiltersReadCategoryFilterOK) Error() string {
	return fmt.Sprintf("[GET /category_filters/{id}][%d] categoryFiltersReadCategoryFilterOK  %+v", 200, o.Payload)
}

func (o *CategoryFiltersReadCategoryFilterOK) String() string {
	return fmt.Sprintf("[GET /category_filters/{id}][%d] categoryFiltersReadCategoryFilterOK  %+v", 200, o.Payload)
}

func (o *CategoryFiltersReadCategoryFilterOK) GetPayload() *models.AtcfwCategoryFilterReadResponse {
	return o.Payload
}

func (o *CategoryFiltersReadCategoryFilterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AtcfwCategoryFilterReadResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCategoryFiltersReadCategoryFilterNotFound creates a CategoryFiltersReadCategoryFilterNotFound with default headers values
func NewCategoryFiltersReadCategoryFilterNotFound() *CategoryFiltersReadCategoryFilterNotFound {
	return &CategoryFiltersReadCategoryFilterNotFound{}
}

/*
	CategoryFiltersReadCategoryFilterNotFound describes a response with status code 404, with default header values.

- 'id' value must contain existing category filter identifier
*/
type CategoryFiltersReadCategoryFilterNotFound struct {
	Payload *CategoryFiltersReadCategoryFilterNotFoundBody
}

// IsSuccess returns true when this category filters read category filter not found response has a 2xx status code
func (o *CategoryFiltersReadCategoryFilterNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this category filters read category filter not found response has a 3xx status code
func (o *CategoryFiltersReadCategoryFilterNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this category filters read category filter not found response has a 4xx status code
func (o *CategoryFiltersReadCategoryFilterNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this category filters read category filter not found response has a 5xx status code
func (o *CategoryFiltersReadCategoryFilterNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this category filters read category filter not found response a status code equal to that given
func (o *CategoryFiltersReadCategoryFilterNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the category filters read category filter not found response
func (o *CategoryFiltersReadCategoryFilterNotFound) Code() int {
	return 404
}

func (o *CategoryFiltersReadCategoryFilterNotFound) Error() string {
	return fmt.Sprintf("[GET /category_filters/{id}][%d] categoryFiltersReadCategoryFilterNotFound  %+v", 404, o.Payload)
}

func (o *CategoryFiltersReadCategoryFilterNotFound) String() string {
	return fmt.Sprintf("[GET /category_filters/{id}][%d] categoryFiltersReadCategoryFilterNotFound  %+v", 404, o.Payload)
}

func (o *CategoryFiltersReadCategoryFilterNotFound) GetPayload() *CategoryFiltersReadCategoryFilterNotFoundBody {
	return o.Payload
}

func (o *CategoryFiltersReadCategoryFilterNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CategoryFiltersReadCategoryFilterNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCategoryFiltersReadCategoryFilterInternalServerError creates a CategoryFiltersReadCategoryFilterInternalServerError with default headers values
func NewCategoryFiltersReadCategoryFilterInternalServerError() *CategoryFiltersReadCategoryFilterInternalServerError {
	return &CategoryFiltersReadCategoryFilterInternalServerError{}
}

/*
	CategoryFiltersReadCategoryFilterInternalServerError describes a response with status code 500, with default header values.

- Internal server error occurred
*/
type CategoryFiltersReadCategoryFilterInternalServerError struct {
	Payload *CategoryFiltersReadCategoryFilterInternalServerErrorBody
}

// IsSuccess returns true when this category filters read category filter internal server error response has a 2xx status code
func (o *CategoryFiltersReadCategoryFilterInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this category filters read category filter internal server error response has a 3xx status code
func (o *CategoryFiltersReadCategoryFilterInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this category filters read category filter internal server error response has a 4xx status code
func (o *CategoryFiltersReadCategoryFilterInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this category filters read category filter internal server error response has a 5xx status code
func (o *CategoryFiltersReadCategoryFilterInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this category filters read category filter internal server error response a status code equal to that given
func (o *CategoryFiltersReadCategoryFilterInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the category filters read category filter internal server error response
func (o *CategoryFiltersReadCategoryFilterInternalServerError) Code() int {
	return 500
}

func (o *CategoryFiltersReadCategoryFilterInternalServerError) Error() string {
	return fmt.Sprintf("[GET /category_filters/{id}][%d] categoryFiltersReadCategoryFilterInternalServerError  %+v", 500, o.Payload)
}

func (o *CategoryFiltersReadCategoryFilterInternalServerError) String() string {
	return fmt.Sprintf("[GET /category_filters/{id}][%d] categoryFiltersReadCategoryFilterInternalServerError  %+v", 500, o.Payload)
}

func (o *CategoryFiltersReadCategoryFilterInternalServerError) GetPayload() *CategoryFiltersReadCategoryFilterInternalServerErrorBody {
	return o.Payload
}

func (o *CategoryFiltersReadCategoryFilterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CategoryFiltersReadCategoryFilterInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CategoryFiltersReadCategoryFilterInternalServerErrorBody category filters read category filter internal server error body
swagger:model CategoryFiltersReadCategoryFilterInternalServerErrorBody
*/
type CategoryFiltersReadCategoryFilterInternalServerErrorBody struct {

	// error
	Error *CategoryFiltersReadCategoryFilterInternalServerErrorBodyError `json:"error,omitempty"`
}

// Validate validates this category filters read category filter internal server error body
func (o *CategoryFiltersReadCategoryFilterInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CategoryFiltersReadCategoryFilterInternalServerErrorBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("categoryFiltersReadCategoryFilterInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("categoryFiltersReadCategoryFilterInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this category filters read category filter internal server error body based on the context it is used
func (o *CategoryFiltersReadCategoryFilterInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CategoryFiltersReadCategoryFilterInternalServerErrorBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("categoryFiltersReadCategoryFilterInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("categoryFiltersReadCategoryFilterInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CategoryFiltersReadCategoryFilterInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CategoryFiltersReadCategoryFilterInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res CategoryFiltersReadCategoryFilterInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CategoryFiltersReadCategoryFilterInternalServerErrorBodyError category filters read category filter internal server error body error
swagger:model CategoryFiltersReadCategoryFilterInternalServerErrorBodyError
*/
type CategoryFiltersReadCategoryFilterInternalServerErrorBodyError struct {

	// code
	// Example: INTERNAL
	Code string `json:"code,omitempty"`

	// message
	// Example: Internal Server Error
	Message string `json:"message,omitempty"`

	// status
	// Example: 500
	Status string `json:"status,omitempty"`
}

// Validate validates this category filters read category filter internal server error body error
func (o *CategoryFiltersReadCategoryFilterInternalServerErrorBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this category filters read category filter internal server error body error based on context it is used
func (o *CategoryFiltersReadCategoryFilterInternalServerErrorBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CategoryFiltersReadCategoryFilterInternalServerErrorBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CategoryFiltersReadCategoryFilterInternalServerErrorBodyError) UnmarshalBinary(b []byte) error {
	var res CategoryFiltersReadCategoryFilterInternalServerErrorBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CategoryFiltersReadCategoryFilterNotFoundBody category filters read category filter not found body
swagger:model CategoryFiltersReadCategoryFilterNotFoundBody
*/
type CategoryFiltersReadCategoryFilterNotFoundBody struct {

	// error
	Error *CategoryFiltersReadCategoryFilterNotFoundBodyError `json:"error,omitempty"`
}

// Validate validates this category filters read category filter not found body
func (o *CategoryFiltersReadCategoryFilterNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CategoryFiltersReadCategoryFilterNotFoundBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("categoryFiltersReadCategoryFilterNotFound" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("categoryFiltersReadCategoryFilterNotFound" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this category filters read category filter not found body based on the context it is used
func (o *CategoryFiltersReadCategoryFilterNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CategoryFiltersReadCategoryFilterNotFoundBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("categoryFiltersReadCategoryFilterNotFound" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("categoryFiltersReadCategoryFilterNotFound" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CategoryFiltersReadCategoryFilterNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CategoryFiltersReadCategoryFilterNotFoundBody) UnmarshalBinary(b []byte) error {
	var res CategoryFiltersReadCategoryFilterNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CategoryFiltersReadCategoryFilterNotFoundBodyError category filters read category filter not found body error
swagger:model CategoryFiltersReadCategoryFilterNotFoundBodyError
*/
type CategoryFiltersReadCategoryFilterNotFoundBodyError struct {

	// code
	// Example: NOT_FOUND
	Code string `json:"code,omitempty"`

	// message
	// Example: Category Filter does not exist
	Message string `json:"message,omitempty"`

	// status
	// Example: 404
	Status string `json:"status,omitempty"`
}

// Validate validates this category filters read category filter not found body error
func (o *CategoryFiltersReadCategoryFilterNotFoundBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this category filters read category filter not found body error based on context it is used
func (o *CategoryFiltersReadCategoryFilterNotFoundBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CategoryFiltersReadCategoryFilterNotFoundBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CategoryFiltersReadCategoryFilterNotFoundBodyError) UnmarshalBinary(b []byte) error {
	var res CategoryFiltersReadCategoryFilterNotFoundBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
