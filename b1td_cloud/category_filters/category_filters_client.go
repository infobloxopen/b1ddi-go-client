// Code generated by go-swagger; DO NOT EDIT.

package category_filters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new category filters API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for category filters API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CategoryFiltersCreateCategoryFilter(params *CategoryFiltersCreateCategoryFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CategoryFiltersCreateCategoryFilterCreated, error)

	CategoryFiltersDeleteCategoryFilters(params *CategoryFiltersDeleteCategoryFiltersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CategoryFiltersDeleteCategoryFiltersNoContent, error)

	CategoryFiltersDeleteSingleCategoryFilters(params *CategoryFiltersDeleteSingleCategoryFiltersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CategoryFiltersDeleteSingleCategoryFiltersNoContent, error)

	CategoryFiltersListCategoryFilters(params *CategoryFiltersListCategoryFiltersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CategoryFiltersListCategoryFiltersOK, error)

	CategoryFiltersReadCategoryFilter(params *CategoryFiltersReadCategoryFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CategoryFiltersReadCategoryFilterOK, error)

	CategoryFiltersUpdateCategoryFilter(params *CategoryFiltersUpdateCategoryFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CategoryFiltersUpdateCategoryFilterCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	CategoryFiltersCreateCategoryFilter creates category filter

	Use this method to create a Category Filter object.

Category filters are content categorization rules that BloxOne Cloud uses to detect and filter specific internet content. Based on your configuration, specific actions such as Allow or Block, will be taken on the detected content. BloxOne Cloud provides the following content categories from which you can build your category filters: Drugs, Risk/Fraud/Crime, Entertainment/Culture, Purchasing, Information/Communication, Business/Services, Information Technology, Lifestyle, Society/Education/Religion, Mature/Violent, Games/Gambling, Pornography/Nudity and Uncategorized. Each of these categories contains sub-categories that further define the respective content. When you configure your category filter, you can add as many sub-categories as you need. You then add the category filter to your security policy and assign the Block action for the filter.

Required:
- name
- categories
*/
func (a *Client) CategoryFiltersCreateCategoryFilter(params *CategoryFiltersCreateCategoryFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CategoryFiltersCreateCategoryFilterCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCategoryFiltersCreateCategoryFilterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "category_filtersCreateCategoryFilter",
		Method:             "POST",
		PathPattern:        "/category_filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CategoryFiltersCreateCategoryFilterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CategoryFiltersCreateCategoryFilterCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for category_filtersCreateCategoryFilter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CategoryFiltersDeleteCategoryFilters deletes category filters by ID

	Use this method to delete Category Filter object.

Category filters are content categorization rules that BloxOne Cloud uses to detect and filter specific internet content. Based on your configuration, specific actions such as Allow or Block, will be taken on the detected content. BloxOne Cloud provides the following content categories from which you can build your category filters: Drugs, Risk/Fraud/Crime, Entertainment/Culture, Purchasing, Information/Communication, Business/Services, Information Technology, Lifestyle, Society/Education/Religion, Mature/Violent, Games/Gambling, Pornography/Nudity and Uncategorized. Each of these categories contains sub-categories that further define the respective content. When you configure your category filter, you can add as many sub-categories as you need. You then add the category filter to your security policy and assign the Block action for the filter.

Required:
- ids
*/
func (a *Client) CategoryFiltersDeleteCategoryFilters(params *CategoryFiltersDeleteCategoryFiltersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CategoryFiltersDeleteCategoryFiltersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCategoryFiltersDeleteCategoryFiltersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "category_filtersDeleteCategoryFilters",
		Method:             "DELETE",
		PathPattern:        "/category_filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CategoryFiltersDeleteCategoryFiltersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CategoryFiltersDeleteCategoryFiltersNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for category_filtersDeleteCategoryFilters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CategoryFiltersDeleteSingleCategoryFilters deletes category filters

	Use this method to delete Category Filter objects.

Category filters are content categorization rules that BloxOne Cloud uses to detect and filter specific internet content. Based on your configuration, specific actions such as Allow or Block, will be taken on the detected content. BloxOne Cloud provides the following content categories from which you can build your category filters: Drugs, Risk/Fraud/Crime, Entertainment/Culture, Purchasing, Information/Communication, Business/Services, Information Technology, Lifestyle, Society/Education/Religion, Mature/Violent, Games/Gambling, Pornography/Nudity and Uncategorized. Each of these categories contains sub-categories that further define the respective content. When you configure your category filter, you can add as many sub-categories as you need. You then add the category filter to your security policy and assign the Block action for the filter.
*/
func (a *Client) CategoryFiltersDeleteSingleCategoryFilters(params *CategoryFiltersDeleteSingleCategoryFiltersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CategoryFiltersDeleteSingleCategoryFiltersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCategoryFiltersDeleteSingleCategoryFiltersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "category_filtersDeleteSingleCategoryFilters",
		Method:             "DELETE",
		PathPattern:        "/category_filters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CategoryFiltersDeleteSingleCategoryFiltersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CategoryFiltersDeleteSingleCategoryFiltersNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for category_filtersDeleteSingleCategoryFilters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CategoryFiltersListCategoryFilters lists category filters

	Use this method to retrieve information on all Category Filter objects for the account.

Category filters are content categorization rules that BloxOne Cloud uses to detect and filter specific internet content. Based on your configuration, specific actions such as Allow or Block, will be taken on the detected content. BloxOne Cloud provides the following content categories from which you can build your category filters: Drugs, Risk/Fraud/Crime, Entertainment/Culture, Purchasing, Information/Communication, Business/Services, Information Technology, Lifestyle, Society/Education/Religion, Mature/Violent, Games/Gambling, Pornography/Nudity and Uncategorized. Each of these categories contains sub-categories that further define the respective content. When you configure your category filter, you can add as many sub-categories as you need. You then add the category filter to your security policy and assign the Block action for the filter.
*/
func (a *Client) CategoryFiltersListCategoryFilters(params *CategoryFiltersListCategoryFiltersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CategoryFiltersListCategoryFiltersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCategoryFiltersListCategoryFiltersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "category_filtersListCategoryFilters",
		Method:             "GET",
		PathPattern:        "/category_filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CategoryFiltersListCategoryFiltersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CategoryFiltersListCategoryFiltersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for category_filtersListCategoryFilters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CategoryFiltersReadCategoryFilter reads category filter

	Use this method to retrieve information on the specified Category Filter object.

Category filters are content categorization rules that BloxOne Cloud uses to detect and filter specific internet content. Based on your configuration, specific actions such as Allow or Block, will be taken on the detected content. BloxOne Cloud provides the following content categories from which you can build your category filters: Drugs, Risk/Fraud/Crime, Entertainment/Culture, Purchasing, Information/Communication, Business/Services, Information Technology, Lifestyle, Society/Education/Religion, Mature/Violent, Games/Gambling, Pornography/Nudity and Uncategorized. Each of these categories contains sub-categories that further define the respective content. When you configure your category filter, you can add as many sub-categories as you need. You then add the category filter to your security policy and assign the Block action for the filter.
*/
func (a *Client) CategoryFiltersReadCategoryFilter(params *CategoryFiltersReadCategoryFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CategoryFiltersReadCategoryFilterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCategoryFiltersReadCategoryFilterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "category_filtersReadCategoryFilter",
		Method:             "GET",
		PathPattern:        "/category_filters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CategoryFiltersReadCategoryFilterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CategoryFiltersReadCategoryFilterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for category_filtersReadCategoryFilter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CategoryFiltersUpdateCategoryFilter updates category filter

	Use this method to update the specified Category Filter object.

Category filters are content categorization rules that BloxOne Cloud uses to detect and filter specific internet content. Based on your configuration, specific actions such as Allow or Block, will be taken on the detected content. BloxOne Cloud provides the following content categories from which you can build your category filters: Drugs, Risk/Fraud/Crime, Entertainment/Culture, Purchasing, Information/Communication, Business/Services, Information Technology, Lifestyle, Society/Education/Religion, Mature/Violent, Games/Gambling, Pornography/Nudity and Uncategorized. Each of these categories contains sub-categories that further define the respective content. When you configure your category filter, you can add as many sub-categories as you need. You then add the category filter to your security policy and assign the Block action for the filter.

Required:
- name
- categories
*/
func (a *Client) CategoryFiltersUpdateCategoryFilter(params *CategoryFiltersUpdateCategoryFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CategoryFiltersUpdateCategoryFilterCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCategoryFiltersUpdateCategoryFilterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "category_filtersUpdateCategoryFilter",
		Method:             "PUT",
		PathPattern:        "/category_filters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CategoryFiltersUpdateCategoryFilterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CategoryFiltersUpdateCategoryFilterCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for category_filtersUpdateCategoryFilter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
