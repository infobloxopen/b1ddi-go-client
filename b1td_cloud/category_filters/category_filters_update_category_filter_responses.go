// Code generated by go-swagger; DO NOT EDIT.

package category_filters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/infobloxopen/b1ddi-go-client/models"
)

// CategoryFiltersUpdateCategoryFilterReader is a Reader for the CategoryFiltersUpdateCategoryFilter structure.
type CategoryFiltersUpdateCategoryFilterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CategoryFiltersUpdateCategoryFilterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCategoryFiltersUpdateCategoryFilterCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCategoryFiltersUpdateCategoryFilterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCategoryFiltersUpdateCategoryFilterNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCategoryFiltersUpdateCategoryFilterConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCategoryFiltersUpdateCategoryFilterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /category_filters/{id}] category_filtersUpdateCategoryFilter", response, response.Code())
	}
}

// NewCategoryFiltersUpdateCategoryFilterCreated creates a CategoryFiltersUpdateCategoryFilterCreated with default headers values
func NewCategoryFiltersUpdateCategoryFilterCreated() *CategoryFiltersUpdateCategoryFilterCreated {
	return &CategoryFiltersUpdateCategoryFilterCreated{}
}

/*
CategoryFiltersUpdateCategoryFilterCreated describes a response with status code 201, with default header values.

PUT operation response
*/
type CategoryFiltersUpdateCategoryFilterCreated struct {
	Payload *models.AtcfwCategoryFilterUpdateResponse
}

// IsSuccess returns true when this category filters update category filter created response has a 2xx status code
func (o *CategoryFiltersUpdateCategoryFilterCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this category filters update category filter created response has a 3xx status code
func (o *CategoryFiltersUpdateCategoryFilterCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this category filters update category filter created response has a 4xx status code
func (o *CategoryFiltersUpdateCategoryFilterCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this category filters update category filter created response has a 5xx status code
func (o *CategoryFiltersUpdateCategoryFilterCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this category filters update category filter created response a status code equal to that given
func (o *CategoryFiltersUpdateCategoryFilterCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the category filters update category filter created response
func (o *CategoryFiltersUpdateCategoryFilterCreated) Code() int {
	return 201
}

func (o *CategoryFiltersUpdateCategoryFilterCreated) Error() string {
	return fmt.Sprintf("[PUT /category_filters/{id}][%d] categoryFiltersUpdateCategoryFilterCreated  %+v", 201, o.Payload)
}

func (o *CategoryFiltersUpdateCategoryFilterCreated) String() string {
	return fmt.Sprintf("[PUT /category_filters/{id}][%d] categoryFiltersUpdateCategoryFilterCreated  %+v", 201, o.Payload)
}

func (o *CategoryFiltersUpdateCategoryFilterCreated) GetPayload() *models.AtcfwCategoryFilterUpdateResponse {
	return o.Payload
}

func (o *CategoryFiltersUpdateCategoryFilterCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AtcfwCategoryFilterUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCategoryFiltersUpdateCategoryFilterBadRequest creates a CategoryFiltersUpdateCategoryFilterBadRequest with default headers values
func NewCategoryFiltersUpdateCategoryFilterBadRequest() *CategoryFiltersUpdateCategoryFilterBadRequest {
	return &CategoryFiltersUpdateCategoryFilterBadRequest{}
}

/*
	CategoryFiltersUpdateCategoryFilterBadRequest describes a response with status code 400, with default header values.

- 'name' value must not be empty
- 'name' length cannot exceed 256 characters limit
- 'description' length cannot exceed 256 characters limit
- 'categories' value must not be empty
- 'categories' value must contain existing content categories
*/
type CategoryFiltersUpdateCategoryFilterBadRequest struct {
	Payload *CategoryFiltersUpdateCategoryFilterBadRequestBody
}

// IsSuccess returns true when this category filters update category filter bad request response has a 2xx status code
func (o *CategoryFiltersUpdateCategoryFilterBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this category filters update category filter bad request response has a 3xx status code
func (o *CategoryFiltersUpdateCategoryFilterBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this category filters update category filter bad request response has a 4xx status code
func (o *CategoryFiltersUpdateCategoryFilterBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this category filters update category filter bad request response has a 5xx status code
func (o *CategoryFiltersUpdateCategoryFilterBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this category filters update category filter bad request response a status code equal to that given
func (o *CategoryFiltersUpdateCategoryFilterBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the category filters update category filter bad request response
func (o *CategoryFiltersUpdateCategoryFilterBadRequest) Code() int {
	return 400
}

func (o *CategoryFiltersUpdateCategoryFilterBadRequest) Error() string {
	return fmt.Sprintf("[PUT /category_filters/{id}][%d] categoryFiltersUpdateCategoryFilterBadRequest  %+v", 400, o.Payload)
}

func (o *CategoryFiltersUpdateCategoryFilterBadRequest) String() string {
	return fmt.Sprintf("[PUT /category_filters/{id}][%d] categoryFiltersUpdateCategoryFilterBadRequest  %+v", 400, o.Payload)
}

func (o *CategoryFiltersUpdateCategoryFilterBadRequest) GetPayload() *CategoryFiltersUpdateCategoryFilterBadRequestBody {
	return o.Payload
}

func (o *CategoryFiltersUpdateCategoryFilterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CategoryFiltersUpdateCategoryFilterBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCategoryFiltersUpdateCategoryFilterNotFound creates a CategoryFiltersUpdateCategoryFilterNotFound with default headers values
func NewCategoryFiltersUpdateCategoryFilterNotFound() *CategoryFiltersUpdateCategoryFilterNotFound {
	return &CategoryFiltersUpdateCategoryFilterNotFound{}
}

/*
	CategoryFiltersUpdateCategoryFilterNotFound describes a response with status code 404, with default header values.

- 'id' value must contain existing category filter identifier
*/
type CategoryFiltersUpdateCategoryFilterNotFound struct {
	Payload *CategoryFiltersUpdateCategoryFilterNotFoundBody
}

// IsSuccess returns true when this category filters update category filter not found response has a 2xx status code
func (o *CategoryFiltersUpdateCategoryFilterNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this category filters update category filter not found response has a 3xx status code
func (o *CategoryFiltersUpdateCategoryFilterNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this category filters update category filter not found response has a 4xx status code
func (o *CategoryFiltersUpdateCategoryFilterNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this category filters update category filter not found response has a 5xx status code
func (o *CategoryFiltersUpdateCategoryFilterNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this category filters update category filter not found response a status code equal to that given
func (o *CategoryFiltersUpdateCategoryFilterNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the category filters update category filter not found response
func (o *CategoryFiltersUpdateCategoryFilterNotFound) Code() int {
	return 404
}

func (o *CategoryFiltersUpdateCategoryFilterNotFound) Error() string {
	return fmt.Sprintf("[PUT /category_filters/{id}][%d] categoryFiltersUpdateCategoryFilterNotFound  %+v", 404, o.Payload)
}

func (o *CategoryFiltersUpdateCategoryFilterNotFound) String() string {
	return fmt.Sprintf("[PUT /category_filters/{id}][%d] categoryFiltersUpdateCategoryFilterNotFound  %+v", 404, o.Payload)
}

func (o *CategoryFiltersUpdateCategoryFilterNotFound) GetPayload() *CategoryFiltersUpdateCategoryFilterNotFoundBody {
	return o.Payload
}

func (o *CategoryFiltersUpdateCategoryFilterNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CategoryFiltersUpdateCategoryFilterNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCategoryFiltersUpdateCategoryFilterConflict creates a CategoryFiltersUpdateCategoryFilterConflict with default headers values
func NewCategoryFiltersUpdateCategoryFilterConflict() *CategoryFiltersUpdateCategoryFilterConflict {
	return &CategoryFiltersUpdateCategoryFilterConflict{}
}

/*
	CategoryFiltersUpdateCategoryFilterConflict describes a response with status code 409, with default header values.

- 'name' value must be unique among category filters belonging to the same account
*/
type CategoryFiltersUpdateCategoryFilterConflict struct {
	Payload *CategoryFiltersUpdateCategoryFilterConflictBody
}

// IsSuccess returns true when this category filters update category filter conflict response has a 2xx status code
func (o *CategoryFiltersUpdateCategoryFilterConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this category filters update category filter conflict response has a 3xx status code
func (o *CategoryFiltersUpdateCategoryFilterConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this category filters update category filter conflict response has a 4xx status code
func (o *CategoryFiltersUpdateCategoryFilterConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this category filters update category filter conflict response has a 5xx status code
func (o *CategoryFiltersUpdateCategoryFilterConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this category filters update category filter conflict response a status code equal to that given
func (o *CategoryFiltersUpdateCategoryFilterConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the category filters update category filter conflict response
func (o *CategoryFiltersUpdateCategoryFilterConflict) Code() int {
	return 409
}

func (o *CategoryFiltersUpdateCategoryFilterConflict) Error() string {
	return fmt.Sprintf("[PUT /category_filters/{id}][%d] categoryFiltersUpdateCategoryFilterConflict  %+v", 409, o.Payload)
}

func (o *CategoryFiltersUpdateCategoryFilterConflict) String() string {
	return fmt.Sprintf("[PUT /category_filters/{id}][%d] categoryFiltersUpdateCategoryFilterConflict  %+v", 409, o.Payload)
}

func (o *CategoryFiltersUpdateCategoryFilterConflict) GetPayload() *CategoryFiltersUpdateCategoryFilterConflictBody {
	return o.Payload
}

func (o *CategoryFiltersUpdateCategoryFilterConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CategoryFiltersUpdateCategoryFilterConflictBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCategoryFiltersUpdateCategoryFilterInternalServerError creates a CategoryFiltersUpdateCategoryFilterInternalServerError with default headers values
func NewCategoryFiltersUpdateCategoryFilterInternalServerError() *CategoryFiltersUpdateCategoryFilterInternalServerError {
	return &CategoryFiltersUpdateCategoryFilterInternalServerError{}
}

/*
	CategoryFiltersUpdateCategoryFilterInternalServerError describes a response with status code 500, with default header values.

- Internal server error occurred
*/
type CategoryFiltersUpdateCategoryFilterInternalServerError struct {
	Payload *CategoryFiltersUpdateCategoryFilterInternalServerErrorBody
}

// IsSuccess returns true when this category filters update category filter internal server error response has a 2xx status code
func (o *CategoryFiltersUpdateCategoryFilterInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this category filters update category filter internal server error response has a 3xx status code
func (o *CategoryFiltersUpdateCategoryFilterInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this category filters update category filter internal server error response has a 4xx status code
func (o *CategoryFiltersUpdateCategoryFilterInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this category filters update category filter internal server error response has a 5xx status code
func (o *CategoryFiltersUpdateCategoryFilterInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this category filters update category filter internal server error response a status code equal to that given
func (o *CategoryFiltersUpdateCategoryFilterInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the category filters update category filter internal server error response
func (o *CategoryFiltersUpdateCategoryFilterInternalServerError) Code() int {
	return 500
}

func (o *CategoryFiltersUpdateCategoryFilterInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /category_filters/{id}][%d] categoryFiltersUpdateCategoryFilterInternalServerError  %+v", 500, o.Payload)
}

func (o *CategoryFiltersUpdateCategoryFilterInternalServerError) String() string {
	return fmt.Sprintf("[PUT /category_filters/{id}][%d] categoryFiltersUpdateCategoryFilterInternalServerError  %+v", 500, o.Payload)
}

func (o *CategoryFiltersUpdateCategoryFilterInternalServerError) GetPayload() *CategoryFiltersUpdateCategoryFilterInternalServerErrorBody {
	return o.Payload
}

func (o *CategoryFiltersUpdateCategoryFilterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CategoryFiltersUpdateCategoryFilterInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CategoryFiltersUpdateCategoryFilterBadRequestBody category filters update category filter bad request body
swagger:model CategoryFiltersUpdateCategoryFilterBadRequestBody
*/
type CategoryFiltersUpdateCategoryFilterBadRequestBody struct {

	// error
	Error *CategoryFiltersUpdateCategoryFilterBadRequestBodyError `json:"error,omitempty"`
}

// Validate validates this category filters update category filter bad request body
func (o *CategoryFiltersUpdateCategoryFilterBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CategoryFiltersUpdateCategoryFilterBadRequestBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("categoryFiltersUpdateCategoryFilterBadRequest" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("categoryFiltersUpdateCategoryFilterBadRequest" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this category filters update category filter bad request body based on the context it is used
func (o *CategoryFiltersUpdateCategoryFilterBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CategoryFiltersUpdateCategoryFilterBadRequestBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("categoryFiltersUpdateCategoryFilterBadRequest" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("categoryFiltersUpdateCategoryFilterBadRequest" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CategoryFiltersUpdateCategoryFilterBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CategoryFiltersUpdateCategoryFilterBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CategoryFiltersUpdateCategoryFilterBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CategoryFiltersUpdateCategoryFilterBadRequestBodyError category filters update category filter bad request body error
swagger:model CategoryFiltersUpdateCategoryFilterBadRequestBodyError
*/
type CategoryFiltersUpdateCategoryFilterBadRequestBodyError struct {

	// code
	// Example: INVALID_ARGUMENT
	Code string `json:"code,omitempty"`

	// message
	// Example: 'name' must not be empty
	Message string `json:"message,omitempty"`

	// status
	// Example: 400
	Status string `json:"status,omitempty"`
}

// Validate validates this category filters update category filter bad request body error
func (o *CategoryFiltersUpdateCategoryFilterBadRequestBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this category filters update category filter bad request body error based on context it is used
func (o *CategoryFiltersUpdateCategoryFilterBadRequestBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CategoryFiltersUpdateCategoryFilterBadRequestBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CategoryFiltersUpdateCategoryFilterBadRequestBodyError) UnmarshalBinary(b []byte) error {
	var res CategoryFiltersUpdateCategoryFilterBadRequestBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CategoryFiltersUpdateCategoryFilterConflictBody category filters update category filter conflict body
swagger:model CategoryFiltersUpdateCategoryFilterConflictBody
*/
type CategoryFiltersUpdateCategoryFilterConflictBody struct {

	// error
	Error *CategoryFiltersUpdateCategoryFilterConflictBodyError `json:"error,omitempty"`
}

// Validate validates this category filters update category filter conflict body
func (o *CategoryFiltersUpdateCategoryFilterConflictBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CategoryFiltersUpdateCategoryFilterConflictBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("categoryFiltersUpdateCategoryFilterConflict" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("categoryFiltersUpdateCategoryFilterConflict" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this category filters update category filter conflict body based on the context it is used
func (o *CategoryFiltersUpdateCategoryFilterConflictBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CategoryFiltersUpdateCategoryFilterConflictBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("categoryFiltersUpdateCategoryFilterConflict" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("categoryFiltersUpdateCategoryFilterConflict" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CategoryFiltersUpdateCategoryFilterConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CategoryFiltersUpdateCategoryFilterConflictBody) UnmarshalBinary(b []byte) error {
	var res CategoryFiltersUpdateCategoryFilterConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CategoryFiltersUpdateCategoryFilterConflictBodyError category filters update category filter conflict body error
swagger:model CategoryFiltersUpdateCategoryFilterConflictBodyError
*/
type CategoryFiltersUpdateCategoryFilterConflictBodyError struct {

	// code
	// Example: ALREADY_EXISTS
	Code string `json:"code,omitempty"`

	// message
	// Example: Cannot use duplicate name \"category_filter_a\
	Message string `json:"message,omitempty"`

	// status
	// Example: 409
	Status string `json:"status,omitempty"`
}

// Validate validates this category filters update category filter conflict body error
func (o *CategoryFiltersUpdateCategoryFilterConflictBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this category filters update category filter conflict body error based on context it is used
func (o *CategoryFiltersUpdateCategoryFilterConflictBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CategoryFiltersUpdateCategoryFilterConflictBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CategoryFiltersUpdateCategoryFilterConflictBodyError) UnmarshalBinary(b []byte) error {
	var res CategoryFiltersUpdateCategoryFilterConflictBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CategoryFiltersUpdateCategoryFilterInternalServerErrorBody category filters update category filter internal server error body
swagger:model CategoryFiltersUpdateCategoryFilterInternalServerErrorBody
*/
type CategoryFiltersUpdateCategoryFilterInternalServerErrorBody struct {

	// error
	Error *CategoryFiltersUpdateCategoryFilterInternalServerErrorBodyError `json:"error,omitempty"`
}

// Validate validates this category filters update category filter internal server error body
func (o *CategoryFiltersUpdateCategoryFilterInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CategoryFiltersUpdateCategoryFilterInternalServerErrorBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("categoryFiltersUpdateCategoryFilterInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("categoryFiltersUpdateCategoryFilterInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this category filters update category filter internal server error body based on the context it is used
func (o *CategoryFiltersUpdateCategoryFilterInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CategoryFiltersUpdateCategoryFilterInternalServerErrorBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("categoryFiltersUpdateCategoryFilterInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("categoryFiltersUpdateCategoryFilterInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CategoryFiltersUpdateCategoryFilterInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CategoryFiltersUpdateCategoryFilterInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res CategoryFiltersUpdateCategoryFilterInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CategoryFiltersUpdateCategoryFilterInternalServerErrorBodyError category filters update category filter internal server error body error
swagger:model CategoryFiltersUpdateCategoryFilterInternalServerErrorBodyError
*/
type CategoryFiltersUpdateCategoryFilterInternalServerErrorBodyError struct {

	// code
	// Example: INTERNAL
	Code string `json:"code,omitempty"`

	// message
	// Example: Internal Server Error
	Message string `json:"message,omitempty"`

	// status
	// Example: 500
	Status string `json:"status,omitempty"`
}

// Validate validates this category filters update category filter internal server error body error
func (o *CategoryFiltersUpdateCategoryFilterInternalServerErrorBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this category filters update category filter internal server error body error based on context it is used
func (o *CategoryFiltersUpdateCategoryFilterInternalServerErrorBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CategoryFiltersUpdateCategoryFilterInternalServerErrorBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CategoryFiltersUpdateCategoryFilterInternalServerErrorBodyError) UnmarshalBinary(b []byte) error {
	var res CategoryFiltersUpdateCategoryFilterInternalServerErrorBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CategoryFiltersUpdateCategoryFilterNotFoundBody category filters update category filter not found body
swagger:model CategoryFiltersUpdateCategoryFilterNotFoundBody
*/
type CategoryFiltersUpdateCategoryFilterNotFoundBody struct {

	// error
	Error *CategoryFiltersUpdateCategoryFilterNotFoundBodyError `json:"error,omitempty"`
}

// Validate validates this category filters update category filter not found body
func (o *CategoryFiltersUpdateCategoryFilterNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CategoryFiltersUpdateCategoryFilterNotFoundBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("categoryFiltersUpdateCategoryFilterNotFound" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("categoryFiltersUpdateCategoryFilterNotFound" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this category filters update category filter not found body based on the context it is used
func (o *CategoryFiltersUpdateCategoryFilterNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CategoryFiltersUpdateCategoryFilterNotFoundBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("categoryFiltersUpdateCategoryFilterNotFound" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("categoryFiltersUpdateCategoryFilterNotFound" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CategoryFiltersUpdateCategoryFilterNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CategoryFiltersUpdateCategoryFilterNotFoundBody) UnmarshalBinary(b []byte) error {
	var res CategoryFiltersUpdateCategoryFilterNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CategoryFiltersUpdateCategoryFilterNotFoundBodyError category filters update category filter not found body error
swagger:model CategoryFiltersUpdateCategoryFilterNotFoundBodyError
*/
type CategoryFiltersUpdateCategoryFilterNotFoundBodyError struct {

	// code
	// Example: NOT_FOUND
	Code string `json:"code,omitempty"`

	// message
	// Example: Category Filter does not exist
	Message string `json:"message,omitempty"`

	// status
	// Example: 404
	Status string `json:"status,omitempty"`
}

// Validate validates this category filters update category filter not found body error
func (o *CategoryFiltersUpdateCategoryFilterNotFoundBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this category filters update category filter not found body error based on context it is used
func (o *CategoryFiltersUpdateCategoryFilterNotFoundBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CategoryFiltersUpdateCategoryFilterNotFoundBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CategoryFiltersUpdateCategoryFilterNotFoundBodyError) UnmarshalBinary(b []byte) error {
	var res CategoryFiltersUpdateCategoryFilterNotFoundBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
