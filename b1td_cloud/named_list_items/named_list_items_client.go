// Code generated by go-swagger; DO NOT EDIT.

package named_list_items

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new named list items API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for named list items API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	NamedListItemsDeleteNamedListItems(params *NamedListItemsDeleteNamedListItemsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NamedListItemsDeleteNamedListItemsNoContent, error)

	NamedListItemsInsertOrReplaceNamedListItems(params *NamedListItemsInsertOrReplaceNamedListItemsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NamedListItemsInsertOrReplaceNamedListItemsCreated, error)

	NamedListItemsNamedListItemsPartialUpdate(params *NamedListItemsNamedListItemsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NamedListItemsNamedListItemsPartialUpdateCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	NamedListItemsDeleteNamedListItems deletes named list items

	Use this method to remove items from a specified Named List object. Note that duplicated items are silently skipped and only new items are appended to the named list. Note that DNSM, TI, Fast Flux and DGA lists cannot be updated. Only Custom List items can be deleted.

The Custom List Items represent the list of the FQDN or IPv4 or IPv6 addresses to define whitelists and blacklists for additional protection.

Required:
- items
*/
func (a *Client) NamedListItemsDeleteNamedListItems(params *NamedListItemsDeleteNamedListItemsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NamedListItemsDeleteNamedListItemsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNamedListItemsDeleteNamedListItemsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "named_list_itemsDeleteNamedListItems",
		Method:             "DELETE",
		PathPattern:        "/named_lists/{id}/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NamedListItemsDeleteNamedListItemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NamedListItemsDeleteNamedListItemsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for named_list_itemsDeleteNamedListItems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	NamedListItemsInsertOrReplaceNamedListItems inserts named list items

	Use this method to update existing items with new ones for a specified Named List object. Note that duplicated items are silently skipped and only new items are appended to the named list. Note that DNSM, TI, Fast Flux and DGA lists cannot be updated. Only Custom List items can be updated.

The Custom List Items represent the list of the FQDN or IPv4 addresses to define whitelists and blacklists for additional protection.
*/
func (a *Client) NamedListItemsInsertOrReplaceNamedListItems(params *NamedListItemsInsertOrReplaceNamedListItemsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NamedListItemsInsertOrReplaceNamedListItemsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNamedListItemsInsertOrReplaceNamedListItemsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "named_list_itemsInsertOrReplaceNamedListItems",
		Method:             "POST",
		PathPattern:        "/named_lists/{id}/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NamedListItemsInsertOrReplaceNamedListItemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NamedListItemsInsertOrReplaceNamedListItemsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for named_list_itemsInsertOrReplaceNamedListItems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	NamedListItemsNamedListItemsPartialUpdate partials update named list items

	Use this method to insert ot delete items  for a specified Named List object. Note that duplicated items are silently skipped and only new items are appended to the named list. Note that DNSM, TI, Fast Flux and DGA lists cannot be updated. Only Custom List items can be updated.

The Custom List Items represent the list of the FQDN or IPv4 addresses to define whitelists and blacklists for additional protection.
*/
func (a *Client) NamedListItemsNamedListItemsPartialUpdate(params *NamedListItemsNamedListItemsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NamedListItemsNamedListItemsPartialUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNamedListItemsNamedListItemsPartialUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "named_list_itemsNamedListItemsPartialUpdate",
		Method:             "PATCH",
		PathPattern:        "/named_lists/{id}/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NamedListItemsNamedListItemsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NamedListItemsNamedListItemsPartialUpdateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for named_list_itemsNamedListItemsPartialUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
