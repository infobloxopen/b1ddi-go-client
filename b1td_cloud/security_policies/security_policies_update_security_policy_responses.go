// Code generated by go-swagger; DO NOT EDIT.

package security_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/infobloxopen/b1ddi-go-client/models"
)

// SecurityPoliciesUpdateSecurityPolicyReader is a Reader for the SecurityPoliciesUpdateSecurityPolicy structure.
type SecurityPoliciesUpdateSecurityPolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SecurityPoliciesUpdateSecurityPolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewSecurityPoliciesUpdateSecurityPolicyCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSecurityPoliciesUpdateSecurityPolicyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSecurityPoliciesUpdateSecurityPolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewSecurityPoliciesUpdateSecurityPolicyConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSecurityPoliciesUpdateSecurityPolicyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /security_policies/{id}] security_policiesUpdateSecurityPolicy", response, response.Code())
	}
}

// NewSecurityPoliciesUpdateSecurityPolicyCreated creates a SecurityPoliciesUpdateSecurityPolicyCreated with default headers values
func NewSecurityPoliciesUpdateSecurityPolicyCreated() *SecurityPoliciesUpdateSecurityPolicyCreated {
	return &SecurityPoliciesUpdateSecurityPolicyCreated{}
}

/*
SecurityPoliciesUpdateSecurityPolicyCreated describes a response with status code 201, with default header values.

PUT operation response
*/
type SecurityPoliciesUpdateSecurityPolicyCreated struct {
	Payload *models.AtcfwSecurityPolicyUpdateResponse
}

// IsSuccess returns true when this security policies update security policy created response has a 2xx status code
func (o *SecurityPoliciesUpdateSecurityPolicyCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this security policies update security policy created response has a 3xx status code
func (o *SecurityPoliciesUpdateSecurityPolicyCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this security policies update security policy created response has a 4xx status code
func (o *SecurityPoliciesUpdateSecurityPolicyCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this security policies update security policy created response has a 5xx status code
func (o *SecurityPoliciesUpdateSecurityPolicyCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this security policies update security policy created response a status code equal to that given
func (o *SecurityPoliciesUpdateSecurityPolicyCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the security policies update security policy created response
func (o *SecurityPoliciesUpdateSecurityPolicyCreated) Code() int {
	return 201
}

func (o *SecurityPoliciesUpdateSecurityPolicyCreated) Error() string {
	return fmt.Sprintf("[PUT /security_policies/{id}][%d] securityPoliciesUpdateSecurityPolicyCreated  %+v", 201, o.Payload)
}

func (o *SecurityPoliciesUpdateSecurityPolicyCreated) String() string {
	return fmt.Sprintf("[PUT /security_policies/{id}][%d] securityPoliciesUpdateSecurityPolicyCreated  %+v", 201, o.Payload)
}

func (o *SecurityPoliciesUpdateSecurityPolicyCreated) GetPayload() *models.AtcfwSecurityPolicyUpdateResponse {
	return o.Payload
}

func (o *SecurityPoliciesUpdateSecurityPolicyCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AtcfwSecurityPolicyUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSecurityPoliciesUpdateSecurityPolicyBadRequest creates a SecurityPoliciesUpdateSecurityPolicyBadRequest with default headers values
func NewSecurityPoliciesUpdateSecurityPolicyBadRequest() *SecurityPoliciesUpdateSecurityPolicyBadRequest {
	return &SecurityPoliciesUpdateSecurityPolicyBadRequest{}
}

/*
	SecurityPoliciesUpdateSecurityPolicyBadRequest describes a response with status code 400, with default header values.

- 'name' length cannot exceed 256 characters limit
- 'description' length cannot exceed 256 characters limit
- 'network_lists' must containt existing Network Lists
- 'dfps' must contain existing DNS Forwarding Proxies
- 'roaming_device_groups' must contain existing endpoint devices
- 'network_lists' cannot contain Network Lists that are already assigned to another Security Policy
- Network Lists for the Default Security Policy cannot be updated
- 'dfps' cannot contain DNS Forwarding Proxies that are already assigned to another Security Policy
- DNS Forwarding Proxies for the Default Security Policy cannot be updated
- 'roaming_device_groups' cannot contain endpoint devices that are already assigned to another Security Policy
- endpoint devices for the Default Security Policy cannot be updated
- Threat Feed and TI rules must contain licensed threat feeds and TI lists
- Threat Feed rules must be unique for the Security Policy
*/
type SecurityPoliciesUpdateSecurityPolicyBadRequest struct {
	Payload *SecurityPoliciesUpdateSecurityPolicyBadRequestBody
}

// IsSuccess returns true when this security policies update security policy bad request response has a 2xx status code
func (o *SecurityPoliciesUpdateSecurityPolicyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this security policies update security policy bad request response has a 3xx status code
func (o *SecurityPoliciesUpdateSecurityPolicyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this security policies update security policy bad request response has a 4xx status code
func (o *SecurityPoliciesUpdateSecurityPolicyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this security policies update security policy bad request response has a 5xx status code
func (o *SecurityPoliciesUpdateSecurityPolicyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this security policies update security policy bad request response a status code equal to that given
func (o *SecurityPoliciesUpdateSecurityPolicyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the security policies update security policy bad request response
func (o *SecurityPoliciesUpdateSecurityPolicyBadRequest) Code() int {
	return 400
}

func (o *SecurityPoliciesUpdateSecurityPolicyBadRequest) Error() string {
	return fmt.Sprintf("[PUT /security_policies/{id}][%d] securityPoliciesUpdateSecurityPolicyBadRequest  %+v", 400, o.Payload)
}

func (o *SecurityPoliciesUpdateSecurityPolicyBadRequest) String() string {
	return fmt.Sprintf("[PUT /security_policies/{id}][%d] securityPoliciesUpdateSecurityPolicyBadRequest  %+v", 400, o.Payload)
}

func (o *SecurityPoliciesUpdateSecurityPolicyBadRequest) GetPayload() *SecurityPoliciesUpdateSecurityPolicyBadRequestBody {
	return o.Payload
}

func (o *SecurityPoliciesUpdateSecurityPolicyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SecurityPoliciesUpdateSecurityPolicyBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSecurityPoliciesUpdateSecurityPolicyNotFound creates a SecurityPoliciesUpdateSecurityPolicyNotFound with default headers values
func NewSecurityPoliciesUpdateSecurityPolicyNotFound() *SecurityPoliciesUpdateSecurityPolicyNotFound {
	return &SecurityPoliciesUpdateSecurityPolicyNotFound{}
}

/*
	SecurityPoliciesUpdateSecurityPolicyNotFound describes a response with status code 404, with default header values.

- 'id' value must contain existing security policy identifier
- Threat Feed and TI rules must contain existing threat feeds and TI lists
- Custom Redirect rules must contain existing Custom Redirect
- Custom List rules must contain existing Custom List
*/
type SecurityPoliciesUpdateSecurityPolicyNotFound struct {
	Payload *SecurityPoliciesUpdateSecurityPolicyNotFoundBody
}

// IsSuccess returns true when this security policies update security policy not found response has a 2xx status code
func (o *SecurityPoliciesUpdateSecurityPolicyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this security policies update security policy not found response has a 3xx status code
func (o *SecurityPoliciesUpdateSecurityPolicyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this security policies update security policy not found response has a 4xx status code
func (o *SecurityPoliciesUpdateSecurityPolicyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this security policies update security policy not found response has a 5xx status code
func (o *SecurityPoliciesUpdateSecurityPolicyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this security policies update security policy not found response a status code equal to that given
func (o *SecurityPoliciesUpdateSecurityPolicyNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the security policies update security policy not found response
func (o *SecurityPoliciesUpdateSecurityPolicyNotFound) Code() int {
	return 404
}

func (o *SecurityPoliciesUpdateSecurityPolicyNotFound) Error() string {
	return fmt.Sprintf("[PUT /security_policies/{id}][%d] securityPoliciesUpdateSecurityPolicyNotFound  %+v", 404, o.Payload)
}

func (o *SecurityPoliciesUpdateSecurityPolicyNotFound) String() string {
	return fmt.Sprintf("[PUT /security_policies/{id}][%d] securityPoliciesUpdateSecurityPolicyNotFound  %+v", 404, o.Payload)
}

func (o *SecurityPoliciesUpdateSecurityPolicyNotFound) GetPayload() *SecurityPoliciesUpdateSecurityPolicyNotFoundBody {
	return o.Payload
}

func (o *SecurityPoliciesUpdateSecurityPolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SecurityPoliciesUpdateSecurityPolicyNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSecurityPoliciesUpdateSecurityPolicyConflict creates a SecurityPoliciesUpdateSecurityPolicyConflict with default headers values
func NewSecurityPoliciesUpdateSecurityPolicyConflict() *SecurityPoliciesUpdateSecurityPolicyConflict {
	return &SecurityPoliciesUpdateSecurityPolicyConflict{}
}

/*
	SecurityPoliciesUpdateSecurityPolicyConflict describes a response with status code 409, with default header values.

- 'name' value must be unique among security policies belonging to the same account
*/
type SecurityPoliciesUpdateSecurityPolicyConflict struct {
	Payload *SecurityPoliciesUpdateSecurityPolicyConflictBody
}

// IsSuccess returns true when this security policies update security policy conflict response has a 2xx status code
func (o *SecurityPoliciesUpdateSecurityPolicyConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this security policies update security policy conflict response has a 3xx status code
func (o *SecurityPoliciesUpdateSecurityPolicyConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this security policies update security policy conflict response has a 4xx status code
func (o *SecurityPoliciesUpdateSecurityPolicyConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this security policies update security policy conflict response has a 5xx status code
func (o *SecurityPoliciesUpdateSecurityPolicyConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this security policies update security policy conflict response a status code equal to that given
func (o *SecurityPoliciesUpdateSecurityPolicyConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the security policies update security policy conflict response
func (o *SecurityPoliciesUpdateSecurityPolicyConflict) Code() int {
	return 409
}

func (o *SecurityPoliciesUpdateSecurityPolicyConflict) Error() string {
	return fmt.Sprintf("[PUT /security_policies/{id}][%d] securityPoliciesUpdateSecurityPolicyConflict  %+v", 409, o.Payload)
}

func (o *SecurityPoliciesUpdateSecurityPolicyConflict) String() string {
	return fmt.Sprintf("[PUT /security_policies/{id}][%d] securityPoliciesUpdateSecurityPolicyConflict  %+v", 409, o.Payload)
}

func (o *SecurityPoliciesUpdateSecurityPolicyConflict) GetPayload() *SecurityPoliciesUpdateSecurityPolicyConflictBody {
	return o.Payload
}

func (o *SecurityPoliciesUpdateSecurityPolicyConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SecurityPoliciesUpdateSecurityPolicyConflictBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSecurityPoliciesUpdateSecurityPolicyInternalServerError creates a SecurityPoliciesUpdateSecurityPolicyInternalServerError with default headers values
func NewSecurityPoliciesUpdateSecurityPolicyInternalServerError() *SecurityPoliciesUpdateSecurityPolicyInternalServerError {
	return &SecurityPoliciesUpdateSecurityPolicyInternalServerError{}
}

/*
	SecurityPoliciesUpdateSecurityPolicyInternalServerError describes a response with status code 500, with default header values.

- Internal server error occurred
*/
type SecurityPoliciesUpdateSecurityPolicyInternalServerError struct {
	Payload *SecurityPoliciesUpdateSecurityPolicyInternalServerErrorBody
}

// IsSuccess returns true when this security policies update security policy internal server error response has a 2xx status code
func (o *SecurityPoliciesUpdateSecurityPolicyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this security policies update security policy internal server error response has a 3xx status code
func (o *SecurityPoliciesUpdateSecurityPolicyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this security policies update security policy internal server error response has a 4xx status code
func (o *SecurityPoliciesUpdateSecurityPolicyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this security policies update security policy internal server error response has a 5xx status code
func (o *SecurityPoliciesUpdateSecurityPolicyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this security policies update security policy internal server error response a status code equal to that given
func (o *SecurityPoliciesUpdateSecurityPolicyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the security policies update security policy internal server error response
func (o *SecurityPoliciesUpdateSecurityPolicyInternalServerError) Code() int {
	return 500
}

func (o *SecurityPoliciesUpdateSecurityPolicyInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /security_policies/{id}][%d] securityPoliciesUpdateSecurityPolicyInternalServerError  %+v", 500, o.Payload)
}

func (o *SecurityPoliciesUpdateSecurityPolicyInternalServerError) String() string {
	return fmt.Sprintf("[PUT /security_policies/{id}][%d] securityPoliciesUpdateSecurityPolicyInternalServerError  %+v", 500, o.Payload)
}

func (o *SecurityPoliciesUpdateSecurityPolicyInternalServerError) GetPayload() *SecurityPoliciesUpdateSecurityPolicyInternalServerErrorBody {
	return o.Payload
}

func (o *SecurityPoliciesUpdateSecurityPolicyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SecurityPoliciesUpdateSecurityPolicyInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
SecurityPoliciesUpdateSecurityPolicyBadRequestBody security policies update security policy bad request body
swagger:model SecurityPoliciesUpdateSecurityPolicyBadRequestBody
*/
type SecurityPoliciesUpdateSecurityPolicyBadRequestBody struct {

	// error
	Error *SecurityPoliciesUpdateSecurityPolicyBadRequestBodyError `json:"error,omitempty"`
}

// Validate validates this security policies update security policy bad request body
func (o *SecurityPoliciesUpdateSecurityPolicyBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SecurityPoliciesUpdateSecurityPolicyBadRequestBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityPoliciesUpdateSecurityPolicyBadRequest" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("securityPoliciesUpdateSecurityPolicyBadRequest" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this security policies update security policy bad request body based on the context it is used
func (o *SecurityPoliciesUpdateSecurityPolicyBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SecurityPoliciesUpdateSecurityPolicyBadRequestBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityPoliciesUpdateSecurityPolicyBadRequest" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("securityPoliciesUpdateSecurityPolicyBadRequest" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SecurityPoliciesUpdateSecurityPolicyBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SecurityPoliciesUpdateSecurityPolicyBadRequestBody) UnmarshalBinary(b []byte) error {
	var res SecurityPoliciesUpdateSecurityPolicyBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SecurityPoliciesUpdateSecurityPolicyBadRequestBodyError security policies update security policy bad request body error
swagger:model SecurityPoliciesUpdateSecurityPolicyBadRequestBodyError
*/
type SecurityPoliciesUpdateSecurityPolicyBadRequestBodyError struct {

	// code
	// Example: INVALID_ARGUMENT
	Code string `json:"code,omitempty"`

	// message
	// Example: 'name' length cannot exceed 256 characters limit
	Message string `json:"message,omitempty"`

	// status
	// Example: 400
	Status string `json:"status,omitempty"`
}

// Validate validates this security policies update security policy bad request body error
func (o *SecurityPoliciesUpdateSecurityPolicyBadRequestBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this security policies update security policy bad request body error based on context it is used
func (o *SecurityPoliciesUpdateSecurityPolicyBadRequestBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SecurityPoliciesUpdateSecurityPolicyBadRequestBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SecurityPoliciesUpdateSecurityPolicyBadRequestBodyError) UnmarshalBinary(b []byte) error {
	var res SecurityPoliciesUpdateSecurityPolicyBadRequestBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SecurityPoliciesUpdateSecurityPolicyConflictBody security policies update security policy conflict body
swagger:model SecurityPoliciesUpdateSecurityPolicyConflictBody
*/
type SecurityPoliciesUpdateSecurityPolicyConflictBody struct {

	// error
	Error *SecurityPoliciesUpdateSecurityPolicyConflictBodyError `json:"error,omitempty"`
}

// Validate validates this security policies update security policy conflict body
func (o *SecurityPoliciesUpdateSecurityPolicyConflictBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SecurityPoliciesUpdateSecurityPolicyConflictBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityPoliciesUpdateSecurityPolicyConflict" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("securityPoliciesUpdateSecurityPolicyConflict" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this security policies update security policy conflict body based on the context it is used
func (o *SecurityPoliciesUpdateSecurityPolicyConflictBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SecurityPoliciesUpdateSecurityPolicyConflictBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityPoliciesUpdateSecurityPolicyConflict" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("securityPoliciesUpdateSecurityPolicyConflict" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SecurityPoliciesUpdateSecurityPolicyConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SecurityPoliciesUpdateSecurityPolicyConflictBody) UnmarshalBinary(b []byte) error {
	var res SecurityPoliciesUpdateSecurityPolicyConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SecurityPoliciesUpdateSecurityPolicyConflictBodyError security policies update security policy conflict body error
swagger:model SecurityPoliciesUpdateSecurityPolicyConflictBodyError
*/
type SecurityPoliciesUpdateSecurityPolicyConflictBodyError struct {

	// code
	// Example: ALREADY_EXISTS
	Code string `json:"code,omitempty"`

	// message
	// Example: Security Policy with name 'sec_policy_a' already exists
	Message string `json:"message,omitempty"`

	// status
	// Example: 409
	Status string `json:"status,omitempty"`
}

// Validate validates this security policies update security policy conflict body error
func (o *SecurityPoliciesUpdateSecurityPolicyConflictBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this security policies update security policy conflict body error based on context it is used
func (o *SecurityPoliciesUpdateSecurityPolicyConflictBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SecurityPoliciesUpdateSecurityPolicyConflictBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SecurityPoliciesUpdateSecurityPolicyConflictBodyError) UnmarshalBinary(b []byte) error {
	var res SecurityPoliciesUpdateSecurityPolicyConflictBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SecurityPoliciesUpdateSecurityPolicyInternalServerErrorBody security policies update security policy internal server error body
swagger:model SecurityPoliciesUpdateSecurityPolicyInternalServerErrorBody
*/
type SecurityPoliciesUpdateSecurityPolicyInternalServerErrorBody struct {

	// error
	Error *SecurityPoliciesUpdateSecurityPolicyInternalServerErrorBodyError `json:"error,omitempty"`
}

// Validate validates this security policies update security policy internal server error body
func (o *SecurityPoliciesUpdateSecurityPolicyInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SecurityPoliciesUpdateSecurityPolicyInternalServerErrorBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityPoliciesUpdateSecurityPolicyInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("securityPoliciesUpdateSecurityPolicyInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this security policies update security policy internal server error body based on the context it is used
func (o *SecurityPoliciesUpdateSecurityPolicyInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SecurityPoliciesUpdateSecurityPolicyInternalServerErrorBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityPoliciesUpdateSecurityPolicyInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("securityPoliciesUpdateSecurityPolicyInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SecurityPoliciesUpdateSecurityPolicyInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SecurityPoliciesUpdateSecurityPolicyInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res SecurityPoliciesUpdateSecurityPolicyInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SecurityPoliciesUpdateSecurityPolicyInternalServerErrorBodyError security policies update security policy internal server error body error
swagger:model SecurityPoliciesUpdateSecurityPolicyInternalServerErrorBodyError
*/
type SecurityPoliciesUpdateSecurityPolicyInternalServerErrorBodyError struct {

	// code
	// Example: INTERNAL
	Code string `json:"code,omitempty"`

	// message
	// Example: Internal Server Error
	Message string `json:"message,omitempty"`

	// status
	// Example: 500
	Status string `json:"status,omitempty"`
}

// Validate validates this security policies update security policy internal server error body error
func (o *SecurityPoliciesUpdateSecurityPolicyInternalServerErrorBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this security policies update security policy internal server error body error based on context it is used
func (o *SecurityPoliciesUpdateSecurityPolicyInternalServerErrorBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SecurityPoliciesUpdateSecurityPolicyInternalServerErrorBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SecurityPoliciesUpdateSecurityPolicyInternalServerErrorBodyError) UnmarshalBinary(b []byte) error {
	var res SecurityPoliciesUpdateSecurityPolicyInternalServerErrorBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SecurityPoliciesUpdateSecurityPolicyNotFoundBody security policies update security policy not found body
swagger:model SecurityPoliciesUpdateSecurityPolicyNotFoundBody
*/
type SecurityPoliciesUpdateSecurityPolicyNotFoundBody struct {

	// error
	Error *SecurityPoliciesUpdateSecurityPolicyNotFoundBodyError `json:"error,omitempty"`
}

// Validate validates this security policies update security policy not found body
func (o *SecurityPoliciesUpdateSecurityPolicyNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SecurityPoliciesUpdateSecurityPolicyNotFoundBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityPoliciesUpdateSecurityPolicyNotFound" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("securityPoliciesUpdateSecurityPolicyNotFound" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this security policies update security policy not found body based on the context it is used
func (o *SecurityPoliciesUpdateSecurityPolicyNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SecurityPoliciesUpdateSecurityPolicyNotFoundBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityPoliciesUpdateSecurityPolicyNotFound" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("securityPoliciesUpdateSecurityPolicyNotFound" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SecurityPoliciesUpdateSecurityPolicyNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SecurityPoliciesUpdateSecurityPolicyNotFoundBody) UnmarshalBinary(b []byte) error {
	var res SecurityPoliciesUpdateSecurityPolicyNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SecurityPoliciesUpdateSecurityPolicyNotFoundBodyError security policies update security policy not found body error
swagger:model SecurityPoliciesUpdateSecurityPolicyNotFoundBodyError
*/
type SecurityPoliciesUpdateSecurityPolicyNotFoundBodyError struct {

	// code
	// Example: NOT_FOUND
	Code string `json:"code,omitempty"`

	// message
	// Example: Invalid Rule: List 'custom-list-a.com' not found
	Message string `json:"message,omitempty"`

	// status
	// Example: 404
	Status string `json:"status,omitempty"`
}

// Validate validates this security policies update security policy not found body error
func (o *SecurityPoliciesUpdateSecurityPolicyNotFoundBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this security policies update security policy not found body error based on context it is used
func (o *SecurityPoliciesUpdateSecurityPolicyNotFoundBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SecurityPoliciesUpdateSecurityPolicyNotFoundBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SecurityPoliciesUpdateSecurityPolicyNotFoundBodyError) UnmarshalBinary(b []byte) error {
	var res SecurityPoliciesUpdateSecurityPolicyNotFoundBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
