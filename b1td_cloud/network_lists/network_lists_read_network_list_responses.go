// Code generated by go-swagger; DO NOT EDIT.

package network_lists

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/infobloxopen/b1ddi-go-client/models"
)

// NetworkListsReadNetworkListReader is a Reader for the NetworkListsReadNetworkList structure.
type NetworkListsReadNetworkListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NetworkListsReadNetworkListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewNetworkListsReadNetworkListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewNetworkListsReadNetworkListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewNetworkListsReadNetworkListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /network_lists/{id}] network_listsReadNetworkList", response, response.Code())
	}
}

// NewNetworkListsReadNetworkListOK creates a NetworkListsReadNetworkListOK with default headers values
func NewNetworkListsReadNetworkListOK() *NetworkListsReadNetworkListOK {
	return &NetworkListsReadNetworkListOK{}
}

/*
NetworkListsReadNetworkListOK describes a response with status code 200, with default header values.

GET operation response
*/
type NetworkListsReadNetworkListOK struct {
	Payload *models.AtcfwNetworkListReadResponse
}

// IsSuccess returns true when this network lists read network list o k response has a 2xx status code
func (o *NetworkListsReadNetworkListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this network lists read network list o k response has a 3xx status code
func (o *NetworkListsReadNetworkListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this network lists read network list o k response has a 4xx status code
func (o *NetworkListsReadNetworkListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this network lists read network list o k response has a 5xx status code
func (o *NetworkListsReadNetworkListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this network lists read network list o k response a status code equal to that given
func (o *NetworkListsReadNetworkListOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the network lists read network list o k response
func (o *NetworkListsReadNetworkListOK) Code() int {
	return 200
}

func (o *NetworkListsReadNetworkListOK) Error() string {
	return fmt.Sprintf("[GET /network_lists/{id}][%d] networkListsReadNetworkListOK  %+v", 200, o.Payload)
}

func (o *NetworkListsReadNetworkListOK) String() string {
	return fmt.Sprintf("[GET /network_lists/{id}][%d] networkListsReadNetworkListOK  %+v", 200, o.Payload)
}

func (o *NetworkListsReadNetworkListOK) GetPayload() *models.AtcfwNetworkListReadResponse {
	return o.Payload
}

func (o *NetworkListsReadNetworkListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AtcfwNetworkListReadResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNetworkListsReadNetworkListNotFound creates a NetworkListsReadNetworkListNotFound with default headers values
func NewNetworkListsReadNetworkListNotFound() *NetworkListsReadNetworkListNotFound {
	return &NetworkListsReadNetworkListNotFound{}
}

/*
	NetworkListsReadNetworkListNotFound describes a response with status code 404, with default header values.

- 'id' value must contain existing network list identifier
*/
type NetworkListsReadNetworkListNotFound struct {
	Payload *NetworkListsReadNetworkListNotFoundBody
}

// IsSuccess returns true when this network lists read network list not found response has a 2xx status code
func (o *NetworkListsReadNetworkListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this network lists read network list not found response has a 3xx status code
func (o *NetworkListsReadNetworkListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this network lists read network list not found response has a 4xx status code
func (o *NetworkListsReadNetworkListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this network lists read network list not found response has a 5xx status code
func (o *NetworkListsReadNetworkListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this network lists read network list not found response a status code equal to that given
func (o *NetworkListsReadNetworkListNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the network lists read network list not found response
func (o *NetworkListsReadNetworkListNotFound) Code() int {
	return 404
}

func (o *NetworkListsReadNetworkListNotFound) Error() string {
	return fmt.Sprintf("[GET /network_lists/{id}][%d] networkListsReadNetworkListNotFound  %+v", 404, o.Payload)
}

func (o *NetworkListsReadNetworkListNotFound) String() string {
	return fmt.Sprintf("[GET /network_lists/{id}][%d] networkListsReadNetworkListNotFound  %+v", 404, o.Payload)
}

func (o *NetworkListsReadNetworkListNotFound) GetPayload() *NetworkListsReadNetworkListNotFoundBody {
	return o.Payload
}

func (o *NetworkListsReadNetworkListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NetworkListsReadNetworkListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNetworkListsReadNetworkListInternalServerError creates a NetworkListsReadNetworkListInternalServerError with default headers values
func NewNetworkListsReadNetworkListInternalServerError() *NetworkListsReadNetworkListInternalServerError {
	return &NetworkListsReadNetworkListInternalServerError{}
}

/*
	NetworkListsReadNetworkListInternalServerError describes a response with status code 500, with default header values.

- Internal server error occurred
*/
type NetworkListsReadNetworkListInternalServerError struct {
	Payload *NetworkListsReadNetworkListInternalServerErrorBody
}

// IsSuccess returns true when this network lists read network list internal server error response has a 2xx status code
func (o *NetworkListsReadNetworkListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this network lists read network list internal server error response has a 3xx status code
func (o *NetworkListsReadNetworkListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this network lists read network list internal server error response has a 4xx status code
func (o *NetworkListsReadNetworkListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this network lists read network list internal server error response has a 5xx status code
func (o *NetworkListsReadNetworkListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this network lists read network list internal server error response a status code equal to that given
func (o *NetworkListsReadNetworkListInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the network lists read network list internal server error response
func (o *NetworkListsReadNetworkListInternalServerError) Code() int {
	return 500
}

func (o *NetworkListsReadNetworkListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /network_lists/{id}][%d] networkListsReadNetworkListInternalServerError  %+v", 500, o.Payload)
}

func (o *NetworkListsReadNetworkListInternalServerError) String() string {
	return fmt.Sprintf("[GET /network_lists/{id}][%d] networkListsReadNetworkListInternalServerError  %+v", 500, o.Payload)
}

func (o *NetworkListsReadNetworkListInternalServerError) GetPayload() *NetworkListsReadNetworkListInternalServerErrorBody {
	return o.Payload
}

func (o *NetworkListsReadNetworkListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NetworkListsReadNetworkListInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
NetworkListsReadNetworkListInternalServerErrorBody network lists read network list internal server error body
swagger:model NetworkListsReadNetworkListInternalServerErrorBody
*/
type NetworkListsReadNetworkListInternalServerErrorBody struct {

	// error
	Error *NetworkListsReadNetworkListInternalServerErrorBodyError `json:"error,omitempty"`
}

// Validate validates this network lists read network list internal server error body
func (o *NetworkListsReadNetworkListInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NetworkListsReadNetworkListInternalServerErrorBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkListsReadNetworkListInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkListsReadNetworkListInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this network lists read network list internal server error body based on the context it is used
func (o *NetworkListsReadNetworkListInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NetworkListsReadNetworkListInternalServerErrorBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkListsReadNetworkListInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkListsReadNetworkListInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NetworkListsReadNetworkListInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NetworkListsReadNetworkListInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res NetworkListsReadNetworkListInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NetworkListsReadNetworkListInternalServerErrorBodyError network lists read network list internal server error body error
swagger:model NetworkListsReadNetworkListInternalServerErrorBodyError
*/
type NetworkListsReadNetworkListInternalServerErrorBodyError struct {

	// code
	// Example: INTERNAL
	Code string `json:"code,omitempty"`

	// message
	// Example: Internal Server Error
	Message string `json:"message,omitempty"`

	// status
	// Example: 500
	Status string `json:"status,omitempty"`
}

// Validate validates this network lists read network list internal server error body error
func (o *NetworkListsReadNetworkListInternalServerErrorBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this network lists read network list internal server error body error based on context it is used
func (o *NetworkListsReadNetworkListInternalServerErrorBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NetworkListsReadNetworkListInternalServerErrorBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NetworkListsReadNetworkListInternalServerErrorBodyError) UnmarshalBinary(b []byte) error {
	var res NetworkListsReadNetworkListInternalServerErrorBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NetworkListsReadNetworkListNotFoundBody network lists read network list not found body
swagger:model NetworkListsReadNetworkListNotFoundBody
*/
type NetworkListsReadNetworkListNotFoundBody struct {

	// error
	Error *NetworkListsReadNetworkListNotFoundBodyError `json:"error,omitempty"`
}

// Validate validates this network lists read network list not found body
func (o *NetworkListsReadNetworkListNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NetworkListsReadNetworkListNotFoundBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkListsReadNetworkListNotFound" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkListsReadNetworkListNotFound" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this network lists read network list not found body based on the context it is used
func (o *NetworkListsReadNetworkListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NetworkListsReadNetworkListNotFoundBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkListsReadNetworkListNotFound" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkListsReadNetworkListNotFound" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NetworkListsReadNetworkListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NetworkListsReadNetworkListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res NetworkListsReadNetworkListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NetworkListsReadNetworkListNotFoundBodyError network lists read network list not found body error
swagger:model NetworkListsReadNetworkListNotFoundBodyError
*/
type NetworkListsReadNetworkListNotFoundBodyError struct {

	// code
	// Example: NOT_FOUND
	Code string `json:"code,omitempty"`

	// message
	// Example: Network List does not exist
	Message string `json:"message,omitempty"`

	// status
	// Example: 404
	Status string `json:"status,omitempty"`
}

// Validate validates this network lists read network list not found body error
func (o *NetworkListsReadNetworkListNotFoundBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this network lists read network list not found body error based on context it is used
func (o *NetworkListsReadNetworkListNotFoundBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NetworkListsReadNetworkListNotFoundBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NetworkListsReadNetworkListNotFoundBodyError) UnmarshalBinary(b []byte) error {
	var res NetworkListsReadNetworkListNotFoundBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
