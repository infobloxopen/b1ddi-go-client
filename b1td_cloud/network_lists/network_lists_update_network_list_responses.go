// Code generated by go-swagger; DO NOT EDIT.

package network_lists

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/infobloxopen/b1ddi-go-client/models"
)

// NetworkListsUpdateNetworkListReader is a Reader for the NetworkListsUpdateNetworkList structure.
type NetworkListsUpdateNetworkListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NetworkListsUpdateNetworkListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewNetworkListsUpdateNetworkListCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewNetworkListsUpdateNetworkListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewNetworkListsUpdateNetworkListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewNetworkListsUpdateNetworkListConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewNetworkListsUpdateNetworkListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /network_lists/{id}] network_listsUpdateNetworkList", response, response.Code())
	}
}

// NewNetworkListsUpdateNetworkListCreated creates a NetworkListsUpdateNetworkListCreated with default headers values
func NewNetworkListsUpdateNetworkListCreated() *NetworkListsUpdateNetworkListCreated {
	return &NetworkListsUpdateNetworkListCreated{}
}

/*
NetworkListsUpdateNetworkListCreated describes a response with status code 201, with default header values.

PUT operation response
*/
type NetworkListsUpdateNetworkListCreated struct {
	Payload *models.AtcfwNetworkListUpdateResponse
}

// IsSuccess returns true when this network lists update network list created response has a 2xx status code
func (o *NetworkListsUpdateNetworkListCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this network lists update network list created response has a 3xx status code
func (o *NetworkListsUpdateNetworkListCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this network lists update network list created response has a 4xx status code
func (o *NetworkListsUpdateNetworkListCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this network lists update network list created response has a 5xx status code
func (o *NetworkListsUpdateNetworkListCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this network lists update network list created response a status code equal to that given
func (o *NetworkListsUpdateNetworkListCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the network lists update network list created response
func (o *NetworkListsUpdateNetworkListCreated) Code() int {
	return 201
}

func (o *NetworkListsUpdateNetworkListCreated) Error() string {
	return fmt.Sprintf("[PUT /network_lists/{id}][%d] networkListsUpdateNetworkListCreated  %+v", 201, o.Payload)
}

func (o *NetworkListsUpdateNetworkListCreated) String() string {
	return fmt.Sprintf("[PUT /network_lists/{id}][%d] networkListsUpdateNetworkListCreated  %+v", 201, o.Payload)
}

func (o *NetworkListsUpdateNetworkListCreated) GetPayload() *models.AtcfwNetworkListUpdateResponse {
	return o.Payload
}

func (o *NetworkListsUpdateNetworkListCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AtcfwNetworkListUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNetworkListsUpdateNetworkListBadRequest creates a NetworkListsUpdateNetworkListBadRequest with default headers values
func NewNetworkListsUpdateNetworkListBadRequest() *NetworkListsUpdateNetworkListBadRequest {
	return &NetworkListsUpdateNetworkListBadRequest{}
}

/*
	NetworkListsUpdateNetworkListBadRequest describes a response with status code 400, with default header values.

- 'name' length cannot exceed 256 characters limit
- 'name' value cannot be equal to 'All BloxOne Endpoints (Default)', 'All Networks (Default)', 'All DNS Forwarder Proxies (Default)'
- 'description' length cannot exceed 256 characters limit
- 'items' value must not be empty
- 'items' value must contain valid CIDRs from range [24, 32]
- CIDRs in 'items' cannot overlap with each other and with existing items for all accounts
*/
type NetworkListsUpdateNetworkListBadRequest struct {
	Payload *NetworkListsUpdateNetworkListBadRequestBody
}

// IsSuccess returns true when this network lists update network list bad request response has a 2xx status code
func (o *NetworkListsUpdateNetworkListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this network lists update network list bad request response has a 3xx status code
func (o *NetworkListsUpdateNetworkListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this network lists update network list bad request response has a 4xx status code
func (o *NetworkListsUpdateNetworkListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this network lists update network list bad request response has a 5xx status code
func (o *NetworkListsUpdateNetworkListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this network lists update network list bad request response a status code equal to that given
func (o *NetworkListsUpdateNetworkListBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the network lists update network list bad request response
func (o *NetworkListsUpdateNetworkListBadRequest) Code() int {
	return 400
}

func (o *NetworkListsUpdateNetworkListBadRequest) Error() string {
	return fmt.Sprintf("[PUT /network_lists/{id}][%d] networkListsUpdateNetworkListBadRequest  %+v", 400, o.Payload)
}

func (o *NetworkListsUpdateNetworkListBadRequest) String() string {
	return fmt.Sprintf("[PUT /network_lists/{id}][%d] networkListsUpdateNetworkListBadRequest  %+v", 400, o.Payload)
}

func (o *NetworkListsUpdateNetworkListBadRequest) GetPayload() *NetworkListsUpdateNetworkListBadRequestBody {
	return o.Payload
}

func (o *NetworkListsUpdateNetworkListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NetworkListsUpdateNetworkListBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNetworkListsUpdateNetworkListNotFound creates a NetworkListsUpdateNetworkListNotFound with default headers values
func NewNetworkListsUpdateNetworkListNotFound() *NetworkListsUpdateNetworkListNotFound {
	return &NetworkListsUpdateNetworkListNotFound{}
}

/*
	NetworkListsUpdateNetworkListNotFound describes a response with status code 404, with default header values.

- 'id' value must contain existing network list identifier
*/
type NetworkListsUpdateNetworkListNotFound struct {
	Payload *NetworkListsUpdateNetworkListNotFoundBody
}

// IsSuccess returns true when this network lists update network list not found response has a 2xx status code
func (o *NetworkListsUpdateNetworkListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this network lists update network list not found response has a 3xx status code
func (o *NetworkListsUpdateNetworkListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this network lists update network list not found response has a 4xx status code
func (o *NetworkListsUpdateNetworkListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this network lists update network list not found response has a 5xx status code
func (o *NetworkListsUpdateNetworkListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this network lists update network list not found response a status code equal to that given
func (o *NetworkListsUpdateNetworkListNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the network lists update network list not found response
func (o *NetworkListsUpdateNetworkListNotFound) Code() int {
	return 404
}

func (o *NetworkListsUpdateNetworkListNotFound) Error() string {
	return fmt.Sprintf("[PUT /network_lists/{id}][%d] networkListsUpdateNetworkListNotFound  %+v", 404, o.Payload)
}

func (o *NetworkListsUpdateNetworkListNotFound) String() string {
	return fmt.Sprintf("[PUT /network_lists/{id}][%d] networkListsUpdateNetworkListNotFound  %+v", 404, o.Payload)
}

func (o *NetworkListsUpdateNetworkListNotFound) GetPayload() *NetworkListsUpdateNetworkListNotFoundBody {
	return o.Payload
}

func (o *NetworkListsUpdateNetworkListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NetworkListsUpdateNetworkListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNetworkListsUpdateNetworkListConflict creates a NetworkListsUpdateNetworkListConflict with default headers values
func NewNetworkListsUpdateNetworkListConflict() *NetworkListsUpdateNetworkListConflict {
	return &NetworkListsUpdateNetworkListConflict{}
}

/*
	NetworkListsUpdateNetworkListConflict describes a response with status code 409, with default header values.

- 'name' value must be unique among network lists belonging to the same account
*/
type NetworkListsUpdateNetworkListConflict struct {
	Payload *NetworkListsUpdateNetworkListConflictBody
}

// IsSuccess returns true when this network lists update network list conflict response has a 2xx status code
func (o *NetworkListsUpdateNetworkListConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this network lists update network list conflict response has a 3xx status code
func (o *NetworkListsUpdateNetworkListConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this network lists update network list conflict response has a 4xx status code
func (o *NetworkListsUpdateNetworkListConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this network lists update network list conflict response has a 5xx status code
func (o *NetworkListsUpdateNetworkListConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this network lists update network list conflict response a status code equal to that given
func (o *NetworkListsUpdateNetworkListConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the network lists update network list conflict response
func (o *NetworkListsUpdateNetworkListConflict) Code() int {
	return 409
}

func (o *NetworkListsUpdateNetworkListConflict) Error() string {
	return fmt.Sprintf("[PUT /network_lists/{id}][%d] networkListsUpdateNetworkListConflict  %+v", 409, o.Payload)
}

func (o *NetworkListsUpdateNetworkListConflict) String() string {
	return fmt.Sprintf("[PUT /network_lists/{id}][%d] networkListsUpdateNetworkListConflict  %+v", 409, o.Payload)
}

func (o *NetworkListsUpdateNetworkListConflict) GetPayload() *NetworkListsUpdateNetworkListConflictBody {
	return o.Payload
}

func (o *NetworkListsUpdateNetworkListConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NetworkListsUpdateNetworkListConflictBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNetworkListsUpdateNetworkListInternalServerError creates a NetworkListsUpdateNetworkListInternalServerError with default headers values
func NewNetworkListsUpdateNetworkListInternalServerError() *NetworkListsUpdateNetworkListInternalServerError {
	return &NetworkListsUpdateNetworkListInternalServerError{}
}

/*
	NetworkListsUpdateNetworkListInternalServerError describes a response with status code 500, with default header values.

- Internal server error occurred
*/
type NetworkListsUpdateNetworkListInternalServerError struct {
	Payload *NetworkListsUpdateNetworkListInternalServerErrorBody
}

// IsSuccess returns true when this network lists update network list internal server error response has a 2xx status code
func (o *NetworkListsUpdateNetworkListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this network lists update network list internal server error response has a 3xx status code
func (o *NetworkListsUpdateNetworkListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this network lists update network list internal server error response has a 4xx status code
func (o *NetworkListsUpdateNetworkListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this network lists update network list internal server error response has a 5xx status code
func (o *NetworkListsUpdateNetworkListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this network lists update network list internal server error response a status code equal to that given
func (o *NetworkListsUpdateNetworkListInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the network lists update network list internal server error response
func (o *NetworkListsUpdateNetworkListInternalServerError) Code() int {
	return 500
}

func (o *NetworkListsUpdateNetworkListInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /network_lists/{id}][%d] networkListsUpdateNetworkListInternalServerError  %+v", 500, o.Payload)
}

func (o *NetworkListsUpdateNetworkListInternalServerError) String() string {
	return fmt.Sprintf("[PUT /network_lists/{id}][%d] networkListsUpdateNetworkListInternalServerError  %+v", 500, o.Payload)
}

func (o *NetworkListsUpdateNetworkListInternalServerError) GetPayload() *NetworkListsUpdateNetworkListInternalServerErrorBody {
	return o.Payload
}

func (o *NetworkListsUpdateNetworkListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NetworkListsUpdateNetworkListInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
NetworkListsUpdateNetworkListBadRequestBody network lists update network list bad request body
swagger:model NetworkListsUpdateNetworkListBadRequestBody
*/
type NetworkListsUpdateNetworkListBadRequestBody struct {

	// error
	Error *NetworkListsUpdateNetworkListBadRequestBodyError `json:"error,omitempty"`
}

// Validate validates this network lists update network list bad request body
func (o *NetworkListsUpdateNetworkListBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NetworkListsUpdateNetworkListBadRequestBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkListsUpdateNetworkListBadRequest" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkListsUpdateNetworkListBadRequest" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this network lists update network list bad request body based on the context it is used
func (o *NetworkListsUpdateNetworkListBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NetworkListsUpdateNetworkListBadRequestBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkListsUpdateNetworkListBadRequest" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkListsUpdateNetworkListBadRequest" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NetworkListsUpdateNetworkListBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NetworkListsUpdateNetworkListBadRequestBody) UnmarshalBinary(b []byte) error {
	var res NetworkListsUpdateNetworkListBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NetworkListsUpdateNetworkListBadRequestBodyError network lists update network list bad request body error
swagger:model NetworkListsUpdateNetworkListBadRequestBodyError
*/
type NetworkListsUpdateNetworkListBadRequestBodyError struct {

	// code
	// Example: INVALID_ARGUMENT
	Code string `json:"code,omitempty"`

	// message
	// Example: 'name' must not be empty
	Message string `json:"message,omitempty"`

	// status
	// Example: 400
	Status string `json:"status,omitempty"`
}

// Validate validates this network lists update network list bad request body error
func (o *NetworkListsUpdateNetworkListBadRequestBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this network lists update network list bad request body error based on context it is used
func (o *NetworkListsUpdateNetworkListBadRequestBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NetworkListsUpdateNetworkListBadRequestBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NetworkListsUpdateNetworkListBadRequestBodyError) UnmarshalBinary(b []byte) error {
	var res NetworkListsUpdateNetworkListBadRequestBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NetworkListsUpdateNetworkListConflictBody network lists update network list conflict body
swagger:model NetworkListsUpdateNetworkListConflictBody
*/
type NetworkListsUpdateNetworkListConflictBody struct {

	// error
	Error *NetworkListsUpdateNetworkListConflictBodyError `json:"error,omitempty"`
}

// Validate validates this network lists update network list conflict body
func (o *NetworkListsUpdateNetworkListConflictBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NetworkListsUpdateNetworkListConflictBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkListsUpdateNetworkListConflict" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkListsUpdateNetworkListConflict" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this network lists update network list conflict body based on the context it is used
func (o *NetworkListsUpdateNetworkListConflictBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NetworkListsUpdateNetworkListConflictBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkListsUpdateNetworkListConflict" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkListsUpdateNetworkListConflict" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NetworkListsUpdateNetworkListConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NetworkListsUpdateNetworkListConflictBody) UnmarshalBinary(b []byte) error {
	var res NetworkListsUpdateNetworkListConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NetworkListsUpdateNetworkListConflictBodyError network lists update network list conflict body error
swagger:model NetworkListsUpdateNetworkListConflictBodyError
*/
type NetworkListsUpdateNetworkListConflictBodyError struct {

	// code
	// Example: ALREADY_EXISTS
	Code string `json:"code,omitempty"`

	// message
	// Example: Cannot use duplicate name \"network_list_a\
	Message string `json:"message,omitempty"`

	// status
	// Example: 409
	Status string `json:"status,omitempty"`
}

// Validate validates this network lists update network list conflict body error
func (o *NetworkListsUpdateNetworkListConflictBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this network lists update network list conflict body error based on context it is used
func (o *NetworkListsUpdateNetworkListConflictBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NetworkListsUpdateNetworkListConflictBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NetworkListsUpdateNetworkListConflictBodyError) UnmarshalBinary(b []byte) error {
	var res NetworkListsUpdateNetworkListConflictBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NetworkListsUpdateNetworkListInternalServerErrorBody network lists update network list internal server error body
swagger:model NetworkListsUpdateNetworkListInternalServerErrorBody
*/
type NetworkListsUpdateNetworkListInternalServerErrorBody struct {

	// error
	Error *NetworkListsUpdateNetworkListInternalServerErrorBodyError `json:"error,omitempty"`
}

// Validate validates this network lists update network list internal server error body
func (o *NetworkListsUpdateNetworkListInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NetworkListsUpdateNetworkListInternalServerErrorBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkListsUpdateNetworkListInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkListsUpdateNetworkListInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this network lists update network list internal server error body based on the context it is used
func (o *NetworkListsUpdateNetworkListInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NetworkListsUpdateNetworkListInternalServerErrorBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkListsUpdateNetworkListInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkListsUpdateNetworkListInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NetworkListsUpdateNetworkListInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NetworkListsUpdateNetworkListInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res NetworkListsUpdateNetworkListInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NetworkListsUpdateNetworkListInternalServerErrorBodyError network lists update network list internal server error body error
swagger:model NetworkListsUpdateNetworkListInternalServerErrorBodyError
*/
type NetworkListsUpdateNetworkListInternalServerErrorBodyError struct {

	// code
	// Example: INTERNAL
	Code string `json:"code,omitempty"`

	// message
	// Example: Internal Server Error
	Message string `json:"message,omitempty"`

	// status
	// Example: 500
	Status string `json:"status,omitempty"`
}

// Validate validates this network lists update network list internal server error body error
func (o *NetworkListsUpdateNetworkListInternalServerErrorBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this network lists update network list internal server error body error based on context it is used
func (o *NetworkListsUpdateNetworkListInternalServerErrorBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NetworkListsUpdateNetworkListInternalServerErrorBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NetworkListsUpdateNetworkListInternalServerErrorBodyError) UnmarshalBinary(b []byte) error {
	var res NetworkListsUpdateNetworkListInternalServerErrorBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NetworkListsUpdateNetworkListNotFoundBody network lists update network list not found body
swagger:model NetworkListsUpdateNetworkListNotFoundBody
*/
type NetworkListsUpdateNetworkListNotFoundBody struct {

	// error
	Error *NetworkListsUpdateNetworkListNotFoundBodyError `json:"error,omitempty"`
}

// Validate validates this network lists update network list not found body
func (o *NetworkListsUpdateNetworkListNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NetworkListsUpdateNetworkListNotFoundBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkListsUpdateNetworkListNotFound" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkListsUpdateNetworkListNotFound" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this network lists update network list not found body based on the context it is used
func (o *NetworkListsUpdateNetworkListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NetworkListsUpdateNetworkListNotFoundBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkListsUpdateNetworkListNotFound" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkListsUpdateNetworkListNotFound" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NetworkListsUpdateNetworkListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NetworkListsUpdateNetworkListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res NetworkListsUpdateNetworkListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NetworkListsUpdateNetworkListNotFoundBodyError network lists update network list not found body error
swagger:model NetworkListsUpdateNetworkListNotFoundBodyError
*/
type NetworkListsUpdateNetworkListNotFoundBodyError struct {

	// code
	// Example: NOT_FOUND
	Code string `json:"code,omitempty"`

	// message
	// Example: Network List does not exist
	Message string `json:"message,omitempty"`

	// status
	// Example: 404
	Status string `json:"status,omitempty"`
}

// Validate validates this network lists update network list not found body error
func (o *NetworkListsUpdateNetworkListNotFoundBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this network lists update network list not found body error based on context it is used
func (o *NetworkListsUpdateNetworkListNotFoundBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NetworkListsUpdateNetworkListNotFoundBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NetworkListsUpdateNetworkListNotFoundBodyError) UnmarshalBinary(b []byte) error {
	var res NetworkListsUpdateNetworkListNotFoundBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
