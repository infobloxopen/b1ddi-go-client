// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AtcfwNetworkList The Network List object.
//
// Before you can apply security policies, you must first define the networks that you want to protect from malicious attacks. The first step in configuring BloxOne Cloud is to set up DNS Firewall by defining your remote networks. You identify these external networks by their IP addresses. A network can contain a group of IPv4 or IPv6 addresses or blocks.
//
// swagger:model atcfwNetworkList
type AtcfwNetworkList struct {

	// The time when this Network List object was created.
	// Read Only: true
	// Format: date-time
	CreatedTime strfmt.DateTime `json:"created_time,omitempty"`

	// The brief description for the network list.
	// Example: Network List A Description
	Description string `json:"description,omitempty"`

	// The Network List object identifier.
	// Read Only: true
	ID int32 `json:"id,omitempty"`

	// The list of networks' CIDRs that are subject for malicious attacks protection.
	// Example: ["156.2.3.0/24","98.36.1.4/31","2001:db8:1::/48","2001:db8::2/128"]
	Items []string `json:"items"`

	// The name of the network list.
	// Example: network_list_a
	Name string `json:"name,omitempty"`

	// The identifier of the security policy with which the network list is associated.
	// Example: 56321
	// Read Only: true
	PolicyID int32 `json:"policy_id,omitempty"`

	// The time when this Network List object was last updated.
	// Read Only: true
	// Format: date-time
	UpdatedTime strfmt.DateTime `json:"updated_time,omitempty"`
}

// Validate validates this atcfw network list
func (m *AtcfwNetworkList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AtcfwNetworkList) validateCreatedTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("created_time", "body", "date-time", m.CreatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AtcfwNetworkList) validateUpdatedTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_time", "body", "date-time", m.UpdatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this atcfw network list based on the context it is used
func (m *AtcfwNetworkList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AtcfwNetworkList) contextValidateCreatedTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_time", "body", strfmt.DateTime(m.CreatedTime)); err != nil {
		return err
	}

	return nil
}

func (m *AtcfwNetworkList) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int32(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *AtcfwNetworkList) contextValidatePolicyID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "policy_id", "body", int32(m.PolicyID)); err != nil {
		return err
	}

	return nil
}

func (m *AtcfwNetworkList) contextValidateUpdatedTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated_time", "body", strfmt.DateTime(m.UpdatedTime)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AtcfwNetworkList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AtcfwNetworkList) UnmarshalBinary(b []byte) error {
	var res AtcfwNetworkList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
