// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AtcfwNamedListItemsInsertOrUpdateResponse The Named List Items create or update response.
//
// swagger:model atcfwNamedListItemsInsertOrUpdateResponse
type AtcfwNamedListItemsInsertOrUpdateResponse struct {

	// success
	Success *AtcfwNamedListItemsInsertOrUpdateResponseSuccess `json:"success,omitempty"`
}

// Validate validates this atcfw named list items insert or update response
func (m *AtcfwNamedListItemsInsertOrUpdateResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSuccess(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AtcfwNamedListItemsInsertOrUpdateResponse) validateSuccess(formats strfmt.Registry) error {
	if swag.IsZero(m.Success) { // not required
		return nil
	}

	if m.Success != nil {
		if err := m.Success.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("success")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("success")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this atcfw named list items insert or update response based on the context it is used
func (m *AtcfwNamedListItemsInsertOrUpdateResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSuccess(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AtcfwNamedListItemsInsertOrUpdateResponse) contextValidateSuccess(ctx context.Context, formats strfmt.Registry) error {

	if m.Success != nil {

		if swag.IsZero(m.Success) { // not required
			return nil
		}

		if err := m.Success.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("success")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("success")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AtcfwNamedListItemsInsertOrUpdateResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AtcfwNamedListItemsInsertOrUpdateResponse) UnmarshalBinary(b []byte) error {
	var res AtcfwNamedListItemsInsertOrUpdateResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AtcfwNamedListItemsInsertOrUpdateResponseSuccess atcfw named list items insert or update response success
//
// swagger:model AtcfwNamedListItemsInsertOrUpdateResponseSuccess
type AtcfwNamedListItemsInsertOrUpdateResponseSuccess struct {

	// code
	// Example: UPDATED
	Code string `json:"code,omitempty"`

	// status
	// Example: 201
	Status int32 `json:"status,omitempty"`
}

// Validate validates this atcfw named list items insert or update response success
func (m *AtcfwNamedListItemsInsertOrUpdateResponseSuccess) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this atcfw named list items insert or update response success based on context it is used
func (m *AtcfwNamedListItemsInsertOrUpdateResponseSuccess) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AtcfwNamedListItemsInsertOrUpdateResponseSuccess) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AtcfwNamedListItemsInsertOrUpdateResponseSuccess) UnmarshalBinary(b []byte) error {
	var res AtcfwNamedListItemsInsertOrUpdateResponseSuccess
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
