// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AtcfwSecurityPolicy The Security Policy object.
//
// A security policy defines a set of rules and actions that you define to balance access and constraints so you can mitigate malicious attacks and provide security for your networks. When you create a new security policy, you first define a network scope to which you add networks, DNS forwarding proxies, and BloxOne Endpoint groups. BloxOne Cloud applies the security policy to all the entities that you include in the network scope. You can also include DNS forwarding proxies to which you want to apply the security policy.  After you define the network scope, you can add custom lists and category filters to the security policy. You can also specify actions for the added lists and filters, and to determine the precedence order for the entities. Depending on your subscription level, each security policy also comes with a set of predefined threat intelligence feeds and Threat Insight rules that are inherited from the default global policy. You cannot delete the inherited feeds and rules, but you can change their precedence order. For each policy you can define policy-level action (Default Action) gets applied when none of the policy rules apply/match. If an user really needs access to some blocked domain (web page) via a browser - there is a possibility to assign special bypass code(s) (Bypass Code) to any policy.
//
// swagger:model atcfwSecurityPolicy
type AtcfwSecurityPolicy struct {

	// Access codes assigned to Security Policy
	AccessCodes []string `json:"access_codes"`

	// The time when this Security Policy object was created.
	// Read Only: true
	// Format: date-time
	CreatedTime strfmt.DateTime `json:"created_time,omitempty"`

	// The policy-level action gets applied when none of the policy rules apply/match.
	// The default value for default_action is "action_allow".
	// Example: action_allow
	DefaultAction string `json:"default_action,omitempty"`

	// Name of the custom redirect, if the default_action is "action_redirect".
	// Example: redirect_a
	DefaultRedirectName string `json:"default_redirect_name,omitempty"`

	// The brief description for the security policy.
	// Example: Security Policy A Description
	Description string `json:"description,omitempty"`

	// The list of DNS Forwarding Proxy Services object identifiers. For Internal Use only.
	// Example: ["u2y3w3fuhhtx7aykfkuergkuboc33wyqrrmjnr5tyrlyredwow374gu5uwzqnsb6","u2y3w3fuhhtx7aykfkuergkuboc33wyqrrmjnr5tyrlyredwow374gu5uwzqaweq"]
	DfpServices []string `json:"dfp_services"`

	// The list of DNS Forwarding Proxy object identifiers.
	// Example: [12456,163211]
	Dfps []int32 `json:"dfps"`

	// Use ECS for handling policy
	Ecs bool `json:"ecs,omitempty"`

	// The Security Policy object identifier.
	// Read Only: true
	ID int32 `json:"id,omitempty"`

	// Flag that indicates whether this is a default security policy.
	// Example: false
	// Read Only: true
	IsDefault bool `json:"is_default,omitempty"`

	// The name of the security policy.
	// Example: security_policy_a
	Name string `json:"name,omitempty"`

	// List of DFPs associated with this policy via network address (with corresponding network address)
	NetAddressDfps []*AtcfwNetAddrDfpAssignment `json:"net_address_dfps"`

	// The list of Network Lists identifiers that represents networks that you want to protect from malicious attacks.
	// Example: [522436,23465]
	NetworkLists []int64 `json:"network_lists"`

	// Use DNS resolve on onprem side
	OnpremResolve bool `json:"onprem_resolve,omitempty"`

	// Security precedence enable selection of the highest priority
	// policy, in cases where a query matches multiple policies.
	Precedence int32 `json:"precedence,omitempty"`

	// The list of BloxOne Endpoint groups identifiers.
	// Example: [56312,461345]
	RoamingDeviceGroups []int32 `json:"roaming_device_groups"`

	// The list of Security Policy Rules objects that represent the set of rules and actions that you define to balance access and constraints so you can mitigate malicious attacks and provide security for your networks.
	Rules []*AtcfwSecurityPolicyRule `json:"rules"`

	// Apply automated rules to enforce safe search
	SafeSearch bool `json:"safe_search,omitempty"`

	// Enables tag support for resource where tags attribute contains user-defined key value pairs
	Tags interface{} `json:"tags,omitempty"`

	// The time when this Security Policy object was last updated.
	// Read Only: true
	// Format: date-time
	UpdatedTime strfmt.DateTime `json:"updated_time,omitempty"`

	// List of user groups associated with this policy
	UserGroups []string `json:"user_groups"`
}

// Validate validates this atcfw security policy
func (m *AtcfwSecurityPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetAddressDfps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AtcfwSecurityPolicy) validateCreatedTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("created_time", "body", "date-time", m.CreatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AtcfwSecurityPolicy) validateNetAddressDfps(formats strfmt.Registry) error {
	if swag.IsZero(m.NetAddressDfps) { // not required
		return nil
	}

	for i := 0; i < len(m.NetAddressDfps); i++ {
		if swag.IsZero(m.NetAddressDfps[i]) { // not required
			continue
		}

		if m.NetAddressDfps[i] != nil {
			if err := m.NetAddressDfps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("net_address_dfps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("net_address_dfps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AtcfwSecurityPolicy) validateRules(formats strfmt.Registry) error {
	if swag.IsZero(m.Rules) { // not required
		return nil
	}

	for i := 0; i < len(m.Rules); i++ {
		if swag.IsZero(m.Rules[i]) { // not required
			continue
		}

		if m.Rules[i] != nil {
			if err := m.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AtcfwSecurityPolicy) validateUpdatedTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_time", "body", "date-time", m.UpdatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this atcfw security policy based on the context it is used
func (m *AtcfwSecurityPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsDefault(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetAddressDfps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AtcfwSecurityPolicy) contextValidateCreatedTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_time", "body", strfmt.DateTime(m.CreatedTime)); err != nil {
		return err
	}

	return nil
}

func (m *AtcfwSecurityPolicy) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int32(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *AtcfwSecurityPolicy) contextValidateIsDefault(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "is_default", "body", bool(m.IsDefault)); err != nil {
		return err
	}

	return nil
}

func (m *AtcfwSecurityPolicy) contextValidateNetAddressDfps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetAddressDfps); i++ {

		if m.NetAddressDfps[i] != nil {

			if swag.IsZero(m.NetAddressDfps[i]) { // not required
				return nil
			}

			if err := m.NetAddressDfps[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("net_address_dfps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("net_address_dfps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AtcfwSecurityPolicy) contextValidateRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Rules); i++ {

		if m.Rules[i] != nil {

			if swag.IsZero(m.Rules[i]) { // not required
				return nil
			}

			if err := m.Rules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AtcfwSecurityPolicy) contextValidateUpdatedTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated_time", "body", strfmt.DateTime(m.UpdatedTime)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AtcfwSecurityPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AtcfwSecurityPolicy) UnmarshalBinary(b []byte) error {
	var res AtcfwSecurityPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
