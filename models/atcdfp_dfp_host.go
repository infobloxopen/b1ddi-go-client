// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AtcdfpDfpHost atcdfp dfp host
//
// swagger:model atcdfpDfpHost
type AtcdfpDfpHost struct {

	// // The DNS Forwarding Proxy legacy ID object identifier.
	LegacyHostID int32 `json:"legacy_host_id,omitempty"`

	// The name of the DNS Forwarding Proxy.
	// Example: dfp_a
	// Read Only: true
	Name string `json:"name,omitempty"`

	// The On-Prem Host identifier.
	// Example: aed8263b8900bfb178e0bb7c57ba5af8
	// Read Only: true
	Ophid string `json:"ophid,omitempty"`

	// The DNS Forwarding Proxy site identifier that is appended to DNS queries originating from this DNS Forwarding Proxy and subsequently used for policy lookup purposes.
	// Example: 134997289555407a8527bea7957ea7a0
	// Read Only: true
	SiteID string `json:"site_id,omitempty"`
}

// Validate validates this atcdfp dfp host
func (m *AtcdfpDfpHost) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this atcdfp dfp host based on the context it is used
func (m *AtcdfpDfpHost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOphid(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSiteID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AtcdfpDfpHost) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *AtcdfpDfpHost) contextValidateOphid(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ophid", "body", string(m.Ophid)); err != nil {
		return err
	}

	return nil
}

func (m *AtcdfpDfpHost) contextValidateSiteID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "site_id", "body", string(m.SiteID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AtcdfpDfpHost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AtcdfpDfpHost) UnmarshalBinary(b []byte) error {
	var res AtcdfpDfpHost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
