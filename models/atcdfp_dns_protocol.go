// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AtcdfpDNSProtocol atcdfp DNS protocol
//
// swagger:model atcdfpDNSProtocol
type AtcdfpDNSProtocol string

func NewAtcdfpDNSProtocol(value AtcdfpDNSProtocol) *AtcdfpDNSProtocol {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AtcdfpDNSProtocol.
func (m AtcdfpDNSProtocol) Pointer() *AtcdfpDNSProtocol {
	return &m
}

const (

	// AtcdfpDNSProtocolDO53 captures enum value "DO53"
	AtcdfpDNSProtocolDO53 AtcdfpDNSProtocol = "DO53"

	// AtcdfpDNSProtocolDOT captures enum value "DOT"
	AtcdfpDNSProtocolDOT AtcdfpDNSProtocol = "DOT"
)

// for schema
var atcdfpDnsProtocolEnum []interface{}

func init() {
	var res []AtcdfpDNSProtocol
	if err := json.Unmarshal([]byte(`["DO53","DOT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		atcdfpDnsProtocolEnum = append(atcdfpDnsProtocolEnum, v)
	}
}

func (m AtcdfpDNSProtocol) validateAtcdfpDNSProtocolEnum(path, location string, value AtcdfpDNSProtocol) error {
	if err := validate.EnumCase(path, location, value, atcdfpDnsProtocolEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this atcdfp DNS protocol
func (m AtcdfpDNSProtocol) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAtcdfpDNSProtocolEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this atcdfp DNS protocol based on context it is used
func (m AtcdfpDNSProtocol) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
