// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NetAddrDfpAssignmentScopeType net addr dfp assignment scope type
//
// swagger:model NetAddrDfpAssignmentScopeType
type NetAddrDfpAssignmentScopeType string

func NewNetAddrDfpAssignmentScopeType(value NetAddrDfpAssignmentScopeType) *NetAddrDfpAssignmentScopeType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated NetAddrDfpAssignmentScopeType.
func (m NetAddrDfpAssignmentScopeType) Pointer() *NetAddrDfpAssignmentScopeType {
	return &m
}

const (

	// NetAddrDfpAssignmentScopeTypeUNKNOWN captures enum value "UNKNOWN"
	NetAddrDfpAssignmentScopeTypeUNKNOWN NetAddrDfpAssignmentScopeType = "UNKNOWN"

	// NetAddrDfpAssignmentScopeTypeADDRESSBLOCK captures enum value "ADDRESS_BLOCK"
	NetAddrDfpAssignmentScopeTypeADDRESSBLOCK NetAddrDfpAssignmentScopeType = "ADDRESS_BLOCK"

	// NetAddrDfpAssignmentScopeTypeSUBNET captures enum value "SUBNET"
	NetAddrDfpAssignmentScopeTypeSUBNET NetAddrDfpAssignmentScopeType = "SUBNET"

	// NetAddrDfpAssignmentScopeTypeADDRESS captures enum value "ADDRESS"
	NetAddrDfpAssignmentScopeTypeADDRESS NetAddrDfpAssignmentScopeType = "ADDRESS"

	// NetAddrDfpAssignmentScopeTypeRANGE captures enum value "RANGE"
	NetAddrDfpAssignmentScopeTypeRANGE NetAddrDfpAssignmentScopeType = "RANGE"
)

// for schema
var netAddrDfpAssignmentScopeTypeEnum []interface{}

func init() {
	var res []NetAddrDfpAssignmentScopeType
	if err := json.Unmarshal([]byte(`["UNKNOWN","ADDRESS_BLOCK","SUBNET","ADDRESS","RANGE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		netAddrDfpAssignmentScopeTypeEnum = append(netAddrDfpAssignmentScopeTypeEnum, v)
	}
}

func (m NetAddrDfpAssignmentScopeType) validateNetAddrDfpAssignmentScopeTypeEnum(path, location string, value NetAddrDfpAssignmentScopeType) error {
	if err := validate.EnumCase(path, location, value, netAddrDfpAssignmentScopeTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this net addr dfp assignment scope type
func (m NetAddrDfpAssignmentScopeType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNetAddrDfpAssignmentScopeTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this net addr dfp assignment scope type based on context it is used
func (m NetAddrDfpAssignmentScopeType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
