// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InfraDetailLocation DetailLocation
//
// swagger:model infraDetailLocation
type InfraDetailLocation struct {

	// The address of the Location containing address, postal_code, city, state, and country.
	Address interface{} `json:"address,omitempty"`

	// The resource identifier.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Latitude of the Location.
	Latitude float64 `json:"latitude,omitempty"`

	// Longitude of the Location.
	Longitude float64 `json:"longitude,omitempty"`

	// The metadata of the Location which could contain other info such as attributions.
	Metadata interface{} `json:"metadata,omitempty"`
}

// Validate validates this infra detail location
func (m *InfraDetailLocation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this infra detail location based on the context it is used
func (m *InfraDetailLocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfraDetailLocation) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InfraDetailLocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InfraDetailLocation) UnmarshalBinary(b []byte) error {
	var res InfraDetailLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
