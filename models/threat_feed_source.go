// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ThreatFeedSource threat feed source
//
// swagger:model ThreatFeedSource
type ThreatFeedSource string

func NewThreatFeedSource(value ThreatFeedSource) *ThreatFeedSource {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ThreatFeedSource.
func (m ThreatFeedSource) Pointer() *ThreatFeedSource {
	return &m
}

const (

	// ThreatFeedSourceInfoblox captures enum value "Infoblox"
	ThreatFeedSourceInfoblox ThreatFeedSource = "Infoblox"

	// ThreatFeedSourceCustom captures enum value "Custom"
	ThreatFeedSourceCustom ThreatFeedSource = "Custom"
)

// for schema
var threatFeedSourceEnum []interface{}

func init() {
	var res []ThreatFeedSource
	if err := json.Unmarshal([]byte(`["Infoblox","Custom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		threatFeedSourceEnum = append(threatFeedSourceEnum, v)
	}
}

func (m ThreatFeedSource) validateThreatFeedSourceEnum(path, location string, value ThreatFeedSource) error {
	if err := validate.EnumCase(path, location, value, threatFeedSourceEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this threat feed source
func (m ThreatFeedSource) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateThreatFeedSourceEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this threat feed source based on context it is used
func (m ThreatFeedSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
