// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InfraDetailHost DetailHost
//
// swagger:model infraDetailHost
type InfraDetailHost struct {

	// Composite Status of this Host (`online`, `degraded`, `error`, `offline`, `pending`, `awaiting approval`).
	CompositeStatus string `json:"composite_status,omitempty"`

	// The list of Host-specific configurations for each Service deployed on this Host.
	Configs []*InfraDetailHostServiceConfig `json:"configs"`

	// The timestamp of creation of Host.
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// The description of the Host.
	Description string `json:"description,omitempty"`

	// The name of the Host.
	DisplayName string `json:"display_name,omitempty"`

	// The sub-type of a specific Host type.
	//
	// Example: For Host type BloxOne Appliance, sub-type could be "B105" or "VEP1425"
	HostSubtype string `json:"host_subtype,omitempty"`

	// The type of Host (1. NIOS , 2. NIOS HA, 3. BloxOne VM , 4. BloxOne Appliance, 5. BloxOne Container, 6. CNIOS)
	HostType string `json:"host_type,omitempty"`

	// The version of the Host platform services.
	HostVersion string `json:"host_version,omitempty"`

	// The resource identifier.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The IP address of the Host.
	IPAddress string `json:"ip_address,omitempty"`

	// The IP Space of the Host.
	IPSpace string `json:"ip_space,omitempty"`

	// The legacy Host object identifier.
	LegacyID string `json:"legacy_id,omitempty"`

	// Location that this Host is associated with.
	Location *InfraDetailLocation `json:"location,omitempty"`

	// The MAC address of the Host.
	MacAddress string `json:"mac_address,omitempty"`

	// The NAT IP address of the Host.
	NatIP string `json:"nat_ip,omitempty"`

	// The unique On-Prem Host ID generated by the On-Prem device and assigned to the Host once
	// it is registered and logged into the Infoblox Cloud.
	Ophid string `json:"ophid,omitempty"`

	// Pool information for this Host (internal).
	Pool *InfraPoolInfo `json:"pool,omitempty"`

	// The unique serial number of the Host.
	SerialNumber string `json:"serial_number,omitempty"`

	// The list of Services deployed on this Host.
	Services []*InfraDetailHostServiceConfig `json:"services"`

	// Tags associated with this Host.
	Tags interface{} `json:"tags,omitempty"`

	// The timezone of the Host.
	Timezone string `json:"timezone,omitempty"`

	// The timestamp of the latest update on Host.
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this infra detail host
func (m *InfraDetailHost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfraDetailHost) validateConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.Configs) { // not required
		return nil
	}

	for i := 0; i < len(m.Configs); i++ {
		if swag.IsZero(m.Configs[i]) { // not required
			continue
		}

		if m.Configs[i] != nil {
			if err := m.Configs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("configs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InfraDetailHost) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InfraDetailHost) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *InfraDetailHost) validatePool(formats strfmt.Registry) error {
	if swag.IsZero(m.Pool) { // not required
		return nil
	}

	if m.Pool != nil {
		if err := m.Pool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pool")
			}
			return err
		}
	}

	return nil
}

func (m *InfraDetailHost) validateServices(formats strfmt.Registry) error {
	if swag.IsZero(m.Services) { // not required
		return nil
	}

	for i := 0; i < len(m.Services); i++ {
		if swag.IsZero(m.Services[i]) { // not required
			continue
		}

		if m.Services[i] != nil {
			if err := m.Services[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InfraDetailHost) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this infra detail host based on the context it is used
func (m *InfraDetailHost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePool(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfraDetailHost) contextValidateConfigs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Configs); i++ {

		if m.Configs[i] != nil {

			if swag.IsZero(m.Configs[i]) { // not required
				return nil
			}

			if err := m.Configs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("configs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InfraDetailHost) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *InfraDetailHost) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Location != nil {

		if swag.IsZero(m.Location) { // not required
			return nil
		}

		if err := m.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *InfraDetailHost) contextValidatePool(ctx context.Context, formats strfmt.Registry) error {

	if m.Pool != nil {

		if swag.IsZero(m.Pool) { // not required
			return nil
		}

		if err := m.Pool.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pool")
			}
			return err
		}
	}

	return nil
}

func (m *InfraDetailHost) contextValidateServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Services); i++ {

		if m.Services[i] != nil {

			if swag.IsZero(m.Services[i]) { // not required
				return nil
			}

			if err := m.Services[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InfraDetailHost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InfraDetailHost) UnmarshalBinary(b []byte) error {
	var res InfraDetailHost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
