// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InfraHost Host
//
// # Infrastructure Service
//
// swagger:model infraHost
type InfraHost struct {

	// The list of Host-specific configurations for each Service deployed on this Host.
	// Read Only: true
	Configs []*InfraServiceHostConfig `json:"configs"`

	// Connectivity Monitor Properties
	//
	// Represents the connectivity monitor properties of a Host, to enable/disable connectivity monitoring
	// for redundant network interfaces.
	//
	// The "endpoint_type" is:
	// - `"csp"` for enabling monitoring
	// - `""` for disabling monitoring (default)
	//
	// Note: Currently, all fields except "endpoint_type" are read-only, and will be overridden to default values
	// in case they are edited.
	//
	// Example:
	// ```
	// {
	//   "connectivity_monitor": {
	//     "cost":1000000,
	//     "endpoint_type":"csp",
	//     "endpoint":"http://csp.infoblox.com",
	//     "interval":15,
	//     "failure_threshold":1,
	//     "success_threshold":2
	//   }
	// }
	// ```
	ConnectivityMonitor interface{} `json:"connectivity_monitor,omitempty"`

	// The timestamp of creation of Host.
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// The creator of the Host (internal use only).
	// Read Only: true
	CreatedBy string `json:"created_by,omitempty"`

	// The description of the Host (optional).
	Description string `json:"description,omitempty"`

	// The name of the Host (unique).
	// Required: true
	DisplayName *string `json:"display_name"`

	// The sub-type of a specific Host type.
	//
	// Example: For Host type BloxOne Appliance, sub-type could be "B105" or "VEP1425"
	HostSubtype string `json:"host_subtype,omitempty"`

	// The type of Host.
	//
	// Should be one of: 1. NIOS , 2. NIOS HA, 3. BloxOne VM , 4. BloxOne Appliance, 5. BloxOne Container, 6. CNIOS
	HostType string `json:"host_type,omitempty"`

	// The version of the Host platform services.
	// Read Only: true
	HostVersion string `json:"host_version,omitempty"`

	// The resource identifier.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The IP address of the Host.
	IPAddress string `json:"ip_address,omitempty"`

	// The IP Space of the Host.
	IPSpace string `json:"ip_space,omitempty"`

	// The legacy Host object identifier.
	// Read Only: true
	LegacyID string `json:"legacy_id,omitempty"`

	// The resource identifier.
	LocationID string `json:"location_id,omitempty"`

	// The MAC address of the Host.
	MacAddress string `json:"mac_address,omitempty"`

	// The NAT IP address of the Host.
	NatIP string `json:"nat_ip,omitempty"`

	// The CSP cluster identifier (internal use only).
	// Read Only: true
	NoaCluster string `json:"noa_cluster,omitempty"`

	// The unique On-Prem Host ID generated by the On-Prem device and assigned to the Host once
	// it is registered and logged into the Infoblox Cloud.
	// Read Only: true
	Ophid string `json:"ophid,omitempty"`

	// The resource identifier.
	// Required: true
	PoolID *string `json:"pool_id"`

	// The unique serial number of the Host.
	SerialNumber string `json:"serial_number,omitempty"`

	// Tags associated with this Host.
	Tags interface{} `json:"tags,omitempty"`

	// The timezone of the Host.
	Timezone string `json:"timezone,omitempty"`

	// The timestamp of the latest update on Host.
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this infra host
func (m *InfraHost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoolID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfraHost) validateConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.Configs) { // not required
		return nil
	}

	for i := 0; i < len(m.Configs); i++ {
		if swag.IsZero(m.Configs[i]) { // not required
			continue
		}

		if m.Configs[i] != nil {
			if err := m.Configs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("configs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InfraHost) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InfraHost) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("display_name", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *InfraHost) validatePoolID(formats strfmt.Registry) error {

	if err := validate.Required("pool_id", "body", m.PoolID); err != nil {
		return err
	}

	return nil
}

func (m *InfraHost) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this infra host based on the context it is used
func (m *InfraHost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLegacyID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNoaCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOphid(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfraHost) contextValidateConfigs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "configs", "body", []*InfraServiceHostConfig(m.Configs)); err != nil {
		return err
	}

	for i := 0; i < len(m.Configs); i++ {

		if m.Configs[i] != nil {

			if swag.IsZero(m.Configs[i]) { // not required
				return nil
			}

			if err := m.Configs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("configs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InfraHost) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_at", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *InfraHost) contextValidateCreatedBy(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_by", "body", string(m.CreatedBy)); err != nil {
		return err
	}

	return nil
}

func (m *InfraHost) contextValidateHostVersion(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "host_version", "body", string(m.HostVersion)); err != nil {
		return err
	}

	return nil
}

func (m *InfraHost) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *InfraHost) contextValidateLegacyID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "legacy_id", "body", string(m.LegacyID)); err != nil {
		return err
	}

	return nil
}

func (m *InfraHost) contextValidateNoaCluster(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "noa_cluster", "body", string(m.NoaCluster)); err != nil {
		return err
	}

	return nil
}

func (m *InfraHost) contextValidateOphid(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ophid", "body", string(m.Ophid)); err != nil {
		return err
	}

	return nil
}

func (m *InfraHost) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated_at", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InfraHost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InfraHost) UnmarshalBinary(b []byte) error {
	var res InfraHost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
