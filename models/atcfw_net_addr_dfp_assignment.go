// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AtcfwNetAddrDfpAssignment Scoped DFP assignment to a policy, scoped via network address (CIDR)
//
// swagger:model atcfwNetAddrDfpAssignment
type AtcfwNetAddrDfpAssignment struct {

	// network address in IPv4 CIDR (address/bitmask length) string format
	AddrNet string `json:"addr_net,omitempty"`

	// The list of identifiers of DFPs that have association with this scope.
	// Read Only: true
	DfpIds []int32 `json:"dfp_ids"`

	// dfp service ids
	// Read Only: true
	DfpServiceIds []string `json:"dfp_service_ids"`

	// end
	End string `json:"end,omitempty"`

	// external scope ID, UUID
	ExternalScopeID string `json:"external_scope_id,omitempty"`

	// Host reference, UUID
	HostID string `json:"host_id,omitempty"`

	// IPSpace reference, UUID
	IPSpaceID string `json:"ip_space_id,omitempty"`

	// scope type
	ScopeType *NetAddrDfpAssignmentScopeType `json:"scope_type,omitempty"`

	// Start and end pair of addresses used for range scope type
	Start string `json:"start,omitempty"`
}

// Validate validates this atcfw net addr dfp assignment
func (m *AtcfwNetAddrDfpAssignment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScopeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AtcfwNetAddrDfpAssignment) validateScopeType(formats strfmt.Registry) error {
	if swag.IsZero(m.ScopeType) { // not required
		return nil
	}

	if m.ScopeType != nil {
		if err := m.ScopeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope_type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this atcfw net addr dfp assignment based on the context it is used
func (m *AtcfwNetAddrDfpAssignment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDfpIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDfpServiceIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScopeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AtcfwNetAddrDfpAssignment) contextValidateDfpIds(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dfp_ids", "body", []int32(m.DfpIds)); err != nil {
		return err
	}

	return nil
}

func (m *AtcfwNetAddrDfpAssignment) contextValidateDfpServiceIds(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dfp_service_ids", "body", []string(m.DfpServiceIds)); err != nil {
		return err
	}

	return nil
}

func (m *AtcfwNetAddrDfpAssignment) contextValidateScopeType(ctx context.Context, formats strfmt.Registry) error {

	if m.ScopeType != nil {

		if swag.IsZero(m.ScopeType) { // not required
			return nil
		}

		if err := m.ScopeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AtcfwNetAddrDfpAssignment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AtcfwNetAddrDfpAssignment) UnmarshalBinary(b []byte) error {
	var res AtcfwNetAddrDfpAssignment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
