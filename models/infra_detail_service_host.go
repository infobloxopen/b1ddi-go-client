// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InfraDetailServiceHost DetailServiceHost
//
// swagger:model infraDetailServiceHost
type InfraDetailServiceHost struct {

	// Composite Status of the Host (`online`, `degraded`, `error`, `offline`, `pending`, `awaiting approval`).
	CompositeStatus string `json:"composite_status,omitempty"`

	// List of Host-specific configurations of this Service.
	Config *InfraDetailServiceHostConfig `json:"config,omitempty"`

	// The name of the Host (unique).
	DisplayName string `json:"display_name,omitempty"`

	// The resource identifier.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The IP address of the Host.
	IPAddress string `json:"ip_address,omitempty"`

	// The legacy Host object identifier.
	LegacyID string `json:"legacy_id,omitempty"`

	// The unique On-Prem Host ID generated by the On-Prem device and assigned to the Host once
	// it is registered and logged into the Infoblox Cloud.
	Ophid string `json:"ophid,omitempty"`
}

// Validate validates this infra detail service host
func (m *InfraDetailServiceHost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfraDetailServiceHost) validateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this infra detail service host based on the context it is used
func (m *InfraDetailServiceHost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfraDetailServiceHost) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {

		if swag.IsZero(m.Config) { // not required
			return nil
		}

		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *InfraDetailServiceHost) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InfraDetailServiceHost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InfraDetailServiceHost) UnmarshalBinary(b []byte) error {
	var res InfraDetailServiceHost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
