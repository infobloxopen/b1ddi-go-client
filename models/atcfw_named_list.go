// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AtcfwNamedList The Named List object.
//
// The Named List object represents several types of lists allowed for BloxOne Cloud such as predefined threat intelligence feeds that your subscription offers (Threat Insight, Fast Flux, DGA, DNSM). In addition to the predefined threat intelligence feeds that your subscription offers, you can create custom lists (containing domains and IP addresses) to define whitelists and blacklists for additional protection. You can use a custom list to complement existing feeds or override the Block, Allow, Log, or Redirect action that is currently defined for an existing feed.
//
// Note that lists representing predefined TI feeds cannot be created, updated and deleted.
//
// swagger:model atcfwNamedList
type AtcfwNamedList struct {

	// The confidence level for a custom list. The possible values are ["LOW", "MEDIUM", "HIGH"]
	// Example: LOW
	ConfidenceLevel string `json:"confidence_level,omitempty"`

	// The time when this Named List object was created.
	// Read Only: true
	// Format: date-time
	CreatedTime strfmt.DateTime `json:"created_time,omitempty"`

	// The brief description for the named list.
	// Example: Named List A Description
	Description string `json:"description,omitempty"`

	// The Named List object identifier.
	// Read Only: true
	ID int32 `json:"id,omitempty"`

	// The number of items in this named list.
	// Example: 24567
	// Read Only: true
	ItemCount int32 `json:"item_count,omitempty"`

	// The list of the FQDN or IPv4/IPv6 CIDRs to define whitelists and blacklists for additional protection.
	// Example: ["example1.somedomain.com","193.56.2.11/32","2001:db8:ffff:ffff:ffff:ffff:ffff:fff1/128"]
	Items []string `json:"items"`

	// The List of ItemStructs structure which contains the item and its description
	// Example: [{"description":"Item 1 Description","item":"example1.somedomain.com"},{"description":"Item 2 Description","item":"193.56.2.11/32"},{"description":"Item 3 Description","item":"2001:db8:ffff:ffff:ffff:ffff:ffff:fff1/128"}]
	ItemsDescribed []*AtcfwItemStructs `json:"items_described"`

	// The name of the named list.
	// Example: named_list_a
	Name string `json:"name,omitempty"`

	// The list of the security policy names with which the named list is associated.
	// Example: ["security_policy_a","security_policy_b"]
	Policies []string `json:"policies"`

	// Enables tag support for resource where tags attribute contains user-defined key value pairs
	Tags interface{} `json:"tags,omitempty"`

	// The threat level for a custom list. The possible values are ["INFO", "LOW", "MEDIUM", "HIGH"]
	// Example: INFO
	ThreatLevel string `json:"threat_level,omitempty"`

	// The type of the named list, that can be "custom_list", "threat_insight", "fast_flux", "dga", or "dnsm".
	// Example: custom_list
	// Enum: [custom_list threat_insight fast_flux dga dnsm]
	Type string `json:"type,omitempty"`

	// The time when this Named List object was last updated.
	// Read Only: true
	// Format: date-time
	UpdatedTime strfmt.DateTime `json:"updated_time,omitempty"`
}

// Validate validates this atcfw named list
func (m *AtcfwNamedList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemsDescribed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AtcfwNamedList) validateCreatedTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("created_time", "body", "date-time", m.CreatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AtcfwNamedList) validateItemsDescribed(formats strfmt.Registry) error {
	if swag.IsZero(m.ItemsDescribed) { // not required
		return nil
	}

	for i := 0; i < len(m.ItemsDescribed); i++ {
		if swag.IsZero(m.ItemsDescribed[i]) { // not required
			continue
		}

		if m.ItemsDescribed[i] != nil {
			if err := m.ItemsDescribed[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items_described" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("items_described" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var atcfwNamedListTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["custom_list","threat_insight","fast_flux","dga","dnsm"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		atcfwNamedListTypeTypePropEnum = append(atcfwNamedListTypeTypePropEnum, v)
	}
}

const (

	// AtcfwNamedListTypeCustomList captures enum value "custom_list"
	AtcfwNamedListTypeCustomList string = "custom_list"

	// AtcfwNamedListTypeThreatInsight captures enum value "threat_insight"
	AtcfwNamedListTypeThreatInsight string = "threat_insight"

	// AtcfwNamedListTypeFastFlux captures enum value "fast_flux"
	AtcfwNamedListTypeFastFlux string = "fast_flux"

	// AtcfwNamedListTypeDga captures enum value "dga"
	AtcfwNamedListTypeDga string = "dga"

	// AtcfwNamedListTypeDnsm captures enum value "dnsm"
	AtcfwNamedListTypeDnsm string = "dnsm"
)

// prop value enum
func (m *AtcfwNamedList) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, atcfwNamedListTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AtcfwNamedList) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *AtcfwNamedList) validateUpdatedTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_time", "body", "date-time", m.UpdatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this atcfw named list based on the context it is used
func (m *AtcfwNamedList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateItemCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateItemsDescribed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AtcfwNamedList) contextValidateCreatedTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_time", "body", strfmt.DateTime(m.CreatedTime)); err != nil {
		return err
	}

	return nil
}

func (m *AtcfwNamedList) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int32(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *AtcfwNamedList) contextValidateItemCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "item_count", "body", int32(m.ItemCount)); err != nil {
		return err
	}

	return nil
}

func (m *AtcfwNamedList) contextValidateItemsDescribed(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ItemsDescribed); i++ {

		if m.ItemsDescribed[i] != nil {

			if swag.IsZero(m.ItemsDescribed[i]) { // not required
				return nil
			}

			if err := m.ItemsDescribed[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items_described" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("items_described" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AtcfwNamedList) contextValidateUpdatedTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated_time", "body", strfmt.DateTime(m.UpdatedTime)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AtcfwNamedList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AtcfwNamedList) UnmarshalBinary(b []byte) error {
	var res AtcfwNamedList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
