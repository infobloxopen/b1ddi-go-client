// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InfraDetailService DetailService
//
// swagger:model infraDetailService
type InfraDetailService struct {

	// Composite State of this Service (`started`, `stopped`, `stopping`, `starting`, `error`).
	CompositeState string `json:"composite_state,omitempty"`

	// Composite Status of this Service (`online`, `stopped`, `degraded`, `error`).
	CompositeStatus string `json:"composite_status,omitempty"`

	// Timestamp of creation of Service.
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Current version of this Service.
	CurrentVersion string `json:"current_version,omitempty"`

	// The description of the Service.
	Description string `json:"description,omitempty"`

	// The desired state of the Service (`"start"` or `"stop"`).
	DesiredState string `json:"desired_state,omitempty"`

	// The desired version of the Service.
	DesiredVersion string `json:"desired_version,omitempty"`

	// Configuration for the interfaces through which this Service can send outgoing traffic.
	Destinations interface{} `json:"destinations,omitempty"`

	// List of Hosts on which this Service is deployed.
	Hosts []*InfraDetailServiceHost `json:"hosts"`

	// The resource identifier.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// List of interfaces on which this Service can operate.
	InterfaceLabels []string `json:"interface_labels"`

	// Location that this Host is associated with.
	Location *InfraDetailLocation `json:"location,omitempty"`

	// The name of the Service.
	Name string `json:"name,omitempty"`

	// Pool information for this Service (internal).
	Pool *InfraPoolInfo `json:"pool,omitempty"`

	// The type of the Service deployed on the Host (`dns`, `cdc`, etc.).
	ServiceType string `json:"service_type,omitempty"`

	// Configuration for the interfaces through which this Service can take incoming traffic.
	SourceInterfaces interface{} `json:"source_interfaces,omitempty"`

	// Tags associated with this Service.
	Tags interface{} `json:"tags,omitempty"`

	// Timestamp of the latest update on Service.
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this infra detail service
func (m *InfraDetailService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfraDetailService) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InfraDetailService) validateHosts(formats strfmt.Registry) error {
	if swag.IsZero(m.Hosts) { // not required
		return nil
	}

	for i := 0; i < len(m.Hosts); i++ {
		if swag.IsZero(m.Hosts[i]) { // not required
			continue
		}

		if m.Hosts[i] != nil {
			if err := m.Hosts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hosts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InfraDetailService) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *InfraDetailService) validatePool(formats strfmt.Registry) error {
	if swag.IsZero(m.Pool) { // not required
		return nil
	}

	if m.Pool != nil {
		if err := m.Pool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pool")
			}
			return err
		}
	}

	return nil
}

func (m *InfraDetailService) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this infra detail service based on the context it is used
func (m *InfraDetailService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHosts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePool(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfraDetailService) contextValidateHosts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Hosts); i++ {

		if m.Hosts[i] != nil {

			if swag.IsZero(m.Hosts[i]) { // not required
				return nil
			}

			if err := m.Hosts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hosts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InfraDetailService) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *InfraDetailService) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Location != nil {

		if swag.IsZero(m.Location) { // not required
			return nil
		}

		if err := m.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *InfraDetailService) contextValidatePool(ctx context.Context, formats strfmt.Registry) error {

	if m.Pool != nil {

		if swag.IsZero(m.Pool) { // not required
			return nil
		}

		if err := m.Pool.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pool")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InfraDetailService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InfraDetailService) UnmarshalBinary(b []byte) error {
	var res InfraDetailService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
