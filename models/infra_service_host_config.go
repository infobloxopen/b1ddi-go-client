// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InfraServiceHostConfig ServiceHostConfig
//
// # ServiceHostConfig is the specific configuration for each Service deployed on a Host
//
// swagger:model infraServiceHostConfig
type InfraServiceHostConfig struct {

	// The current version of the Service deployed on the Host.
	CurrentVersion string `json:"current_version,omitempty"`

	// The field to carry any extra data specific to this configuration.
	ExtraData string `json:"extra_data,omitempty"`

	// The resource identifier.
	HostID string `json:"host_id,omitempty"`

	// The resource identifier.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The resource identifier.
	ServiceID string `json:"service_id,omitempty"`

	// The type of the Service deployed on the Host (`dns`, `cdc`, etc.).
	ServiceType string `json:"service_type,omitempty"`

	// The timestamp of the latest upgrade of the Host-specific Service configuration.
	// Format: date-time
	UpgradedAt strfmt.DateTime `json:"upgraded_at,omitempty"`
}

// Validate validates this infra service host config
func (m *InfraServiceHostConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUpgradedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfraServiceHostConfig) validateUpgradedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpgradedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("upgraded_at", "body", "date-time", m.UpgradedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this infra service host config based on the context it is used
func (m *InfraServiceHostConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfraServiceHostConfig) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InfraServiceHostConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InfraServiceHostConfig) UnmarshalBinary(b []byte) error {
	var res InfraServiceHostConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
