// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new services API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for services API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ServicesApplications(params *ServicesApplicationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServicesApplicationsOK, error)

	ServicesCreate(params *ServicesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServicesCreateCreated, error)

	ServicesDelete(params *ServicesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServicesDeleteNoContent, error)

	ServicesList(params *ServicesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServicesListOK, error)

	ServicesRead(params *ServicesReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServicesReadOK, error)

	ServicesUpdate(params *ServicesUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServicesUpdateCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ServicesApplications lists applications service types for a particular account

Used in order to retrieve available applications (Service types) for a particular account.
*/
func (a *Client) ServicesApplications(params *ServicesApplicationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServicesApplicationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServicesApplicationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServicesApplications",
		Method:             "GET",
		PathPattern:        "/applications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServicesApplicationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServicesApplicationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ServicesApplications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ServicesCreate creates a service resource

	Validation:

- "name" is required and should be unique.
- "service_type" is required.
- "pool_id" is required.
*/
func (a *Client) ServicesCreate(params *ServicesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServicesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServicesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServicesCreate",
		Method:             "POST",
		PathPattern:        "/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServicesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServicesCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ServicesCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ServicesDelete deletes a service resource

	Validation:

- "id" is required.
*/
func (a *Client) ServicesDelete(params *ServicesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServicesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServicesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServicesDelete",
		Method:             "DELETE",
		PathPattern:        "/services/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServicesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServicesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ServicesDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ServicesList lists all the service resources for an account
*/
func (a *Client) ServicesList(params *ServicesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServicesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServicesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServicesList",
		Method:             "GET",
		PathPattern:        "/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServicesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServicesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ServicesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ServicesRead reads a service resource

	Validation:

- "id" is required.
*/
func (a *Client) ServicesRead(params *ServicesReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServicesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServicesReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServicesRead",
		Method:             "GET",
		PathPattern:        "/services/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServicesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServicesReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ServicesRead: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ServicesUpdate updates a service resource

	Validation:

- "id" is required.
- "name" is required and should be unique.
- "service_type" is required.
- "pool_id" is required.
*/
func (a *Client) ServicesUpdate(params *ServicesUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServicesUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServicesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServicesUpdate",
		Method:             "PUT",
		PathPattern:        "/services/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServicesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServicesUpdateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ServicesUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
